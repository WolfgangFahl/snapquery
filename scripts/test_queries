#!/bin/bash
# WF 2024-06-05
# Enhanced script to handle snapquery calls efficiently and with feedback


# Function to execute snapquery in the background with feedback
run_snapquery() {
    local namespace="$1"
    local endpoint="$2"
    # Sanitize the namespace to be filesystem-friendly
    local sanitized_namespace="${namespace//\//-}"  # Replace slashes with hyphens
    sanitized_namespace="${sanitized_namespace//[^a-zA-Z0-9-_]/_}"  # Replace any non-alphanumeric characters with underscores

    # Ensure the log directory exists
    local log_dir="/tmp/query_test_log"
    mkdir -p "$log_dir"

    local log="${log_dir}/${endpoint}-${sanitized_namespace}.log"
    local command="snapquery -d -tq -en '$endpoint' --context 'cmd_line_tests' --namespace '$namespace'"

    echo "Running $command..."
    nohup bash -c "$command" 2>&1 > "$log"  &
    echo "... logged at $log"
}

# Fetch namespaces and their totals dynamically from snapquery -ln command
namespace_data=$(snapquery -ln)

# Define list of endpoints
wikidata_endpoints=("wikidata" "wikidata-qlever" "wikidata-triply" "wikidata-openlinksw" "wikidata-scatter")
dblp_endpoints=("dblp")

# Process each line to extract namespaces and totals
while IFS=':' read -r namespace count; do
    echo "Processing $namespace with total entries $count"

    case "$namespace" in
        dblp.org/examples*)
            for endpoint in "${dblp_endpoints[@]}"; do
                run_snapquery "$namespace" "$endpoint"
            done
            ;;
        *fed*)
            echo "Ignoring $namespace"
            ;;
        *)
            for endpoint in "${wikidata_endpoints[@]}"; do
                run_snapquery "$namespace" "$endpoint"
            done
            ;;
    esac
done <<< "$namespace_data"
