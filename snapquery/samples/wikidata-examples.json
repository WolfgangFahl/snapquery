{
  "namespace": "wikidata-examples",
  "target_graph_name": "wikidata",
  "queries": [
    {
      "query_id": "wikidata-examples.Cats",
      "namespace": "wikidata-examples",
      "name": "Cats",
      "sparql": "SELECT ?item ?itemLabel\nWHERE\n{\n  ?item wdt:P31 wd:Q146. # <translate><!--T:680--> Must be a cat</translate>\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". } # <translate><!--T:681--> Helps get the label in your language, if not, then en language</translate>\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Cats",
      "description": "This query looks at all items whose value of  is . It uses the service wikibase:label to return the labels in your default language or in English."
    },
    {
      "query_id": "wikidata-examples.Horses (showing some info about them)",
      "namespace": "wikidata-examples",
      "name": "Horses (showing some info about them)",
      "sparql": "\n#Illustrates optional fields, instances of subclasses, language fallback on label service, date to year conversion\n#title: Horses on Wikidata\nSELECT DISTINCT ?horse ?horseLabel ?mother ?motherLabel ?father ?fatherLabel (year(?birthdate) as ?birthyear) (year(?deathdate) as ?deathyear) ?genderLabel\nWHERE\n{\n  ?horse wdt:P31/wdt:P279* wd:Q726 .     # Instance et sous-classes de Q726-Cheval\n\n  OPTIONAL{?horse wdt:P25 ?mother .}       # P25 : M\u00e8re\n  OPTIONAL{?horse wdt:P22 ?father .}       # P22 : P\u00e8re\n  OPTIONAL{?horse wdt:P569 ?birthdate .} # P569 : Date de naissance\n  OPTIONAL{?horse wdt:P570 ?deathdate .}     # P570 : Date de d\u00e9c\u00e8s\n  OPTIONAL{?horse wdt:P21 ?gender .}       # P21 : Sexe\n\n  SERVICE wikibase:label { #BabelRainbow\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],fr,ar,be,bg,bn,ca,cs,da,de,el,en,es,et,fa,fi,he,hi,hu,hy,id,it,ja,jv,ko,nb,nl,eo,pa,pl,pt,ro,ru,sh,sk,sr,sv,sw,te,th,tr,uk,yue,vec,vi,zh\"\n  }\n}\nORDER BY ?horse\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Horses (showing some info about them)",
      "description": "This query looks at items whose value of  is  or any subclass of () . It displays the value of , ,  and computes birth year using  death year using . Items are ordered using the horses qid."
    },
    {
      "query_id": "wikidata-examples.Cats, with pictures",
      "namespace": "wikidata-examples",
      "name": "Cats, with pictures",
      "sparql": "\n#title: Cats, with pictures\n#defaultView:ImageGrid\nSELECT ?item ?itemLabel ?pic WHERE {\n  ?item wdt:P31 wd:Q146;\n    wdt:P18 ?pic.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Cats, with pictures",
      "description": "This query looks at all items with value of  equals to  with a . The results are displayed as a gallery with the option '#defaultView:ImageGrid'."
    },
    {
      "query_id": "wikidata-examples.Map of hospitals",
      "namespace": "wikidata-examples",
      "name": "Map of hospitals",
      "sparql": "#added 2017-08\n#defaultView:Map\nSELECT DISTINCT * WHERE {\n  ?item wdt:P31/wdt:P279* wd:Q16917;\n        wdt:P625 ?geo .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Map of hospitals",
      "description": "The query displays all items whose value of  is  or any  of  with . The results are displayed on a map using 'defaultView:Map'."
    },
    {
      "query_id": "wikidata-examples.Map of hackerspaces",
      "namespace": "wikidata-examples",
      "name": "Map of hackerspaces",
      "sparql": "#added 2021-12\n#defaultView:Map\nSELECT DISTINCT * WHERE {\n  ?item wdt:P31 wd:Q1032372;\n        wdt:P625 ?geo .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Map of hackerspaces",
      "description": "The query displays on a map (\"defaultView:Map\") all items whose value of  is  and with values for property .\n\n\nWarnings:\n* Items of class  without any value for  are not returned in the query.\n* Items which are instances of a subclass of  are not returned."
    },
    {
      "query_id": "wikidata-examples.Number of humans in Wikidata",
      "namespace": "wikidata-examples",
      "name": "Number of humans in Wikidata",
      "sparql": "\n#title: Number of humans in Wikidata\nSELECT (COUNT(*) AS ?count)\nWHERE {\n  ?item wdt:P31 wd:Q5 .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Number of humans in Wikidata",
      "description": "This query takes all items whose value of  is  and count the total number of items using COUNT function."
    },
    {
      "query_id": "wikidata-examples.Only truthy values",
      "namespace": "wikidata-examples",
      "name": "Only truthy values",
      "sparql": "\n#Demonstrates \"no value\" handling\n#title: Humans without children (only truthy values)\nSELECT ?human ?humanLabel\nWHERE\n{\n  ?human wdt:P31 wd:Q5 .       #find humans\n  ?human rdf:type wdno:P40 .   #with at least one truthy P40 (child) statement defined to be \"no value\"\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Only truthy values",
      "description": "In the simplest form (using only truthy<tvar name=\"ref\">https://www.mediawiki.org/wiki/Wikibase/Indexing/RDF_Dump_Format#Truthy_statements</tvar> values):"
    },
    {
      "query_id": "wikidata-examples.Including non-truthy values",
      "namespace": "wikidata-examples",
      "name": "Including non-truthy values",
      "sparql": "\n#title: Humans without children (including non-truthy values)\nSELECT ?human ?humanLabel\nWHERE\n{\n  ?human wdt:P31 wd:Q5 .         #find humans\n  ?human p:P40 ?childStatement . #with at least one P40 (child) statement\n  ?childStatement rdf:type wdno:P40 .   #where the P40 (child) statement is defined to be \"no value\"\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" . }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Including non-truthy values",
      "description": "A similar query which also considers non-truthy (for example, values with deprecated rank) \"no value\" statements:"
    },
    {
      "query_id": "wikidata-examples.Humans born in New York City",
      "namespace": "wikidata-examples",
      "name": "Humans born in New York City",
      "sparql": "\n#title: Humans born in New York City\nSELECT DISTINCT ?item ?itemLabel ?itemDescription ?sitelinks\nWHERE {\n    ?item wdt:P31 wd:Q5;            # Any instance of a human\n          wdt:P19/wdt:P131* wd:Q60; # Who was born in any value (eg. a hospital)\n# that has the property of 'administrative area of' New York City or New York City itself.\n\n# Note that using wdt:P19 wd:Q60;  # Who was born in New York City.\n# Doesn't include humans with the birth place listed as a hospital\n# or an administrative area or other location of New York City.\n\n          wikibase:sitelinks ?sitelinks.\n\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\nORDER BY DESC(?sitelinks)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Humans born in New York City",
      "description": "This example highlights the correct way to use the  property, and by extension the  property.\n is the most specific known place of birth. For example, it is known that Donald Trump () was born in the Jamaica Hospital () in New York City. Therefore, he wouldn't show up in direct query for humans born in New York City."
    },
    {
      "query_id": "wikidata-examples.Humans who died on a specific date on the English Wikipedia, ordered by label",
      "namespace": "wikidata-examples",
      "name": "Humans who died on a specific date on the English Wikipedia, ordered by label",
      "sparql": "\n\n# Humans who died on August 25 2001 according to the English Wikipedia\nSELECT ?item ?articlename ?itemLabel ?itemDescription ?sl\nWHERE {\n   VALUES ?dod {\"+2001-08-25\"^^xsd:dateTime}\n    ?dod ^wdt:P570 ?item .\n    ?item wikibase:sitelinks ?sl .\n    ?item ^schema:about ?article .\n    ?article schema:isPartOf <https://en.wikipedia.org/>;\n    schema:name ?articlename .\n  SERVICE wikibase:label\n    {\n      bd:serviceParam wikibase:language \"en\" .\n      ?item rdfs:label ?itemLabel .\n      ?item schema:description ?itemDescription .\n    }\n  BIND(REPLACE(?itemLabel, \"^.*(?<! [Vv][ao]n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Humans who died on a specific date on the English Wikipedia, ordered by label",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Items with a Wikispecies sitelink",
      "namespace": "wikidata-examples",
      "name": "Items with a Wikispecies sitelink",
      "sparql": "\n#illustrates sitelink selection, \";\" notation\n#title: Items with a Wikispecies sitelink\nSELECT ?item ?itemLabel ?article\nWITH {\n  SELECT *\n  WHERE {\n    ?article schema:about ?item ;\n      schema:isPartOf <https://species.wikimedia.org/> .\n  }\n  LIMIT 200\n} AS %i\nWHERE {\n  INCLUDE %i\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" . }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Items with a Wikispecies sitelink",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Items about authors with a Wikispecies page",
      "namespace": "wikidata-examples",
      "name": "Items about authors with a Wikispecies page",
      "sparql": "\n#title: Items about authors with a Wikispecies page\nSELECT ?author ?authorLabel ?count\nWITH {\n  SELECT ?author (COUNT(?paper) AS ?count)\n  WHERE {\n    ?article schema:about ?author ;\n      schema:isPartOf <https://species.wikimedia.org/> .\n    ?author wdt:P31 wd:Q5.\n    ?paper wdt:P50 ?author.\n  }\n  GROUP BY ?author\n  ORDER BY DESC(?count)\n  LIMIT 200\n} AS %i\nWHERE {\n  INCLUDE %i\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" . }\n}\nORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Items about authors with a Wikispecies page",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Recent events",
      "namespace": "wikidata-examples",
      "name": "Recent events",
      "sparql": "#title: Recent events\nSELECT ?event ?eventLabel ?date\nWITH {\n  SELECT DISTINCT ?event ?date\n  WHERE {\n    # find events\n    ?event wdt:P31/wdt:P279* wd:Q1190554.\n    # with a point in time or start date\n    OPTIONAL { ?event wdt:P585 ?date. }\n    OPTIONAL { ?event wdt:P580 ?date. }\n    # but at least one of those\n    FILTER(BOUND(?date) && DATATYPE(?date) = xsd:dateTime).\n    # not in the future, and not more than 31 days ago\n    BIND(NOW() - ?date AS ?distance).\n    FILTER(0 <= ?distance && ?distance < 31).\n  }\n  LIMIT 150\n} AS %i\nWHERE {\n  INCLUDE %i\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" . }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Recent events",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Popular eye colors among humans",
      "namespace": "wikidata-examples",
      "name": "Popular eye colors among humans",
      "sparql": "#title:Popular eye colors among humans\n#illustrates bubblechart view, count\n\n#defaultView:BubbleChart\nSELECT ?eyeColor ?eyeColorLabel ?rgb (COUNT(?human) AS ?count)\nWHERE\n{\n  ?human wdt:P31 wd:Q5.\n  ?human wdt:P1340 ?eyeColor.\n  OPTIONAL { ?eyeColor wdt:P465 ?rgb. }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nGROUP BY ?eyeColor ?eyeColorLabel ?rgb\nORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Popular eye colors among humans",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Humans whose gender we know we don't know",
      "namespace": "wikidata-examples",
      "name": "Humans whose gender we know we don't know",
      "sparql": "#title: Humans whose gender we know we don't know\n# Demonstrates filtering for \"unknown value\"\nSELECT ?human ?humanLabel\nWHERE\n{\n  ?human wdt:P21 ?gender .\n  FILTER wikibase:isSomeValue(?gender)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Humans whose gender we know we don't know",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.URLs of Wikipedia in all languages",
      "namespace": "wikidata-examples",
      "name": "URLs of Wikipedia in all languages",
      "sparql": "#title: URLs of Wikipedia in all languages\nSELECT ?wikipedia WHERE {\n  ?wikipedia wikibase:wikiGroup \"wikipedia\".\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "URLs of Wikipedia in all languages",
      "description": "This query provides an alternative to scraping the Wikipedia.org portal page and various lists/tables of Wikipedias that are out there. (The [[<tvar name=1>mw:Special:MyLanguage/API:sitematrix</tvar>|sitematrix API]] is another alternative.)"
    },
    {
      "query_id": "wikidata-examples.Names of Wikipedia articles in multiple languages",
      "namespace": "wikidata-examples",
      "name": "Names of Wikipedia articles in multiple languages",
      "sparql": "SELECT DISTINCT ?lang ?name WHERE {\n  ?article schema:about wd:Q5 . hint:Prior hint:runFirst true.\n  ?article schema:inLanguage ?lang ;\n    schema:name ?name ;\n    schema:isPartOf [ wikibase:wikiGroup \"wikipedia\" ] .\n  FILTER(?lang in ('en', 'uz', 'ru', 'ko')) .\n  FILTER (!CONTAINS(?name, ':')) .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Names of Wikipedia articles in multiple languages",
      "description": "The query retrieves Wikipedia article names (in the main namespace) in various languages for the given Q identity. Labels are returned instead of real article names."
    },
    {
      "query_id": "wikidata-examples.All items with a property",
      "namespace": "wikidata-examples",
      "name": "All items with a property",
      "sparql": "# Sample to query all values of a property\n# Property talk pages on Wikidata include basic queries adapted to each property\nSELECT\n  ?item ?itemLabel\n  ?value ?valueLabel\n# valueLabel is only useful for properties with item-datatype\nWHERE\n{\n  ?item wdt:P1800 ?value\n  # change P1800 to another property\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n# remove or change limit for more results\nLIMIT 10\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All items with a property",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.All statements of an item containing another item (direct / first-degree connections)",
      "namespace": "wikidata-examples",
      "name": "All statements of an item containing another item (direct / first-degree connections)",
      "sparql": "#defaultView:Graph\n#TEMPLATE={ \"template\": { \"en\": \"All statements of ?item containing another item\" }, \"variables\": { \"?item\": {} } }\nSELECT ?item ?itemLabel ?itemImage ?value ?valueLabel ?valueImage ?edgeLabel WHERE {\n  BIND(wd:Q12345 AS ?item)\n  ?item ?wdt ?value.\n  ?edge a wikibase:Property;\n        wikibase:propertyType wikibase:WikibaseItem; # note: to show all statements, removing this is not enough, the graph view only shows entities\n        wikibase:directClaim ?wdt.\n  OPTIONAL { ?item wdt:P18 ?itemImage. }\n  OPTIONAL { ?value wdt:P18 ?valueImage. }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All statements of an item containing another item (direct / first-degree connections)",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Wikidata items of Wikipedia articles",
      "namespace": "wikidata-examples",
      "name": "Wikidata items of Wikipedia articles",
      "sparql": "#Returns a list of Wikidata items for a given list of Wikipedia article names\n#List of Wikipedia article names (lemma) is like \"WIKIPEDIA ARTICLE NAME\"@LANGUAGE CODE with de for German, en for English, etc.\n#Language version and project is defined in schema:isPartOF with de.wikipedia.org for German Wikipedia, es.wikivoyage for Spanish Wikivoyage, etc.\n\nSELECT ?lemma ?item WHERE {\n  VALUES ?lemma {\n    \"Wikipedia\"@de\n    \"Wikidata\"@de\n    \"Berlin\"@de\n    \"Technische Universit\u00e4t Berlin\"@de\n  }\n  ?sitelink schema:about ?item;\n    schema:isPartOf <https://de.wikipedia.org/>;\n    schema:name ?lemma.\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Wikidata items of Wikipedia articles",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Total population in the \u00d8resund Region",
      "namespace": "wikidata-examples",
      "name": "Total population in the \u00d8resund Region",
      "sparql": "\n#title: Total population in the \u00d8resund Region\n# Illustrates the SUM aggregate function\n\nSELECT DISTINCT ?area ?areaLabel (sum(?folkm_ngd) as ?total_folkm) # the first two variables can be removed\n                                                                   # if only the number is needed\nWHERE {\n  ?item wdt:P361 wd:Q297853. # part of (P361) \u00d8resund Region (Q297853)\n  ?item wdt:P1082 ?folkm_ngd. # population (P1082)\n  ?area wdt:P31 wd:Q1907114. # instance of (P31) metropolitan area (Q1907114)\n  ?area wdt:P527 ?item. # has part (P527)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nGROUP BY ?area ?areaLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Total population in the \u00d8resund Region",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Mayors that are any kind of domesticated animal",
      "namespace": "wikidata-examples",
      "name": "Mayors that are any kind of domesticated animal",
      "sparql": "#title: Mayors that are any kind of domesticated animal\nSELECT ?image ?speciesLabel ?mayorLabel ?placeLabel WHERE {\n  ?species wdt:P279* wd:Q622852 .\n  ?mayor wdt:P31 ?species .\n\n  ?mayor p:P39 ?node .\n  ?node ps:P39 wd:Q30185 .\n  ?node pq:P642 ?place .\n  OPTIONAL {?mayor wdt:P18 ?image}\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Mayors that are any kind of domesticated animal",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Mayors that are either a dog, a cat or a chicken",
      "namespace": "wikidata-examples",
      "name": "Mayors that are either a dog, a cat or a chicken",
      "sparql": "\nSELECT ?image ?speciesLabel ?mayorLabel ?placeLabel WHERE {\n  VALUES ?species {wd:Q144 wd:Q146 wd:Q780}\n  ?mayor wdt:P31 ?species .\n  ?mayor p:P39 ?node .\n  ?node ps:P39 wd:Q30185 .\n  ?node pq:P642 ?place .\n  OPTIONAL {?mayor wdt:P18 ?image}\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Mayors that are either a dog, a cat or a chicken",
      "description": "Illustrates the VALUES clause."
    },
    {
      "query_id": "wikidata-examples.Items in the Messier Catalog, with image",
      "namespace": "wikidata-examples",
      "name": "Items in the Messier Catalog, with image",
      "sparql": "\n#defaultView:ImageGrid\n# Items in the Messier Catalog\nSELECT DISTINCT ?item ?itemLabel ?numero (SAMPLE(?image) AS ?image)\nWHERE {\n  ?item p:P528 ?catalogStatement .\n  ?catalogStatement ps:P528 ?numero .\n  ?catalogStatement pq:P972 wd:Q14530 .\n  OPTIONAL {?item wdt:P18 ?image . }\n\n\tSERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nGROUP BY ?item ?itemLabel ?numero \nORDER BY ?numero\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Items in the Messier Catalog, with image",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Brightest stars, with image",
      "namespace": "wikidata-examples",
      "name": "Brightest stars, with image",
      "sparql": "\n#defaultView:ImageGrid\n# Brightest celestial bodies\nSELECT ?star ?starLabel ?images ?apparent_magnitude\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  { SELECT  ?star ?apparent_magnitude ?images\n    WHERE {   \n      ?star wdt:P31 wd:Q523;\n            wdt:P1215 ?apparent_magnitude;\n            wdt:P18 ?images .\n      FILTER(?apparent_magnitude < 1)\n    } LIMIT 10 \n  }\n} ORDER BY (?apparent_magnitude)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Brightest stars, with image",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Senses on Swedish phrase lexemes with a synonym",
      "namespace": "wikidata-examples",
      "name": "Senses on Swedish phrase lexemes with a synonym",
      "sparql": "\n#title: Senses on Swedish phrase lexemes with a synonym\n#date: 2024-04-25\n#author: So9q\n#note: Thanks to Nikki and Ainali for help with selecting the synonym lexeme \nSELECT ?l ?sense ?lemma ?synonym ?synonym_lemma WHERE {\n  ?l   ontolex:sense ?sense ; # the sense\n       dct:language wd:Q9027 ; # the language\n       wikibase:lemma ?lemma ; # and the lemma\n       wikibase:lexicalCategory ?category.\n  ?category wdt:P279/wdt:P31* wd:Q187931. # subclass of phrase\n  ?sense wdt:P5973 ?synonym_sense .\n  ?synonym ontolex:sense ?synonym_sense . # select synonym lexeme\n  ?synonym wikibase:lemma ?synonym_lemma . # get the synonym lemma\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Senses on Swedish phrase lexemes with a synonym",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Senses on English lexemes with an offensive or profanity style statement",
      "namespace": "wikidata-examples",
      "name": "Senses on English lexemes with an offensive or profanity style statement",
      "sparql": "\n#title: Senses on English lexemes with an offensive or profanity style statement\n#date: 2024-01-25\n#author: So9q\nSELECT ?l ?sense ?lemma ?swearLabel WHERE {\n  ?l ontolex:sense ?sense ; # the sense\n     dct:language wd:Q1860 ; # the language\n     wikibase:lemma ?lemma . # and the lemma\n  VALUES ?swear {\n    wd:Q184439\n    wd:Q545779\n  }\n  ?sense wdt:P6191 ?swear .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" . }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Senses on English lexemes with an offensive or profanity style statement",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Swedish lexemes missing in SAOB",
      "namespace": "wikidata-examples",
      "name": "Swedish lexemes missing in SAOB",
      "sparql": "\n#title:Swedish lexemes that are missing in the biggest official printed Swedish dictionary SAOB.\n#date: 2021-10-12\n#author:So9q\nSELECT ?lemma\nWHERE {\n  ?lexemeId dct:language wd:Q9027;\n            wikibase:lemma ?lemma;\n            wdt:P9660 wd:Q1935308.\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Swedish lexemes missing in SAOB",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Forms in Swedish that have no example demonstrating them",
      "namespace": "wikidata-examples",
      "name": "Forms in Swedish that have no example demonstrating them",
      "sparql": "\n#title:Forms in Swedish that have no example demonstrating them\n# 2021-08-06\nSELECT ?form ?lemma\nWHERE {\n  ?lexemeId dct:language wd:Q9027;\n            wikibase:lemma ?lemma;\n            ontolex:lexicalForm ?form.\n  MINUS {\n  ?lexemeId p:P5831 ?statement.\n  ?statement ps:P5831 ?example;\n             pq:P6072 [];\n             pq:P5830 ?form_with_example.\n  }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Forms in Swedish that have no example demonstrating them",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Get the lemma for an inflected word in English",
      "namespace": "wikidata-examples",
      "name": "Get the lemma for an inflected word in English",
      "sparql": "\n#title: Get the lemma for an inflected word in English\n# Author: So9q\n# 2021-07-25\n# inspired by https://sinaahmadi.github.io/posts/10-essential-sparql-queries-for-lexicographical-data-on-wikidata.html\nSELECT DISTINCT ?l ?word ?lemma WHERE {\n  VALUES ?word { \"bought\"@en }\n  ?l dct:language wd:Q1860 ;\n     wikibase:lemma ?lemma ;\n     ontolex:lexicalForm ?form .\n  ?form ontolex:representation ?word .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Get the lemma for an inflected word in English",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.The Swedish alphabet",
      "namespace": "wikidata-examples",
      "name": "The Swedish alphabet",
      "sparql": "\n#title:The Swedish alphabet\n# Author: So9q\n# 2021-07-22\nSELECT ?lexemeId ?lemma WHERE {\n  ?lexemeId dct:language wd:Q9027;\n            wikibase:lemma ?lemma.\n  ?lexemeId wikibase:lexicalCategory wd:Q9788\n}\nORDER BY ?lemma\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "The Swedish alphabet",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Danish phrases",
      "namespace": "wikidata-examples",
      "name": "Danish phrases",
      "sparql": "\n# title:Danish phrases\n# Author: So9q\n# Date: 2024-01-03\nSELECT ?l ?lemma WHERE {\n  ?l dct:language wd:Q9035; # Change language here\n     wikibase:lemma ?lemma;\n     wikibase:lexicalCategory ?cat.\n  ?cat wdt:P279 wd:Q187931.\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Danish phrases",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.All forms in Swedish missing a pronunciation for the form with a representation identical to the lemma of the lexeme",
      "namespace": "wikidata-examples",
      "name": "All forms in Swedish missing a pronunciation for the form with a representation identical to the lemma of the lexeme",
      "sparql": "\n#title:All forms in Swedish missing a pronunciation for the form with a representation identical to the lemma of the lexeme\n# So9q 13-01-2021\nSELECT ?l ?lemma ?form ?audio WHERE {\n  ?l dct:language wd:Q9027;\n     wikibase:lemma ?lemma;\n     ontolex:lexicalForm ?form .\n  ?form ontolex:representation ?lemma .\n  MINUS {?form wdt:P443 ?audio.}\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All forms in Swedish missing a pronunciation for the form with a representation identical to the lemma of the lexeme",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Lexemes in English that match an expression",
      "namespace": "wikidata-examples",
      "name": "Lexemes in English that match an expression",
      "sparql": "\n# Lexemes in English that match an expression\nSELECT ?lexemeId ?lemma WHERE {\n  ?lexemeId dct:language wd:Q1860;\n            wikibase:lemma ?lemma.\n  # only those lemmas that begin with \"pota\", i.e. \"potato\"\n  FILTER (regex(?lemma, '^pota.*'))\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Lexemes in English that match an expression",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Lexemes in Swedish with usage example that demonstrates both a form and a sense",
      "namespace": "wikidata-examples",
      "name": "Lexemes in Swedish with usage example that demonstrates both a form and a sense",
      "sparql": "\n#title: Lexemes in Swedish with usage example that demonstrates both a form and a sense\n# So9q 23-12-2020\nSELECT ?lexemeId ?lemma ?example WHERE {\n  ?lexemeId dct:language wd:Q9027;\n            wikibase:lemma ?lemma.\n  ?lexemeId p:P5831 ?statement.\n  ?statement ps:P5831 ?example;\n             pq:P6072 [];\n             pq:P5830 [].\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Lexemes in Swedish with usage example that demonstrates both a form and a sense",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Pictures of noun lexemes in English (picture dictionary \u00e0 la Wikidata)",
      "namespace": "wikidata-examples",
      "name": "Pictures of noun lexemes in English (picture dictionary \u00e0 la Wikidata)",
      "sparql": "\n# Lexemes in English with picture and description fetched from the concept Q-item\n# NB: when 2 or more pictures occur for the same lemma a preferred rank is missing on the Q-item.\n# Please fix that if you know how.\n# by So9q\n#defaultView:ImageGrid\nSELECT DISTINCT ?lexemeId ?lemma ?q_concept ?q_conceptDescription ?picture\nWHERE {\n  ?lexemeId dct:language wd:Q1860;\n            wikibase:lemma ?lemma;\n            ontolex:sense ?sense.\n  ?sense wdt:P5137 ?q_concept.\n  ?q_concept wdt:P18 ?picture.\n  # if you wish to only browse certain items you can insert a FILTER\n  # regular expression here, like in the example above.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY lcase(?lemma) # order a-z\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Pictures of noun lexemes in English (picture dictionary \u00e0 la Wikidata)",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.German picture dictionary for young children",
      "namespace": "wikidata-examples",
      "name": "German picture dictionary for young children",
      "sparql": "\n# German picture dictionary for young children\n# NB: when 2 or more pictures occur for the same lemma a preferred rank is missing on the Q-item.\n# Please fix that if you know how.\n# If any inapproriate terms show up it is probably because the sense is missing a correct P5137\n# by So9q\n#defaultView:ImageGrid\nSELECT DISTINCT ?lexemeId ?lemma ?q_concept ?q_conceptDescription ?picture\nWHERE {\n  ?lexemeId dct:language wd:Q188; # change language here\n            wikibase:lemma ?lemma;\n            ontolex:sense ?sense.\n  ?sense wdt:P5137 ?q_concept.\n  ?q_concept wdt:P18 ?picture.\n  ############\n  # Exclusions\n  ############\n  # Exclude out of scope concepts\n  MINUS {?q_concept wdt:P31 wd:Q3624078.}. # countries\n\n  # Exclude non suitable concepts\n  VALUES ?minus {\n  wd:Q47092 # rape\n  wd:Q198   # war\n  wd:Q124490 # violence\n  wd:Q170382 # revolver\n  wd:Q1576   #cigar\n  #... add yours here\n  }.\n  MINUS {?sense wdt:P5137 ?minus.}.\n\n  # Exclude senses not suitable for young children:\n  VALUES ?filter {\n  wd:Q8102\n  wd:Q545779\n  wd:Q1521634\n  wd:Q184439}.\n  FILTER NOT EXISTS {?sense wdt:P6191 ?filter.}.\n  # if you wish to only browse certain items you can insert a FILTER\n  # regular expression here, like in the example above.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de,en\". }\n}\nORDER BY lcase(?lemma) # order a-z\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "German picture dictionary for young children",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Lexeme languages by number of usage examples",
      "namespace": "wikidata-examples",
      "name": "Lexeme languages by number of usage examples",
      "sparql": "\n#title: Lexeme languages by number of usage examples\n# by Vesihiisi\n# improved by So9q 23-20-2020 to only show those with both a form and a sense,\n# because that's what we really want\n\n#defaultView:BubbleChart\nSELECT ?languageLabel (COUNT(?example) AS ?count) WHERE {\n  ?l dct:language ?language;\n     p:P5831 ?statement.\n  ?statement ps:P5831 ?example;\n             pq:P6072 [];\n             pq:P5830 [].\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nGROUP BY ?languageLabel\nORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Lexeme languages by number of usage examples",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Lexemes describing a color",
      "namespace": "wikidata-examples",
      "name": "Lexemes describing a color",
      "sparql": "\n#title: Lexemes describing a color\n# By Vesihiisi\n\nSELECT ?l ?lemma ?languageLabel WHERE {\n  ?l dct:language ?language;\n     wikibase:lemma ?lemma;\n     wdt:P31 wd:Q376431.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY ?languageLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Lexemes describing a color",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Lexemes that means water ordered by language",
      "namespace": "wikidata-examples",
      "name": "Lexemes that means water ordered by language",
      "sparql": "\n# By So9q\n# Lexemes that means (liquid) water\nSELECT ?l ?sense ?lemma ?languageLabel WHERE {\n  ?l a ontolex:LexicalEntry ; # get from the special LexicalEntry\n       ontolex:sense ?sense ; # the sense\n       dct:language ?language ; # the language\n       wikibase:lemma ?lemma. # and the lemma\n  ?sense wdt:P5137 wd:Q29053744 .\n                   # change Q29053744 to anything you want\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n# Lower case before order\nORDER BY (LCASE(?languageLabel))\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Lexemes that means water ordered by language",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.The 100 most translated concepts in the Lexeme namespace",
      "namespace": "wikidata-examples",
      "name": "The 100 most translated concepts in the Lexeme namespace",
      "sparql": "\n# by So9q, 2019-11-21\n#defaultView:BubbleChart\nSELECT ?meaning ?meaningLabel ?count\nWITH {\n  SELECT ?meaning (count(?l) as ?count)\n  WHERE {\n    ?l a ontolex:LexicalEntry ;\n      ontolex:sense ?sense.\n    ?sense wdt:P5137 ?meaning.\n  }\n  GROUP BY ?meaning\n  ORDER BY desc(?count)\n  LIMIT 100\n} AS %i\nWHERE {\n  INCLUDE %i\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" . }\n}\nORDER BY desc(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "The 100 most translated concepts in the Lexeme namespace",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Demonyms on map",
      "namespace": "wikidata-examples",
      "name": "Demonyms on map",
      "sparql": "\n# Words describing people from a certain place\n# e.g. swede\n# by Vesihiisi\n#defaultView:Map\nSELECT ?l ?lemma ?demoPlaceLabel ?coords WHERE {\n  ?l a ontolex:LexicalEntry ;\n       dct:language ?language ;\n       wikibase:lemma ?lemma .\n  ?language wdt:P218 'sv'. # language\n  ?l ontolex:sense ?sense.\n     ?sense wdt:P6271 ?demoPlace.\n  ?demoPlace wdt:P625 ?coords\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Demonyms on map",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Forms in Hebrew that are both feminine and masculine",
      "namespace": "wikidata-examples",
      "name": "Forms in Hebrew that are both feminine and masculine",
      "sparql": "\n#title: Forms of nouns in Hebrew that are both feminine and masculine\n# by Uziel302\nSELECT ?lexemeId ?lemma ?form ?word WHERE {\n  ?lexemeId dct:language wd:Q9288;\n            wikibase:lexicalCategory wd:Q1084;\n            wikibase:lemma ?lemma;\n            ontolex:lexicalForm ?form.\n  ?form wikibase:grammaticalFeature wd:Q499327, wd:Q1775415;\n        ontolex:representation ?word.\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Forms in Hebrew that are both feminine and masculine",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Lexemes by number of statements",
      "namespace": "wikidata-examples",
      "name": "Lexemes by number of statements",
      "sparql": "\n#title:Lexemes by number of statements\nSELECT * {\n  ?l dct:language [];\n     wikibase:statements ?c.\n}\nORDER BY desc(?c) LIMIT 50\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Lexemes by number of statements",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Standard Mandarin Lexeme Forms missing Pinyin Transliteration",
      "namespace": "wikidata-examples",
      "name": "Standard Mandarin Lexeme Forms missing Pinyin Transliteration",
      "sparql": "\n#title:Standard Mandarin Lexeme Forms missing Pinyin Transliteration\n#author:0xDeadbeef 2022-07-31\nSELECT ?lexemeId ?lemma ?form ?word WHERE {\n  ?lexemeId dct:language wd:Q727694;\n    wikibase:lemma ?lemma;\n    ontolex:lexicalForm ?form.\n  ?form ontolex:representation ?word.\n  FILTER(NOT EXISTS { ?form wdt:P1721 ?o. })\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Standard Mandarin Lexeme Forms missing Pinyin Transliteration",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Properties grouped by their parent property",
      "namespace": "wikidata-examples",
      "name": "Properties grouped by their parent property",
      "sparql": "#Properties grouped by their parent property\n#TODO: should display links and numeric ids\n#defaultView:Tree\nSELECT ?property2 ?property2Label ?property1 ?property1Label WHERE {\n  ?property1 rdf:type wikibase:Property. #not replaceable with wikibase:Item, wikibase:Statement, wikibase:Reference at WDQS\n                                         #https://www.mediawiki.org/wiki/Wikibase/Indexing/RDF_Dump_Format#WDQS_data_differences\n  ?property1 wdt:P1647 ?property2.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Properties grouped by their parent property",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Subproperties of <tvar name=p276>{{Property|P276}}</tvar>",
      "namespace": "wikidata-examples",
      "name": "Subproperties of <tvar name=p276>{{Property|P276}}</tvar>",
      "sparql": "#Subproperties of location (P276)\nSELECT DISTINCT ?subProperties ?subPropertiesLabel WHERE {\n  ?subProperties wdt:P1647* wd:P276.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Subproperties of <tvar name=p276>{{Property|P276}}</tvar>",
      "description": "====  Subproperties of <tvar name=p276></tvar> ===="
    },
    {
      "query_id": "wikidata-examples.Properties grouped by their <tvar name=\"qWikibaseDatatype\">{{Q|Q19798645}}</tvar> with number of properties",
      "namespace": "wikidata-examples",
      "name": "Properties grouped by their <tvar name=\"qWikibaseDatatype\">{{Q|Q19798645}}</tvar> with number of properties",
      "sparql": "#Properties grouped by their type with number of properties\nSELECT (COUNT(?property) as ?pcount ) ?wbtype WHERE {\n  ?property rdf:type wikibase:Property.\n  ?property wikibase:propertyType ?wbtype.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nGROUP BY ?wbtype\nORDER BY DESC(?pcount)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Properties grouped by their <tvar name=\"qWikibaseDatatype\">{{Q|Q19798645}}</tvar> with number of properties",
      "description": "====  Properties grouped by their <tvar name=\"qWikibaseDatatype\"></tvar> with number of properties ===="
    },
    {
      "query_id": "wikidata-examples.properties used to link to instances of <tvar name=\"qTechnicalStandard\">{{Q|317623}}</tvar>",
      "namespace": "wikidata-examples",
      "name": "properties used to link to instances of <tvar name=\"qTechnicalStandard\">{{Q|317623}}</tvar>",
      "sparql": "#properties used to link to instances of technical standard\nSELECT DISTINCT ?propertyRel ?propertyItem ?propertyItemLabel WHERE\n{\n   ?item ?propertyRel ?standard.\n   ?standard wdt:P31 wd:Q317623.\n   ?propertyItem wikibase:directClaim ?propertyRel\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "properties used to link to instances of <tvar name=\"qTechnicalStandard\">{{Q|317623}}</tvar>",
      "description": "====  properties used to link to instances of <tvar name=\"qTechnicalStandard\"></tvar> ===="
    },
    {
      "query_id": "wikidata-examples.All properties with descriptions and aliases and types",
      "namespace": "wikidata-examples",
      "name": "All properties with descriptions and aliases and types",
      "sparql": "SELECT ?property ?propertyType ?propertyLabel ?propertyDescription ?propertyAltLabel WHERE {\n  ?property wikibase:propertyType ?propertyType .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY ASC(xsd:integer(STRAFTER(STR(?property), 'P')))\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All properties with descriptions and aliases and types",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Properties connecting items of type <tvar name=\"qZoo\">{{Q|43501}}</tvar> with items of type <tvar name=\"qAnimal\">{{Q|729}}</tvar>",
      "namespace": "wikidata-examples",
      "name": "Properties connecting items of type <tvar name=\"qZoo\">{{Q|43501}}</tvar> with items of type <tvar name=\"qAnimal\">{{Q|729}}</tvar>",
      "sparql": "SELECT ?p ?pLabel (count (*) as ?count) {\n  ?s ?pd ?o .\n  ?p wikibase:directClaim ?pd .\n  ?s wdt:P31/wdt:P279* wd:Q729 .\n  ?o wdt:P31/wdt:P279* wd:Q43501 .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} GROUP BY ?p ?pLabel ORDER BY desc(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Properties connecting items of type <tvar name=\"qZoo\">{{Q|43501}}</tvar> with items of type <tvar name=\"qAnimal\">{{Q|729}}</tvar>",
      "description": "====  Properties connecting items of type <tvar name=\"qZoo\"></tvar> with items of type <tvar name=\"qAnimal\"></tvar> ===="
    },
    {
      "query_id": "wikidata-examples.References",
      "namespace": "wikidata-examples",
      "name": "References",
      "sparql": "\n# See also the SPARQL manual\n# https://en.wikibooks.org/wiki/SPARQL/WIKIDATA_Qualifiers,_References_and_Ranks\n# In this example we look for statements which assign a specific value (Q51955019)\n# to the property P1343 and then look for references of that property, specifically\n# the string associated to P958 for the reference. May actually bring up references\n# for other P1343 statements; uses the shortened expression syntax with brackets.\nSELECT ?item ?reference\nWHERE {\n  ?item wdt:P1343 wd:Q51955019 .\n  ?item p:P1343 [ prov:wasDerivedFrom [ pr:P958 ?reference ] ] .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "References",
      "description": "=== References===\n==== Content of a reference for a specific statement===="
    },
    {
      "query_id": "wikidata-examples.Content of a reference for a specific statement",
      "namespace": "wikidata-examples",
      "name": "Content of a reference for a specific statement",
      "sparql": "\n# See also the SPARQL manual\n# https://en.wikibooks.org/wiki/SPARQL/WIKIDATA_Qualifiers,_References_and_Ranks\n# In this example we look for statements which assign a specific value (Q51955019)\n# to the property P1343 and then look for references of that property, specifically\n# the string associated to P958 for the reference. May actually bring up references\n# for other P1343 statements; uses the shortened expression syntax with brackets.\nSELECT ?item ?reference\nWHERE {\n  ?item wdt:P1343 wd:Q51955019 .\n  ?item p:P1343 [ prov:wasDerivedFrom [ pr:P958 ?reference ] ] .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Content of a reference for a specific statement",
      "description": "==== Content of a reference for a specific statement===="
    },
    {
      "query_id": "wikidata-examples.Subclasses",
      "namespace": "wikidata-examples",
      "name": "Subclasses",
      "sparql": "\n# This gives a list of classes whose super-classes include both \"physical entity\" and \"non-physical entity\".\n# One of these is, presumably, in error.\n# Due to timeouts, it is necessary to explicitly limit the depth.\nSELECT DISTINCT ?item ?itemLabel WHERE {\n  {\n    SELECT ?item WHERE { ?item (wdt:P279/wdt:P279/(wdt:P279?)/(wdt:P279?)/(wdt:P279?)) wd:Q7048977, wd:Q112276019. }\n    LIMIT 300\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en,es,fr,de\". }\n}\nORDER BY (?itemLabel)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Subclasses",
      "description": "=== Subclasses===\n==== Some classes with both physical and non-physical super-classes===="
    },
    {
      "query_id": "wikidata-examples.Some classes with both physical and non-physical super-classes",
      "namespace": "wikidata-examples",
      "name": "Some classes with both physical and non-physical super-classes",
      "sparql": "\n# This gives a list of classes whose super-classes include both \"physical entity\" and \"non-physical entity\".\n# One of these is, presumably, in error.\n# Due to timeouts, it is necessary to explicitly limit the depth.\nSELECT DISTINCT ?item ?itemLabel WHERE {\n  {\n    SELECT ?item WHERE { ?item (wdt:P279/wdt:P279/(wdt:P279?)/(wdt:P279?)/(wdt:P279?)) wd:Q7048977, wd:Q112276019. }\n    LIMIT 300\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en,es,fr,de\". }\n}\nORDER BY (?itemLabel)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Some classes with both physical and non-physical super-classes",
      "description": "==== Some classes with both physical and non-physical super-classes===="
    },
    {
      "query_id": "wikidata-examples.Countries that have sitelinks to en.wiki",
      "namespace": "wikidata-examples",
      "name": "Countries that have sitelinks to en.wiki",
      "sparql": "SELECT ?country ?countryLabel ?article WHERE {\n\n    ?country wdt:P31 wd:Q3624078 . # sovereign state\n    ?article schema:about ?country .\n    ?article schema:isPartOf <https://en.wikipedia.org/>.\n\n    SERVICE wikibase:label {\n       bd:serviceParam wikibase:language \"en\"\n    }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Countries that have sitelinks to en.wiki",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Canadian subjects with no English article in Wikipedia",
      "namespace": "wikidata-examples",
      "name": "Canadian subjects with no English article in Wikipedia",
      "sparql": "#added before 2019-02\n\nSELECT ?item ?itemLabel ?cnt WHERE {\n{\n  SELECT ?item (COUNT(?sitelink) AS ?cnt) WHERE {\n  ?item wdt:P27",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Canadian subjects with no English article in Wikipedia",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Countries that have a Featured Article on Russian Wikipedia",
      "namespace": "wikidata-examples",
      "name": "Countries that have a Featured Article on Russian Wikipedia",
      "sparql": "SELECT ?sitelink ?itemLabel WHERE {\n  ?item wdt:P31 wd:Q6256.\n  ?sitelink schema:isPartOf <https://ru.wikipedia.org/>;\n     schema:about ?item;\n     wikibase:badge wd:Q17437796 . # Sitelink is badged as a Featured Article\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" } .\n} ORDER BY ?itemLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Countries that have a Featured Article on Russian Wikipedia",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Numbers of Wikipedia sitelinks for items with {{P|1367}} for each language",
      "namespace": "wikidata-examples",
      "name": "Numbers of Wikipedia sitelinks for items with {{P|1367}} for each language",
      "sparql": "SELECT ?lang (COUNT(DISTINCT ?article) AS ?count) WHERE {\n  hint:Query hint:optimizer \"None\".\n  ?item wdt:P1367 ?yp_id .\n  ?article schema:about ?item . # find articles about things with an Art UK artist identifier\n  ?article schema:isPartOf / wikibase:wikiGroup \"wikipedia\" . # only Wikipedia articles\n  hint:Prior hint:gearing \"forward\" .\n  # This hint says to search the property chain above from left to right (\"forward\"),\n  # i.e. it is checked if each previously found value for ?article is linked to a Wikipedia.\n  # The default (\"reverse\") would be to search it from right to left, i.e. find all Wikipedia\n  # articles first, and then select the intersection with the previously found values of ?article.\n  ?article schema:inLanguage ?lang .\n} GROUP BY ?lang\nORDER BY DESC (?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Numbers of Wikipedia sitelinks for items with {{P|1367}} for each language",
      "description": "===  Numbers of Wikipedia sitelinks for items with  for each language ==="
    },
    {
      "query_id": "wikidata-examples.Titles of articles about Ukrainian villages on Romanian Wikipedia",
      "namespace": "wikidata-examples",
      "name": "Titles of articles about Ukrainian villages on Romanian Wikipedia",
      "sparql": "#Show titles of articles about Ukrainian villages on Romanian Wikipedia, plus English and Ukrainian labels in Wikidata items\n#added in 2017-05\nSELECT DISTINCT ?item ?LabelEN ?LabelUK ?page_titleRO WHERE {\n  # item: is a - village\n  ?item wdt:P31 wd:Q532 .\n  # item: country - Ukraine\n  ?item wdt:P17 wd:Q212 .\n  # exists article in item that is ro.wiki\n  ?article schema:about ?item ; schema:isPartOf <https://ro.wikipedia.org/> ; schema:name ?page_titleRO .\n  # wd labels\n  ?item rdfs:label ?LabelEN FILTER (lang(?LabelEN) = \"en\") .\n  ?item rdfs:label ?LabelUK FILTER (lang(?LabelUK) = \"uk\") .\n}\nLIMIT 300\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Titles of articles about Ukrainian villages on Romanian Wikipedia",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Wikisource pages for authors of scientific articles",
      "namespace": "wikidata-examples",
      "name": "Wikisource pages for authors of scientific articles",
      "sparql": "#Wikisource pages for authors of scientific articles, ordered by Wikisource language\n#added in 2017-09\nSELECT DISTINCT ?item ?wikisourceSitelink ?wikisourceLanguage WHERE {\n  ?wikisourceSitelink schema:isPartOf [ wikibase:wikiGroup \"wikisource\" ];\n                      schema:inLanguage ?wikisourceLanguage;\n                      schema:about ?item.\n  ?paper wdt:P31 wd:Q13442814;\n         wdt:P50 ?item.\n}\nORDER BY ?wikisourceLanguage\nLIMIT 300\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Wikisource pages for authors of scientific articles",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Items with a GTAA id and their articles on the Dutch and English Wikipedia",
      "namespace": "wikidata-examples",
      "name": "Items with a GTAA id and their articles on the Dutch and English Wikipedia",
      "sparql": "SELECT ?item ?itemLabel ?gtaa ?_articleEN ?_articleNL where {\n  ?item wdt:P1741 ?gtaa. # GTAA id\n  OPTIONAL {\n    ?_articleEN schema:about ?item.\n    ?_articleNL schema:about ?item.\n    ?_articleEN schema:isPartOf <https://en.wikipedia.org/>.\n    ?_articleNL schema:isPartOf <https://nl.wikipedia.org/>.\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en,nl\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Items with a GTAA id and their articles on the Dutch and English Wikipedia",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.People deceased in 2018 ordered by the number of sitelinks",
      "namespace": "wikidata-examples",
      "name": "People deceased in 2018 ordered by the number of sitelinks",
      "sparql": "\nSELECT ?person ?personLabel ?died ?sitelinks\nWITH {\n  SELECT *\n  WHERE {\n    ?person wdt:P31 wd:Q5;\n      wdt:P570 ?died.\n    FILTER (?died >= \"2018-01-01T00:00:00Z\"^^xsd:dateTime && ?died < \"2019-01-01T00:00:00Z\"^^xsd:dateTime)\n    ?person wikibase:sitelinks ?sitelinks.\n  }\n  ORDER BY desc(?sitelinks)\n  LIMIT 100\n} AS %i\nWHERE {\n  INCLUDE %i\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" . }\n}\nORDER BY desc(?sitelinks)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "People deceased in 2018 ordered by the number of sitelinks",
      "description": "=== People deceased in 2018 ordered by the number of sitelinks==="
    },
    {
      "query_id": "wikidata-examples.List of small monuments and other similar sites with link to Commons category (sitelink or P373)",
      "namespace": "wikidata-examples",
      "name": "List of small monuments and other similar sites with link to Commons category (sitelink or P373)",
      "sparql": "SELECT ?item ?comm ?p373 ?cat WHERE {\n  ?item wdt:P131* wd:Q894107. # ... municipality ...\n\n  OPTIONAL {?comm schema:about ?item ; schema:isPartOf <https://commons.wikimedia.org/> .}\n  BIND(replace(wikibase:decodeUri(SUBSTR(STR(?comm), 45)),\"_\",\" \") AS ?comm_decode)\n   OPTIONAL {?item wdt:P373 ?p373 .}\n\n bind(COALESCE(?comm_decode, ?p373) as ?cat) .\n VALUES ?trida { wd:Q1746392 wd:Q108325 wd:Q4989906 wd:Q10861631 wd:Q15077340 wd:Q1516537 wd:Q47008262} # chapel, small monument, memorial, belltower, memorial monument, technical monument, group of small monuments\n ?item wdt:P31/wdt:P279* ?trida. # small monument\n  }\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of small monuments and other similar sites with link to Commons category (sitelink or P373)",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Most famous child of a librarian",
      "namespace": "wikidata-examples",
      "name": "Most famous child of a librarian",
      "sparql": "#Children of librarians with the most number of sitelinks (as a proxy for fame)\nSELECT ?person ?personLabel ?parentLabel ?linkcount WHERE {\n    ?parent wdt:P106 wd:Q182436 .\n    ?parent wdt:P40 ?person .\n    ?person wikibase:sitelinks ?linkcount .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en,de,es,ar,fr\" }\n}\nGROUP BY ?linkcount ?person ?personLabel ?parent ?parentLabel\nORDER BY DESC(?linkcount)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Most famous child of a librarian",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.All languages with a Wikimedia language code (P424)",
      "namespace": "wikidata-examples",
      "name": "All languages with a Wikimedia language code (P424)",
      "sparql": "#title: All languages with a Wikimedia language code (P424)\n# Date: 2021-09-24\nSELECT DISTINCT ?lang_code ?itemLabel ?item\nWHERE\n{\n  # ?lang is one of these options\n  VALUES ?lang {\n    wd:Q34770   # language\n    wd:Q436240  # ancient language\n    wd:Q1288568 # modern language\n    wd:Q33215   # constructed language\n  }\n  ?item wdt:P31 ?lang ;\n    # get the language code\n    wdt:P424 ?lang_code .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} ORDER BY ?lang_code\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All languages with a Wikimedia language code (P424)",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.All Wikipedia sites",
      "namespace": "wikidata-examples",
      "name": "All Wikipedia sites",
      "sparql": "# Get all Wikipedia sites\nSELECT ?item ?itemLabel ?website\nWHERE\n{\n  #?item wdt:P31 wd:Q10876391.\n  ?item wdt:P856 ?website.\n  ?website wikibase:wikiGroup \"wikipedia\".\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All Wikipedia sites",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Featured articles of all Wikimedia projects",
      "namespace": "wikidata-examples",
      "name": "Featured articles of all Wikimedia projects",
      "sparql": "# Get all Featured Articles (Q17437796)\nSELECT ?lang ?name ?itemLabel ?sitelink ?linkcount ?item WHERE {\n  ?item wikibase:sitelinks ?linkcount.\n  ?sitelink schema:name ?name;\n    schema:inLanguage ?lang;\n    schema:about ?item;\n    # Sitelink is badged as a Featured Article\n    wikibase:badge wd:Q17437796.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Featured articles of all Wikimedia projects",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.People born in Lisbon without articles on ptwiki but with articles on other Wikipedias",
      "namespace": "wikidata-examples",
      "name": "People born in Lisbon without articles on ptwiki but with articles on other Wikipedias",
      "sparql": "# People born in Lisbon that don't have an article on Portuguese Wikipedia\n# but do have an article on other Wikipedias.\nSELECT DISTINCT ?person ?personLabel WHERE\n{\n  ?person wdt:P31 wd:Q5. # Instance of human\n  ?person (wdt:P19",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "People born in Lisbon without articles on ptwiki but with articles on other Wikipedias",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.List of present-day countries and capital(s)",
      "namespace": "wikidata-examples",
      "name": "List of present-day countries and capital(s)",
      "sparql": "\nSELECT DISTINCT ?country ?countryLabel ?capital ?capitalLabel\nWHERE\n{\n  ?country wdt:P31 wd:Q3624078 .\n  #not a former country\n  FILTER NOT EXISTS {?country wdt:P31 wd:Q3024240}\n  #and no an ancient civilisation (needed to exclude ancient Egypt)\n  FILTER NOT EXISTS {?country wdt:P31 wd:Q28171280}\n  OPTIONAL { ?country wdt:P36 ?capital } .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\nORDER BY ?countryLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of present-day countries and capital(s)",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.UN member states",
      "namespace": "wikidata-examples",
      "name": "UN member states",
      "sparql": "\nSELECT DISTINCT ?state WHERE {\n  ?state wdt:P31/wdt:P279* wd:Q3624078;\n         p:P463 ?memberOfStatement.\n  ?memberOfStatement a wikibase:BestRank;\n                     ps:P463 wd:Q1065.\n  MINUS { ?memberOfStatement pq:P582 ?endTime. }\n  MINUS { ?state wdt:P576",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "UN member states",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Countries sorted by population",
      "namespace": "wikidata-examples",
      "name": "Countries sorted by population",
      "sparql": "# defaultView:BubbleChart\nSELECT DISTINCT ?countryLabel ?population\n{\n  ?country wdt:P31 wd:Q6256 ;\n           wdt:P1082 ?population .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\nGROUP BY ?population ?countryLabel\nORDER BY DESC(?population)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Countries sorted by population",
      "description": "* Items used: \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Country populations together with total city populations",
      "namespace": "wikidata-examples",
      "name": "Country populations together with total city populations",
      "sparql": "\nSELECT ?country ?countryLabel ?population ?totalCityPopulation (?population / ?totalCityPopulation AS ?ratio) {\n  ?country wdt:P1082 ?population .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n  {\n    SELECT ?country (SUM(?cityPopulation) AS ?totalCityPopulation) WHERE {\n      ?city wdt:P31 wd:Q515 .\n      ?city wdt:P17 ?country .\n      ?city wdt:P1082 ?cityPopulation .\n    } GROUP BY ?country\n  }\n} ORDER BY ?ratio\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Country populations together with total city populations",
      "description": "Lists for each country the population and the total of the populations of all cities of this country.\nIf data were complete and populations were measured at the same time for each country and the respective cities then the ratio would be 1."
    },
    {
      "query_id": "wikidata-examples.Names of African countries in all their official languages and English",
      "namespace": "wikidata-examples",
      "name": "Names of African countries in all their official languages and English",
      "sparql": "\nSELECT DISTINCT ?item ?itemLabel_ol ?official_language ?itemLabel_en WHERE {\n  ?item wdt:P30 wd:Q15 ;\n        wdt:P37 ?officiallanguage ;\n        wdt:P31 wd:Q6256 .\n  ?officiallanguage wdt:P424 ?langcode .\n  ?item rdfs:label ?itemLabel_ol . FILTER(lang(?itemLabel_ol)=?langcode)\n  ?item rdfs:label ?itemLabel_en . FILTER(lang(?itemLabel_en)='en')\n  ?officiallanguage rdfs:label ?official_language . FILTER(lang(?official_language)='en')\n}\nORDER BY ?item ?itemLabel_ol ?official_language\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Names of African countries in all their official languages and English",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Languages and dialects spoken in the Netherlands with their optional Wikipedia editions",
      "namespace": "wikidata-examples",
      "name": "Languages and dialects spoken in the Netherlands with their optional Wikipedia editions",
      "sparql": "\nSELECT DISTINCT ?language ?languageLabel ?wikipediaLabel where {\n  ?language wdt:P31 ?instance;\n            wdt:P17 wd:Q55.\n  FILTER (?instance in (wd:Q34770, wd:Q33384)).\n  OPTIONAL {\n    ?wikipedia wdt:P31 wd:Q10876391;\n               wdt:P407 ?language.\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"nl,en\". }\n} GROUP BY ?language ?languageLabel ?wikipediaLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Languages and dialects spoken in the Netherlands with their optional Wikipedia editions",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Population of cities and towns in Denmark and their OSM relation id",
      "namespace": "wikidata-examples",
      "name": "Population of cities and towns in Denmark and their OSM relation id",
      "sparql": "\n# Population of cities and towns in Denmark and their OSM relation id\n# This shows a simple OR using VALUES and a variable\nSELECT ?city ?cityLabel ?population ?OSM_relation_ID WHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n  VALUES ?town_or_city {\n    wd:Q3957\n    wd:Q515\n  }\n  ?city (wdt:P31/(wdt:P279*)) ?town_or_city;\n    wdt:P17 wd:Q35.\n  OPTIONAL { ?city wdt:P1082 ?population. }\n  OPTIONAL { ?city wdt:P402 ?OSM_relation_ID. }\n}\nLIMIT 100\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Population of cities and towns in Denmark and their OSM relation id",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Former capitals",
      "namespace": "wikidata-examples",
      "name": "Former capitals",
      "sparql": "#defaultView:Map\nSELECT DISTINCT ?country ?countryLabel ?capital ?capitalLabel ?coordinates ?ended\nWHERE\n{\n  ?country p:P36 ?stat.\n  ?stat ps:P36 ?capital.\n  ?capital wdt:P625 ?coordinates.\n  OPTIONAL {\n    ?country wdt:P582{{!}}wdt:P576 ?ended.\n  }\n  OPTIONAL {\n    ?capital wdt:P582{{!}}wdt:P576 ?ended.\n  }\n  OPTIONAL {\n    ?stat pq:P582 ?ended.\n  }\n  FILTER(BOUND(?ended)).\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Former capitals",
      "description": "*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.Metro station of city with template",
      "namespace": "wikidata-examples",
      "name": "Metro station of city with template",
      "sparql": "\n#TEMPLATE={\"template\":\"metro station of ?city\",\"variables\":{\"?city\":{\"query\":\"SELECT DISTINCT ?cityLabel where {?city wdt:P31/wdt:P279* wd:Q1637706. SERVICE wikibase:label { bd:serviceParam wikibase:language \\\"[AUTO_LANGUAGE]\\\"} }\"} } }\n#defaultView:Map{\"hide\":[\"?comm1Label\",\"?coord1\", \"?comm2\",\"coord2\",\"?layer\",\"?str\",\"?line\", \"?rgb\"],\"layer\":\"?connectingLine1Label\"}\nSELECT ?comm1 ?comm1Label ?coord1 ?comm2 ?coord2 ?line ?connectingLine1 ?connectingLine1Label ?layer ?rgb WHERE {\n  BIND(wd:Q8686 AS ?city)\n  ?comm1 wdt:P31/wdt:P279* wd:Q928830 ;\n         wdt:P131*/wdt:P279* ?city;\n         wdt:P625 ?coord1 ;\n         wdt:P81 ?connectingLine1;\n         wdt:P197 ?comm2 .\n  ?connectingLine1 wdt:P465 ?rgb.\n  ?comm2 wdt:P81 ?connectingLine2;\n         wdt:P625 ?coord2 .\n  FILTER (?connectingLine1 = ?connectingLine2)\n\n  ?comm1 p:P625 [# ps:P625 [];\n                  psv:P625 [ wikibase:geoLongitude ?coord1lon; wikibase:geoLatitude ?coord1lat; ] ] .\n  ?comm2 p:P625 [# ps:P625 [];\n                  psv:P625 [ wikibase:geoLongitude ?coord2lon; wikibase:geoLatitude ?coord2lat; ] ] .\n\n  BIND(CONCAT('LINESTRING (', STR(?coord1lon), ' ', STR(?coord1lat), ',', STR(?coord2lon), ' ', STR(?coord2lat), ')') AS ?str) .\n  BIND(STRDT(?str, geo:wktLiteral) AS ?line) .\n  BIND(?connectingLine1 AS ?layer)\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE]\". }\n}\n\nORDER BY (?connectingLine1Label)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Metro station of city with template",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.grouped by dist range, color-coded",
      "namespace": "wikidata-examples",
      "name": "grouped by dist range, color-coded",
      "sparql": "\n#defaultView:BarChart\nPREFIX var_muntype: <http://www.wikidata.org/entity/Q15284>\nPREFIX var_area: <http://www.wikidata.org/entity/Q6308>\nSELECT ?from ?to ?distGrp WHERE {\n  {\n    SELECT ?from ?to ?distNum ?mun ?mun2 WHERE {\n      { SELECT ?mun (SAMPLE(?loc) AS ?loc)\n        WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                     wdt:P131 var_area:;\n                     wdt:P625 ?loc. }\n        GROUP BY ?mun\n      }\n      OPTIONAL {\n        { SELECT (?mun AS ?mun2) (SAMPLE(?loc) AS ?loc2)\n          WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                       wdt:P131 var_area:;\n                       wdt:P625 ?loc. }\n          GROUP BY ?mun\n        }\n      }\n      BIND(geof:distance(?loc, ?loc2) AS ?distNum).\n\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n        ?mun rdfs:label ?from.\n        ?mun2 rdfs:label ?to.\n      }\n    }\n  }\n  FILTER(CONCAT(?from,STR(?mun)) <= CONCAT(?to,STR(?mun2))).\n  #BIND(IF(STR(?from) < STR(?to),CONCAT(?from,\" <--> \",?to),\n  # CONCAT(?to,\" <--> \",?from)) AS ?distLabel).\n\n  BIND(COALESCE(\n    IF(?distNum >= 40, \"40 - .. km\", 1/0),\n    IF(?distNum >= 30, \"30 - 40 km\", 1/0),\n    IF(?distNum >= 20, \"20 - 30 km\", 1/0),\n    IF(?distNum >= 10, \"10 - 20 km\", 1/0),\n    IF(?distNum >= 5, \"05 - 10 km\", 1/0),\n    IF(?distNum >= 1, \"01 - 05 km\", \"00 - 01 km\")) AS ?distGrp).\n}\nORDER BY ?from ?distGrp\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "grouped by dist range, color-coded",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.grouped per municipality on x-axis, alphabetically",
      "namespace": "wikidata-examples",
      "name": "grouped per municipality on x-axis, alphabetically",
      "sparql": "\n#defaultView:ScatterChart\nPREFIX var_muntype: <http://www.wikidata.org/entity/Q15284>\nPREFIX var_area: <http://www.wikidata.org/entity/Q6308>\nSELECT ?from (?distGrp1 AS ?kilometers) ?to WHERE {\n  { SELECT ?mun (SAMPLE(?loc) AS ?loc)\n    WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                 wdt:P131 var_area:;\n                 wdt:P625 ?loc. }\n    GROUP BY ?mun\n  }\n  OPTIONAL {\n    { SELECT (?mun AS ?mun2) (SAMPLE(?loc) AS ?loc2)\n      WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                   wdt:P131 var_area:;\n                   wdt:P625 ?loc. }\n      GROUP BY ?mun\n    }\n  }\n  BIND(geof:distance(?loc, ?loc2) AS ?distNum).\n  BIND(STR(ROUND(?distNum)) AS ?distGrp0).\n  BIND(CONCAT(SUBSTR(\"000\",STRLEN(?distGrp0)+1),?distGrp0,\".\",STR(ROUND((?distNum-FLOOR(?distNum))*10)),\" km\") AS ?distGrp1).\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n    ?mun rdfs:label ?from.\n    ?mun2 rdfs:label ?to.\n  }\n}\nORDER BY ?from ?kilometers\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "grouped per municipality on x-axis, alphabetically",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.grouped per municipality on x-axis, by sum of dist",
      "namespace": "wikidata-examples",
      "name": "grouped per municipality on x-axis, by sum of dist",
      "sparql": "\n#defaultView:ScatterChart\nPREFIX var_muntype: <http://www.wikidata.org/entity/Q15284>\nPREFIX var_area: <http://www.wikidata.org/entity/Q6308>\nSELECT ?from (?distNum AS ?kilometers) ?to WHERE {\n  { SELECT ?mun (SAMPLE(?loc) AS ?loc)\n    WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                 wdt:P131 var_area:;\n                 wdt:P625 ?loc. }\n    GROUP BY ?mun\n  }\n  OPTIONAL {\n    { SELECT (?mun AS ?mun2) (SAMPLE(?loc) AS ?loc2)\n      WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                   wdt:P131 var_area:;\n                   wdt:P625 ?loc. }\n      GROUP BY ?mun\n    }\n  }\n  BIND(geof:distance(?loc, ?loc2) AS ?distNum).\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n    ?mun rdfs:label ?from.\n    ?mun2 rdfs:label ?to.\n  }\n}\nORDER BY ?from ?kilometers\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "grouped per municipality on x-axis, by sum of dist",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.grouped per municipality on x-axis, animated per municipality on x-axis",
      "namespace": "wikidata-examples",
      "name": "grouped per municipality on x-axis, animated per municipality on x-axis",
      "sparql": "\n#defaultView:ScatterChart\nPREFIX var_muntype: <http://www.wikidata.org/entity/Q15284>\nPREFIX var_area: <http://www.wikidata.org/entity/Q6308>\nSELECT ?from (?distNum AS ?kilometers) ?to (?from AS ?animation) WHERE {\n  { SELECT ?mun (SAMPLE(?loc) AS ?loc)\n    WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                 wdt:P131 var_area:;\n                 wdt:P625 ?loc. }\n    GROUP BY ?mun\n  }\n  OPTIONAL {\n    { SELECT (?mun AS ?mun2) (SAMPLE(?loc) AS ?loc2)\n      WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                   wdt:P131 var_area:;\n                   wdt:P625 ?loc. }\n      GROUP BY ?mun\n    }\n  }\n  BIND(geof:distance(?loc, ?loc2) AS ?distNum).\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n    ?mun rdfs:label ?from.\n    ?mun2 rdfs:label ?to.\n  }\n}\nORDER BY ?from ?kilometers\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "grouped per municipality on x-axis, animated per municipality on x-axis",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.grouped per municipality on x-axis, animated per municipality on z-axis",
      "namespace": "wikidata-examples",
      "name": "grouped per municipality on x-axis, animated per municipality on z-axis",
      "sparql": "\n#defaultView:ScatterChart\nPREFIX var_muntype: <http://www.wikidata.org/entity/Q15284>\nPREFIX var_area: <http://www.wikidata.org/entity/Q6308>\nSELECT ?from (?distNum AS ?kilometers) ?to (?to AS ?animation) WHERE {\n  { SELECT ?mun (SAMPLE(?loc) AS ?loc)\n    WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                 wdt:P131 var_area:;\n                 wdt:P625 ?loc. }\n    GROUP BY ?mun\n  }\n  OPTIONAL {\n    { SELECT (?mun AS ?mun2) (SAMPLE(?loc) AS ?loc2)\n      WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                   wdt:P131 var_area:;\n                   wdt:P625 ?loc. }\n      GROUP BY ?mun\n    }\n  }\n  BIND(geof:distance(?loc, ?loc2) AS ?distNum).\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n    ?mun rdfs:label ?from.\n    ?mun2 rdfs:label ?to.\n  }\n}\nORDER BY ?from ?kilometers\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "grouped per municipality on x-axis, animated per municipality on z-axis",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.grouped per municipality on x-axis, animated by fixed dist range groups",
      "namespace": "wikidata-examples",
      "name": "grouped per municipality on x-axis, animated by fixed dist range groups",
      "sparql": "\n#defaultView:ScatterChart\nPREFIX var_muntype: <http://www.wikidata.org/entity/Q15284>\nPREFIX var_area: <http://www.wikidata.org/entity/Q6308>\nSELECT ?from (?distNum AS ?kilometers) ?to (?distGrp AS ?animation) WHERE {\n  { SELECT ?mun (SAMPLE(?loc) AS ?loc)\n    WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                 wdt:P131 var_area:;\n                 wdt:P625 ?loc. }\n    GROUP BY ?mun\n  }\n  OPTIONAL {\n    { SELECT (?mun AS ?mun2) (SAMPLE(?loc) AS ?loc2)\n      WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                   wdt:P131 var_area:;\n                   wdt:P625 ?loc. }\n      GROUP BY ?mun\n    }\n  }\n  #FILTER (STR(?mun) <= STR(?mun2)).\n  BIND(geof:distance(?loc, ?loc2) AS ?distNum).\n  BIND(COALESCE(\n    IF(?distNum >= 40, \"40 km und mehr\", 1/0),\n    IF(?distNum >= 30, \"30 - 40 km\", 1/0),\n    IF(?distNum >= 20, \"20 - 30 km\", 1/0),\n    IF(?distNum >= 10, \"10 - 20 km\", 1/0),\n    IF(?distNum >= 5, \"05 - 10 km\", 1/0),\n    IF(?distNum >= 1, \"01 - 05 km\", \"00 - 01 km\")) AS ?distGrp).\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n    ?mun rdfs:label ?from.\n    ?mun2 rdfs:label ?to.\n  }\n}\nORDER BY ?animation ?from ?kilometers\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "grouped per municipality on x-axis, animated by fixed dist range groups",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.grouped per municipality on x-axis, animated by ranked dist (farthest, 2nd farthest, ..)",
      "namespace": "wikidata-examples",
      "name": "grouped per municipality on x-axis, animated by ranked dist (farthest, 2nd farthest, ..)",
      "sparql": "\n#defaultView:ScatterChart\nPREFIX var_muntype: <http://www.wikidata.org/entity/Q15284>\nPREFIX var_area: <http://www.wikidata.org/entity/Q6308>\nSELECT ?from ?kilometers ?to ?rank_group\nWHERE {\n  {\n    SELECT (SAMPLE(?mun) AS ?mun) (SAMPLE(?mun2) AS ?mun2) (SAMPLE(?distNum) AS ?kilometers)\n           (COUNT(*)-1 AS ?rg) (SUBSTR(\"00\",1+STRLEN(STR(?rg))) AS ?rgpad)\n           (IF(FLOOR((?rg-(100*FLOOR(?rg/100)))/10)=1,0,?rg-(10*FLOOR(?rg/10))) AS ?rgmod)\n           (IF(?rgmod=1,\"st\",IF(?rgmod=2,\"nd\",IF(?rgmod=3,\"rd\",\"th\"))) AS ?rgord)\n           (CONCAT(?rgpad,STR(?rg),?rgord,\"-most farthest places\") AS ?rank_group)\n    WHERE {\n      { SELECT ?mun (SAMPLE(?loc) AS ?loc)\n        WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                     wdt:P131 var_area:;\n                     wdt:P625 ?loc. }\n        GROUP BY ?mun\n      }\n      OPTIONAL {\n        { SELECT (?mun AS ?mun2) (SAMPLE(?loc) AS ?loc2)\n          WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                       wdt:P131 var_area:;\n                       wdt:P625 ?loc. }\n          GROUP BY ?mun\n        }\n      }\n      OPTIONAL {\n        { SELECT (?mun AS ?mun3) (SAMPLE(?loc) AS ?loc3)\n          WHERE { ?mun wdt:P31/wdt:P279* var_muntype:;\n                       wdt:P131 var_area:;\n                       wdt:P625 ?loc. }\n          GROUP BY ?mun\n        }\n      }\n      BIND(geof:distance(?loc, ?loc2) AS ?distNum).\n      BIND(geof:distance(?loc, ?loc3) AS ?d).\n      FILTER(?distNum >= ?d).\n    } GROUP BY ?mun ?mun2 ?distNum\n  }\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n    ?mun rdfs:label ?from.\n    ?mun2 rdfs:label ?to.\n  }\n}\nORDER BY ?rank_group ?kilometers ?from\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "grouped per municipality on x-axis, animated by ranked dist (farthest, 2nd farthest, ..)",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Show all Dutch municipalities that share a border with {{Q|Q213246}}, ignoring rank",
      "namespace": "wikidata-examples",
      "name": "Show all Dutch municipalities that share a border with {{Q|Q213246}}, ignoring rank",
      "sparql": "\nSELECT ?muni ?muniLabel where {\n  ?muni p:P31 [ps:P31 wd:Q2039348];\n        wdt:P47 wd:Q213246.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"nl\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Show all Dutch municipalities that share a border with {{Q|Q213246}}, ignoring rank",
      "description": "====  Show all Dutch municipalities that share a border with , ignoring rank ===="
    },
    {
      "query_id": "wikidata-examples.Border cities of the world",
      "namespace": "wikidata-examples",
      "name": "Border cities of the world",
      "sparql": "# To filter by country add FILTER (?country = wd:Qxx)\n#defaultView:Map\n# To show the cities of several countries use FILTER (?country IN (wd:Qxx, wd:Qyy))\n# To obtain cities that are part of a particular continent or territory ?country\n# should not be optional and add \"?country wdt:P361 wd:Qxx .\"\n\nSELECT ?border_city ?border_cityLabel ?countryLabel ?coords\nWHERE {\n  ?border_city wdt:P31 wd:Q902814.\n  OPTIONAL { ?border_city wdt:P17 ?country. }\n  OPTIONAL { ?border_city wdt:P625 ?coords. }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n                         ?border_city rdfs:label ?border_cityLabel.\n                         ?country rdfs:label ?countryLabel.}\n}\nGROUP BY ?border_city ?border_cityLabel ?countryLabel ?coords\nORDER BY ?countryLabel ?border_cityLabel",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Border cities of the world",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Municipalities of the Basque Country without former municipalities",
      "namespace": "wikidata-examples",
      "name": "Municipalities of the Basque Country without former municipalities",
      "sparql": " \n# This query has two different features:\n# First, it is able to search for municipalities which are part of two different states, looking to P527\n# Second, it doesn't show former municipalities, filtering the old ones from the P582 statement.\nSELECT DISTINCT ?udalerri ?udalerriLabel WHERE { \n  ?udalerri p:P31 ?status.\n  ?udalerri wdt:P131*/^wdt:P527 wd:Q47588 .\n  {?status ps:P31 wd:Q484170.} UNION {?status ps:P31 wd:Q2074737}\n  MINUS {?status pq:P582 ?old .}\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"eu,es,fr,en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Municipalities of the Basque Country without former municipalities",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Longest river of each continent",
      "namespace": "wikidata-examples",
      "name": "Longest river of each continent",
      "sparql": "\n\nSELECT ?continent ?river ?continentLabel ?riverLabel ?maxlength\nWHERE\n{\n  {\n    SELECT ?continent (MAX(?length) AS ?maxlength)\n    WHERE\n    {\n      ?river wdt:P31/wdt:P279* wd:Q355304;\n             wdt:P2043 ?length;\n             wdt:P30 ?continent.\n    }\n    GROUP BY ?continent\n  }\n  ?river wdt:P31/wdt:P279* wd:Q355304;\n         wdt:P2043 ?maxlength;\n         wdt:P30 ?continent.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY ?continentLabel\n\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Longest river of each continent",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Rivers in Antarctica",
      "namespace": "wikidata-examples",
      "name": "Rivers in Antarctica",
      "sparql": "\n\nSELECT ?river ?riverLabel ?location\nWHERE\n{\n  ?river wdt:P31/wdt:P279* wd:Q355304; # watercourse; includes a few creeks \u2013 use wd:Q4022 for rivers only\n         wdt:P30 wd:Q51.\n  OPTIONAL { ?river wdt:P625 ?location. }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Rivers in Antarctica",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Body of water with the most watercourses ending in it",
      "namespace": "wikidata-examples",
      "name": "Body of water with the most watercourses ending in it",
      "sparql": "\n\n# Bodies of water that most watercourses end in (transitive).\n# For example, over 4000 watercourses eventually flow into the Ob,\n# and since the Ob flows into the Kara Sea, the Kara Sea has over 4000 results as well.\nSELECT ?mouth (COUNT(?watercourse) AS ?count)\nWHERE\n{\n  ?watercourse wdt:P403+ ?mouth.\n}\nGROUP BY ?mouth\nORDER BY DESC(?count)\nLIMIT 10\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Body of water with the most watercourses ending in it",
      "description": "* Items used: None\n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Bridges over rivers in former government district of Leipzig",
      "namespace": "wikidata-examples",
      "name": "Bridges over rivers in former government district of Leipzig",
      "sparql": "\n#defaultView:Map\nSELECT (SAMPLE(?bridge) AS ?bridge) (SAMPLE(?bridgeLabel) AS ?bridgeLabel)\n       (SAMPLE(?watercourse) AS ?watercourse) (SAMPLE(?watercourseLabel) AS ?watercourseLabel)\n       (SAMPLE(?loc) AS ?loc) (SAMPLE(?pic) AS ?pic)\n       (CONCAT(SAMPLE(?sKey),\": \",STR(YEAR(SAMPLE(?s)))) AS ?start)\n       (CONCAT(SAMPLE(?eKey),\": \",STR(YEAR(SAMPLE(?e)))) AS ?end)\n       (SAMPLE(?article) AS ?article) (IF(BOUND(?article),CONCAT(?bridgeLabel,\" in Wikipedia\"),1/0) AS ?articleLabel)\nWHERE {\n  {\n    SELECT ?bridge ?watercourse WHERE {\n      ?bridge wdt:P31/wdt:P279* wd:Q12280; wdt:P177 ?watercourse.\n      ?watercourse wdt:P31/wdt:P279* wd:Q355304.\n      # the following actually yields a perf penalty atm\n      #?bridge wdt:P17 wd:Q183.\n      #OPTIONAL { ?bridge wdt:P17 ?country. }. FILTER(!BOUND(?country) {{!}}{{!}} ?country = wd:Q183).\n    }\n  }\n\n  # wd:Q1202, wd:Q183 work as well atm and take progressively more time to complete\n  ?bridge (p:P131{{!}}ps:P131)+ wd:Q24186.\n\n  OPTIONAL { ?bridge wdt:P625 ?loc. }.\n  OPTIONAL { ?bridge wdt:P18 ?pic. }.\n  OPTIONAL { ?bridge wdt:P571 ?s. }.\n  OPTIONAL { ?bridge wdt:P576 ?e. }.\n\n  OPTIONAL {\n    ?article schema:about ?bridge.\n    FILTER (IF(EXISTS {?article schema:inLanguage \"[AUTO_LANGUAGE]\".},\n               SUBSTR(str(?article), 1, 25) = \"https://[AUTO_LANGUAGE].wikipedia.org/\",\n               IF(EXISTS {?article schema:inLanguage \"en\".},\n                  SUBSTR(str(?article), 1, 25) = \"https://en.wikipedia.org/\",\n                  SUBSTR(str(?article), 1, 25) = \"https://de.wikipedia.org/\"\n               )\n            )).\n  }\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en,de\".\n    ?bridge rdfs:label ?bridgeLabel.\n    ?watercourse rdfs:label ?watercourseLabel.\n    wd:P571 rdfs:label ?sKey.\n    wd:P576 rdfs:label ?eKey.\n  }\n}\nGROUP BY ?bridge ?watercourse\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Bridges over rivers in former government district of Leipzig",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Mons (mountains), with coordinates, not located on Earth",
      "namespace": "wikidata-examples",
      "name": "Mons (mountains), with coordinates, not located on Earth",
      "sparql": "SELECT DISTINCT ?item ?name ?coord ?lat ?lon ?globe\n{\n   ?item wdt:P31 wd:Q429088 ;\n         p:P625 [\n           psv:P625 [\n             wikibase:geoLatitude ?lat ;\n             wikibase:geoLongitude ?lon ;\n             wikibase:geoGlobe ?globe ;\n           ] ;\n           ps:P625 ?coord\n         ]\n  FILTER ( ?globe != wd:Q2 )\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" .\n    ?item rdfs:label ?name\n   }\n}\nORDER BY ASC (?name)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Mons (mountains), with coordinates, not located on Earth",
      "description": "* Items used:  \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Highest places on Earth",
      "namespace": "wikidata-examples",
      "name": "Highest places on Earth",
      "sparql": "\n#title:Elevations over 8000 meter\n\nSELECT ?elevation ?item ?itemLabel ?itemDescription ?coord WHERE {\n  hint:Query hint:optimizer \"None\".\n  ?st psn:P2044 ?psn .\n  ?psn wikibase:quantityAmount ?elevation . FILTER(?elevation > 8000) .\n  ?psn wikibase:quantityUnit wd:Q11573 .\n  ?st wikibase:rank ?rank . FILTER(?rank != wikibase:DeprecatedRank) .\n  ?item p:P2044 ?st .\n  ?item wdt:P625 ?coord .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY DESC(?elevation)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Highest places on Earth",
      "description": "*  Items used: None\n*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.Highest mountains in the universe (with units)",
      "namespace": "wikidata-examples",
      "name": "Highest mountains in the universe (with units)",
      "sparql": "\n\n#Elevations over 8000\n#Displays units\n#Last updated 2021-04-25\n\nSELECT ?elevation ?unit ?unitLabel ?item ?itemLabel ?itemDescription ?coord\nWHERE\n{\n  ?psv_triples wikibase:quantityAmount ?elevation .\n  filter(?elevation > 8000)\n  ?psv_triples wikibase:quantityUnit ?unit .\n\n  ?p_triples psv:P2044 ?psv_triples .\n  ?p_triples a wikibase:BestRank .\n\n  ?item p:P2044 ?p_triples .\n\n  ?item wdt:P625 ?coord .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY DESC(?elevation)\n\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Highest mountains in the universe (with units)",
      "description": "*  Items used: None\n*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.Highest mountains in the universe (with units, compact form)",
      "namespace": "wikidata-examples",
      "name": "Highest mountains in the universe (with units, compact form)",
      "sparql": "\n\n#Elevations over 8000\n#Displays units\n#Last updated 2021-04-25\n\nSELECT ?elevation ?unit ?unitLabel ?item ?itemLabel ?itemDescription ?coord\nWHERE\n{\n  ?item wdt:P2044 ?elevation .\n  # this could be dropped, but is included to speed it up\n  filter(?elevation > 8000)\n\n  ?item p:P2044 [ a wikibase:BestRank ; psv:P2044 [ wikibase:quantityAmount ?elevation ; wikibase:quantityUnit ?unit ] ] .\n\n  ?item wdt:P625 ?coord .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY DESC(?elevation)\n\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Highest mountains in the universe (with units, compact form)",
      "description": "*  Items used: None\n*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.Mountains over 8000 meters elevation",
      "namespace": "wikidata-examples",
      "name": "Mountains over 8000 meters elevation",
      "sparql": "\n#Last updated 2021-04-25\n#defaultView:Map\nSELECT ?item ?itemLabel ?itemDescription ?coord ?elevation\nWHERE\n{\n  ?item wdt:P31 wd:Q8502 .\n  ?item p:P2044 [ a wikibase:BestRank; psn:P2044/wikibase:quantityAmount ?elevation ]\n  FILTER(?elevation >= 8000 )\n  ?item wdt:P625 ?coord.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Mountains over 8000 meters elevation",
      "description": "* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Italian mountains higher than 4000 meters",
      "namespace": "wikidata-examples",
      "name": "Italian mountains higher than 4000 meters",
      "sparql": "#defaultView:ImageGrid\nSELECT ?item ?itemLabel ?coord ?elev ?picture\n{\n  ?item p:P2044/psn:P2044/wikibase:quantityAmount ?elev ; # normalized height\n        wdt:P625 ?coord ;\n        wdt:P17 wd:Q38 ;\n        wdt:P18 ?picture\n  FILTER(?elev > 4000)\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"it\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Italian mountains higher than 4000 meters",
      "description": "* Items used: \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Places in Antarctica more than 3000km away from the South Pole",
      "namespace": "wikidata-examples",
      "name": "Places in Antarctica more than 3000km away from the South Pole",
      "sparql": "#title: Places in Antarctica over 3000km away from the South Pole\n#defaultView:Map\nSELECT ?place ?placeLabel ?location WHERE {\n  wd:Q933 wdt:P625 ?southPole.                         # coordinates of south pole\n  ?place wdt:P30 wd:Q51;                               # continent: antarctica\n         wdt:P625 ?location.\n  FILTER(geof:distance(?location, ?southPole) > 3000). # over 3000km away from south pole\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Places in Antarctica more than 3000km away from the South Pole",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Metro stations of {{Q|Q13224}} in Paris",
      "namespace": "wikidata-examples",
      "name": "Metro stations of {{Q|Q13224}} in Paris",
      "sparql": "SELECT ?item ?itemLabel ?adjacent ?adjacentL ?coords\n{\n  ?item wdt:P31/wdt:P279* wd:Q928830 ;\n        wdt:P81 wd:Q13224 ;\n        wdt:P625 ?coords .\n  OPTIONAL {\n    ?item p:P197 [ ps:P197 ?adjacent ; pq:P5051 wd:Q585752;\n                                       pq:P81 wd:Q13224] .\n    ?adjacent rdfs:label ?adjacentL FILTER (lang(?adjacentL) = \"en\")\n  }\n?item wdt:P1619 ?founded_date. #needs existence\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . }\n} ORDER BY ?itemLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Metro stations of {{Q|Q13224}} in Paris",
      "description": "===  Metro stations of  in Paris ===\n* Items used:   \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Map of Broadway venues",
      "namespace": "wikidata-examples",
      "name": "Map of Broadway venues",
      "sparql": "\n\n#defaultView:Map\n# Venues in Broadway\nSELECT DISTINCT ?venue ?venueLabel ?coords {\n    ?venue wdt:P1217 ?IDBDB .\n    wd:Q235065 wdt:P625 ?broadWayLoc .\n\n    SERVICE wikibase:around {\n      ?venue wdt:P625 ?coords .\n      bd:serviceParam wikibase:center ?broadWayLoc .\n      bd:serviceParam wikibase:radius \"1.5\" .\n    }\n\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en\" .\n  }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Map of Broadway venues",
      "description": "* Items used: \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.How many states this US state borders",
      "namespace": "wikidata-examples",
      "name": "How many states this US state borders",
      "sparql": "\nSELECT ?state ?stateLabel ?borders\nWHERE\n{\n  {\n    SELECT ?state (COUNT(?otherState) as ?borders)\n    WHERE\n    {\n    ?state wdt:P31 wd:Q35657 .\n    ?otherState wdt:P47 ?state .\n    ?otherState wdt:P31 wd:Q35657 .\n    }\n    GROUP BY ?state\n  }\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" .\n  }\n}\nORDER BY DESC(?borders)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "How many states this US state borders",
      "description": "* Items used: \n* Properties used: ,"
    },
    {
      "query_id": "wikidata-examples.Places that are below 10 meters above sea level",
      "namespace": "wikidata-examples",
      "name": "Places that are below 10 meters above sea level",
      "sparql": "\n\n#defaultView:Map\nSELECT ?place ?location ?elev ?image\nWHERE\n{\n  ?place p:P2044/psv:P2044 ?placeElev.\n  ?placeElev wikibase:quantityAmount ?elev.\n  ?placeElev wikibase:quantityUnit ?unit.\n  bind(0.01 as ?km).\n  filter( (?elev < ?km*1000 && ?unit = wd:Q11573)\n       {{!}}{{!}} (?elev < ?km*3281 && ?unit = wd:Q3710)\n       {{!}}{{!}} (?elev < ?km      && ?unit = wd:Q828224) ).\n  ?place wdt:P625 ?location.\n  OPTIONAL { ?place wdt:P18 ?image }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Places that are below 10 meters above sea level",
      "description": "* Items used: \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Globes used to represent coordinates",
      "namespace": "wikidata-examples",
      "name": "Globes used to represent coordinates",
      "sparql": "\n SELECT (count(?v) as ?c) ?globe\nWHERE\n{\n  ?v wikibase:geoGlobe ?globe\n}\nGROUP BY ?globe\nORDER BY DESC(?c)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Globes used to represent coordinates",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Places within 1km of the Empire State Building",
      "namespace": "wikidata-examples",
      "name": "Places within 1km of the Empire State Building",
      "sparql": "\n SELECT ?place ?placeLabel ?location ?instanceLabel\nWHERE\n{\n  wd:Q9188 wdt:P625 ?loc .\n  SERVICE wikibase:around {\n      ?place wdt:P625 ?location .\n      bd:serviceParam wikibase:center ?loc .\n      bd:serviceParam wikibase:radius \"1\" .\n  }\n  OPTIONAL { ?place wdt:P31 ?instance }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n  BIND(geof:distance(?loc, ?location) as ?dist)\n} ORDER BY ?dist\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Places within 1km of the Empire State Building",
      "description": "* Items used: \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Select French municipalities by INSEE code (select by identifier)",
      "namespace": "wikidata-examples",
      "name": "Select French municipalities by INSEE code (select by identifier)",
      "sparql": "SELECT ?item ?itemLabel ?inseeCode {\n  ?item wdt:P374 ?inseeCode .\n  FILTER (?inseeCode in (\"75056\", \"69123\", \"13055\"))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Select French municipalities by INSEE code (select by identifier)",
      "description": "* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Map and list of municipalities in The Netherlands",
      "namespace": "wikidata-examples",
      "name": "Map and list of municipalities in The Netherlands",
      "sparql": "#Concise list & map of the 355 Dutch municipalities, their geo coordinates and their provinces, per 1-1-2019\n#See also:\n#https://almanak.overheid.nl/organisaties/Gemeenten/ - 355 in aantal\n#https://nl.wikipedia.org/wiki/Lijst_van_Nederlandse_gemeenten - 355 in aantal\n\n#defaultView:Map\nSELECT ?muni ?muniLabel ?location where {\n  ?muni p:P31 ?instanceOf; # Get statement because we need this later\n        wdt:P625 ?location. # And location\n  ?instanceOf ps:P31 wd:Q2039348. # P31 should be 'municipality of the Netherlands'\n  MINUS { ?muni wdt:P31 wd:Q7265977. } # Don't show former municipalities\n  MINUS { ?instanceOf pq:P582 ?endTime. } # And don't show municipalities that have an end time\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"nl\". } # Show names in Dutch\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Map and list of municipalities in The Netherlands",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Buildings in more than one country",
      "namespace": "wikidata-examples",
      "name": "Buildings in more than one country",
      "sparql": "\nSELECT ?item ?itemLabel ?count\nWHERE\n{\n  {\n    SELECT ?item (COUNT(DISTINCT ?country) AS ?count) WHERE {\n      ?item wdt:P31/wdt:P279* wd:Q41176 .\n      ?item wdt:P17 ?country .\n      FILTER NOT EXISTS { ?country wdt:P576 ?end }\n    }\n    GROUP BY ?item\n  }\n  FILTER ( ?count > 1 )\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . }\n}\nORDER BY DESC(?count) ?itemL\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Buildings in more than one country",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.ATMs around Munich belonging to the Bankcard-Servicenetz interbank network (federated query)",
      "namespace": "wikidata-examples",
      "name": "ATMs around Munich belonging to the Bankcard-Servicenetz interbank network (federated query)",
      "sparql": "\n#defaultView:Map{\"hide\":[\"?atm\",\"?geometry\"], \"layer\": \"?bankLabel\"}\n\nPREFIX lgdo: <http://linkedgeodata.org/ontology/>\nPREFIX geom: <http://geovocab.org/geometry#>\nPREFIX bif: <bif:>\n\nSELECT ?atm ?geometry ?bank ?bankLabel WHERE {\n  hint:Query hint:optimizer \"None\".\n\n  SERVICE <http://linkedgeodata.org/sparql> {\n    { ?atm a lgdo:Bank; lgdo:atm true. }\n    UNION { ?atm a lgdo:Atm. }\n\n    ?atm geom:geometry [geo:asWKT ?geometry];\n         lgdo:operator ?operator.\n    FILTER(bif:st_intersects(?geometry, bif:st_point(11.5746898, 48.1479876), 5)) # 5 km around Munich\n  }\n\n  BIND(STRLANG(?operator, \"de\") as ?bankLabel)\n  ?bank rdfs:label ?bankLabel.\n\n  # bank is part of the Bankcard service network, either via an explicit statement or implicitly due to its legal form (unless explicitly excluded)\n  { ?bank wdt:P527 wd:Q806724. }\n  UNION { ?bank wdt:P1454 wd:Q5349747. }\n  MINUS { wd:Q806724 wdt:P3113 ?bank. }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "ATMs around Munich belonging to the Bankcard-Servicenetz interbank network (federated query)",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Items geographically located around the Wikimedia Foundation office, sorted by distance",
      "namespace": "wikidata-examples",
      "name": "Items geographically located around the Wikimedia Foundation office, sorted by distance",
      "sparql": "\nSELECT ?place ?location ?distance ?placeLabel WHERE {\n    SERVICE wikibase:around {\n      ?place wdt:P625 ?location .\n      bd:serviceParam wikibase:center \"Point(-122.402251 37.789246)\"^^geo:wktLiteral .\n      bd:serviceParam wikibase:radius \"1\" .\n      bd:serviceParam wikibase:distance ?distance .\n    }\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} ORDER BY ?distance LIMIT 100\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Items geographically located around the Wikimedia Foundation office, sorted by distance",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Ten largest islands in the world",
      "namespace": "wikidata-examples",
      "name": "Ten largest islands in the world",
      "sparql": "\n#title: Ten largest islands in the world\n# Inspired by this infographic: https://redd.it/a6423t\n\n#defaultView:ImageGrid\nSELECT DISTINCT ?island ?islandLabel ?islandImage WHERE {\n  ?island (wdt:P31/(wdt:P279*)) wd:Q23442.\n  OPTIONAL { ?island wdt:P18 ?islandImage. }\n  ?island (p:P2046/psn:P2046/wikibase:quantityAmount) ?islandArea.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY DESC (?islandArea)\nLIMIT 10\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Ten largest islands in the world",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.City gates in the Dutch province of Zeeland",
      "namespace": "wikidata-examples",
      "name": "City gates in the Dutch province of Zeeland",
      "sparql": "\nSELECT ?town ?townLabel ?gate ?gateLabel where {\n  # Municipalities within the province\n  ?muni wdt:P31 wd:Q2039348;\n        wdt:P131 wd:Q705.\n  # Instances of city gate located within any of the municipalities\n  ?gate wdt:P31 wd:Q82117;\n        wdt:P131 ?muni;\n  # The Location (usually Town) that the gate is in\n        wdt:P276 ?town.\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"nl\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "City gates in the Dutch province of Zeeland",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Demography",
      "namespace": "wikidata-examples",
      "name": "Demography",
      "sparql": "\n\n# Coordinates of the birth places of people named Antoine\n#defaultView:Map\nSELECT ?item ?itemLabel ?coord\nWHERE\n{\n  ?item wdt:P31 wd:Q5 . # human\n  ?item wdt:P735 wd:Q15235674.\n  ?item wdt:P19 ?place.\n  ?place wdt:P625 ?coord.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Demography",
      "description": "===  Birthplaces of humans named Antoine ===\n\n\n===  Average lifespan by occupation ===\n\n\n===  Items with the most birth dates ===\n\n\n===  Things/people with most children ===\n\n\n===  Population growth in Suriname from 1960 onward ===\n\n\n===  Number of dead people by month since 2000 ==="
    },
    {
      "query_id": "wikidata-examples.Birthplaces of humans named Antoine",
      "namespace": "wikidata-examples",
      "name": "Birthplaces of humans named Antoine",
      "sparql": "\n\n# Coordinates of the birth places of people named Antoine\n#defaultView:Map\nSELECT ?item ?itemLabel ?coord\nWHERE\n{\n  ?item wdt:P31 wd:Q5 . # human\n  ?item wdt:P735 wd:Q15235674.\n  ?item wdt:P19 ?place.\n  ?place wdt:P625 ?coord.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Birthplaces of humans named Antoine",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Gender distribution in the candidates for the Dutch general election 2017",
      "namespace": "wikidata-examples",
      "name": "Gender distribution in the candidates for the Dutch general election 2017",
      "sparql": " #Kandidaten voor de Nederlandse tk verkiezingen van 2017\n#defaultView:Dimensions\nSELECT ?positie_op_lijst ?genderLabel ?politieke_partijLabel WHERE {\n  ?item p:P3602 ?node.\n  ?item wdt:P21 ?gender.\n  ?node ps:P3602 wd:Q16061881 .\n  ?node pq:P1545 ?positie_op_lijst.\n  ?node pq:P1268 ?politieke_partij.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],nl\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Gender distribution in the candidates for the Dutch general election 2017",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Candidates for the Dutch general election 2017 living in Antwerp, Belgium",
      "namespace": "wikidata-examples",
      "name": "Candidates for the Dutch general election 2017 living in Antwerp, Belgium",
      "sparql": " SELECT ?item ?itemLabel ?twitter ?LinkedIN ?politieke_partij ?politieke_partijLabel ?positie_op_lijst WHERE {\n  ?item p:P3602 ?node.\n  ?item wdt:P551 wd:Q12892.\n  OPTIONAL { ?item wdt:P2002 ?twitter. }\n  OPTIONAL { ?item wdt:P2035 ?LinkedIN. }\n  ?node ps:P3602 wd:Q16061881.\n  OPTIONAL { ?node pq:P1545 ?positie_op_lijst. }\n  OPTIONAL { ?node pq:P1268 ?politieke_partij. }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],nl\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Candidates for the Dutch general election 2017 living in Antwerp, Belgium",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Occupations of candidates of the Dutch general election 2017",
      "namespace": "wikidata-examples",
      "name": "Occupations of candidates of the Dutch general election 2017",
      "sparql": "#Kandidaten voor de Nederlandse TK verkiezingen van 2017\n#defaultView:Dimensions\nSELECT ?positie_op_lijst ?genderLabel ?occupationLabel ?politieke_partijLabel WHERE {\n  VALUES ?politieke_partij {wd:Q747910 wd:Q275441}\n  ?item p:P3602 ?node.\n  ?item wdt:P21 ?gender.\n  ?item wdt:P106 ?occupation.\n  ?node ps:P3602 wd:Q16061881.\n  ?node pq:P1545 ?positie_op_lijst.\n  ?node pq:P1268 ?politieke_partij.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],nl\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Occupations of candidates of the Dutch general election 2017",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Number of ministers who are themselves children of a minister, per country",
      "namespace": "wikidata-examples",
      "name": "Number of ministers who are themselves children of a minister, per country",
      "sparql": "SELECT ?cc (COUNT(DISTINCT ?child) AS ?number) {\n  ?child wdt:P31 wd:Q5 ; # Looking for real humans and not fictional ones\n         wdt:P39/wdt:P279* wd:Q83307 ;\n         (wdt:P22",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Number of ministers who are themselves children of a minister, per country",
      "description": "* Items used:  \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.List of parliament buildings with pictures by country",
      "namespace": "wikidata-examples",
      "name": "List of parliament buildings with pictures by country",
      "sparql": "\n\n#defaultView:ImageGrid\nSELECT ?building ?buildingLabel ?country ?countryLabel ?picture\nWHERE\n{\n  ?building wdt:P31 wd:Q7138926 .\n  ?building wdt:P18 ?picture .\n  OPTIONAL { ?building wdt:P17 ?country } . #if available\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en\" .\n  }\n}\nORDER BY ?countryLabel\nLIMIT 188\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of parliament buildings with pictures by country",
      "description": "* Items used: \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.The number of existing translations for diseases in Wikidata",
      "namespace": "wikidata-examples",
      "name": "The number of existing translations for diseases in Wikidata",
      "sparql": "\n\nSELECT ?disease ?doid ?enLabel (count(?language) as ?languages)\nWHERE\n{\n  ?disease wdt:P699 ?doid ;\n             rdfs:label ?label ;\n             rdfs:label ?enLabel .\n    FILTER (lang(?enLabel) = \"en\")\n\n    BIND (lang(?label) AS ?language)\n}\nGROUP BY ?disease ?doid ?enLabel\nORDER BY desc(?languages)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "The number of existing translations for diseases in Wikidata",
      "description": "==\nItems used:"
    },
    {
      "query_id": "wikidata-examples.<translate><!--T:196--> A network of Drug-disease interactions on infectious diseases (Source: Disease Ontology, NDF-RT and ChEMBL)</translate>",
      "namespace": "wikidata-examples",
      "name": "<translate><!--T:196--> A network of Drug-disease interactions on infectious diseases (Source: Disease Ontology, NDF-RT and ChEMBL)</translate>",
      "sparql": "\n#defaultView:Graph\nSELECT DISTINCT ?item ?itemLabel ?rgb ?link\nWHERE\n{\n  VALUES ?toggle { true false }\n  ?disease wdt:P699 ?doid;\n           wdt:P279+ wd:Q18123741;\n           wdt:P2176 ?drug.\n  ?drug rdfs:label ?drugLabel.\n    FILTER(LANG(?drugLabel) = \"en\").\n  ?disease rdfs:label ?diseaseLabel.\n    FILTER(LANG(?diseaseLabel) = \"en\").\n  BIND(IF(?toggle,?disease,?drug) AS ?item).\n  BIND(IF(?toggle,?diseaseLabel,?drugLabel) AS ?itemLabel).\n  BIND(IF(?toggle,\"FFA500\",\"7FFF00\") AS ?rgb).\n  BIND(IF(?toggle,\"\",?disease) AS ?link).\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "<translate><!--T:196--> A network of Drug-disease interactions on infectious diseases (Source: Disease Ontology, NDF-RT and ChEMBL)</translate>",
      "description": "=====  A network of Drug-disease interactions on infectious diseases (Source: Disease Ontology, NDF-RT and ChEMBL) ====="
    },
    {
      "query_id": "wikidata-examples.The number of Wikidata items on Diseases and the percentage of those with a pointer to the Disease Ontology",
      "namespace": "wikidata-examples",
      "name": "The number of Wikidata items on Diseases and the percentage of those with a pointer to the Disease Ontology",
      "sparql": "\n\nSELECT (COUNT(?disease) AS ?total) (SUM(?ref) AS ?byDO) (100*?byDO/?total AS ?percent)\nWHERE\n{\n  {?disease wdt:P31 wd:Q12136 }\n  UNION\n  {?disease wdt:P279 wd:Q12136 .}\n  OPTIONAL {\n    ?disease p:P699 ?statement.\n    BIND(1 AS ?ref).\n  }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "The number of Wikidata items on Diseases and the percentage of those with a pointer to the Disease Ontology",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Infectious diseases with their human minimum and maximum incubation time (in days)",
      "namespace": "wikidata-examples",
      "name": "Infectious diseases with their human minimum and maximum incubation time (in days)",
      "sparql": "\n\nSELECT ?DiseaseLabel ((?min / 86400) AS ?Minimal_Incubation_Time) ((?max / 86400) AS ?Maximum_Incubation_Time)\nWHERE {\n  ?Disease wdt:P31/wdt:P279* wd:Q18123741 .\n  ?Disease p:P3488/psn:P3488/wikibase:quantityAmount ?min .\n  ?Disease p:P3487/psn:P3487/wikibase:quantityAmount ?max\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE]\". }\n}\nORDER BY ?DiseaseLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Infectious diseases with their human minimum and maximum incubation time (in days)",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Genes",
      "namespace": "wikidata-examples",
      "name": "Genes",
      "sparql": "\nSELECT DISTINCT ?item ?ncbi_gene ?date_modified\nWHERE\n{\n  ?item wdt:P351 ?ncbi_gene ;\n          wdt:P703 wd:Q15978631 ;\n          schema:dateModified ?date_modified .\n    BIND (now() - ?date_modified as ?date_range)\n    FILTER (?date_range < 8)\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Genes",
      "description": "=====  Human genes updated this week ====="
    },
    {
      "query_id": "wikidata-examples.Human genes updated this week",
      "namespace": "wikidata-examples",
      "name": "Human genes updated this week",
      "sparql": "\nSELECT DISTINCT ?item ?ncbi_gene ?date_modified\nWHERE\n{\n  ?item wdt:P351 ?ncbi_gene ;\n          wdt:P703 wd:Q15978631 ;\n          schema:dateModified ?date_modified .\n    BIND (now() - ?date_modified as ?date_range)\n    FILTER (?date_range < 8)\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Human genes updated this week",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Counts of gene-variant types sourced from the CIViC database",
      "namespace": "wikidata-examples",
      "name": "Counts of gene-variant types sourced from the CIViC database",
      "sparql": "\n#defaultView:BarChart\nSELECT ?variant_typeLabel (count(?variant_typeLabel) as ?counts)\nWHERE\n{\n  ?item wdt:P3329 ?civic_id ;\n          wdt:P31 ?variant_type .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\nGROUP BY ?variant_typeLabel\nORDER BY ?counts\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Counts of gene-variant types sourced from the CIViC database",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Which variant of which gene predicts a positive prognosis in colorectal cancer",
      "namespace": "wikidata-examples",
      "name": "Which variant of which gene predicts a positive prognosis in colorectal cancer",
      "sparql": "\nSELECT ?geneLabel ?variantLabel\nWHERE\n{\n  VALUES ?disease {wd:Q188874}\n    ?variant wdt:P3358 ?disease ; # P3358 Positive prognostic predictor\n          wdt:P3433 ?gene . # P3433 biological variant of\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Which variant of which gene predicts a positive prognosis in colorectal cancer",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Variants that are associated with renal cell carcinoma",
      "namespace": "wikidata-examples",
      "name": "Variants that are associated with renal cell carcinoma",
      "sparql": "\n# variants that are associated with renal cell carcinoma\nSELECT DISTINCT ?civic_id ?item ?itemLabel\nWHERE\n{\n  VALUES ?property {\n                      wdt:P3356 # positive diagnostic predictor\n                      wdt:P3357 # negative diagnostic predictor\n                      wdt:P3358 # positive prognostic predicator\n                      wdt:P3359 # negative prognostic predictor\n                     }\n    ?item wdt:P3329 ?civic_id .\n    {?item ?property wd:Q1164529.} # wd:Q1164529 = renal cell carcinoma\n    UNION\n    {?item p:P3354 ?o . # positive therapeutic predictor\n     ?o pq:P2175 wd:Q1164529 .}\n    UNION\n    {?item p:P3354 ?o . # negative therapeutic predictor\n     ?o pq:P2175 wd:Q1164529 .}\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Variants that are associated with renal cell carcinoma",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.PubMed references in CIViCdb",
      "namespace": "wikidata-examples",
      "name": "PubMed references in CIViCdb",
      "sparql": "\n# variants that are associated with renal cell carcinoma\nSELECT DISTINCT ?reference ?referenceLabel ?pmid\nWHERE\n{\n  ?item wdt:P3329 ?civicId ;\n          ?property ?object .\n    ?object prov:wasDerivedFrom ?provenance .\n    ?provenance pr:P248 ?reference .\n    ?reference wdt:P31 wd:Q13442814 ;\n               wdt:P698 ?pmid .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "PubMed references in CIViCdb",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Variant counts by predictor type",
      "namespace": "wikidata-examples",
      "name": "Variant counts by predictor type",
      "sparql": "\n#defaultView:BubbleChart\nSELECT ?propertyLabel (count(?prognostic_type) as ?counts)\nWHERE\n{\n  VALUES ?prognostic_type {wdt:P3354 wdt:P3355 wdt:P3356 wdt:P3357 wdt:P3358 wdt:P3359}\n    ?item wdt:P3329 ?civic_id ;\n          ?prognostic_type ?prognostic_value .\n    ?property wikibase:directClaim ?prognostic_type .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\nGROUP BY ?propertyLabel ?prognostic_typeLabel\nORDER BY ?counts\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Variant counts by predictor type",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Proteins",
      "namespace": "wikidata-examples",
      "name": "Proteins",
      "sparql": "\nSELECT ?item ?itemLabel ?uniprotid ?tax_node\nWHERE\n{\n  ?item wdt:P352 ?uniprotid ;\n          wdt:P703 wd:Q15978631 .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Proteins",
      "description": "=====  Get Wikidata - UniprotId mappings for homo sapiens ====="
    },
    {
      "query_id": "wikidata-examples.Get Wikidata - UniprotId mappings for homo sapiens",
      "namespace": "wikidata-examples",
      "name": "Get Wikidata - UniprotId mappings for homo sapiens",
      "sparql": "\nSELECT ?item ?itemLabel ?uniprotid ?tax_node\nWHERE\n{\n  ?item wdt:P352 ?uniprotid ;\n          wdt:P703 wd:Q15978631 .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Get Wikidata - UniprotId mappings for homo sapiens",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Metabolites and the species where they are found in",
      "namespace": "wikidata-examples",
      "name": "Metabolites and the species where they are found in",
      "sparql": "\nPREFIX pr: <http://www.wikidata.org/prop/reference/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX prov: <http://www.w3.org/ns/prov#>\n\nSELECT ?compound ?compoundLabel ?speciesLabel ?sourceLabel ?doi ?wpid WHERE {\n  ?compound wdt:P31 wd:Q11173.\n  MINUS { ?compound wdt:P31 wd:Q8054. }\n  ?compound p:P703 ?statement.\n  ?statement rdf:type wikibase:BestRank.\n  ?statement ps:P703 ?species.\n  OPTIONAL {\n    ?statement (prov:wasDerivedFrom/pr:P248) ?source.\n    OPTIONAL { ?source wdt:P2410 ?wpid. }\n    OPTIONAL { ?source wdt:P356 ?doi. }\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nORDER BY ASC(?compound)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Metabolites and the species where they are found in",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Metabolite-metabolite interactions (mostly conversions) and their pKa change (federated query)",
      "namespace": "wikidata-examples",
      "name": "Metabolite-metabolite interactions (mostly conversions) and their pKa change (federated query)",
      "sparql": "\n#defaultView:Dimensions\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wp: <http://vocabularies.wikipathways.org/wp#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nSELECT DISTINCT ?wpid ?metaboliteLabel ?pKa ?pKa2 ?metabolite2Label ?wpid2\nWITH {\n  SELECT ?wpid ?source_pathway ?metabolite ?pKa ?pKa2 ?metabolite2 ?wpid2\n  WHERE {\n    # VALUES ?wpid { \"WP550\" }\n    ?pathway wdt:P2410 ?wpid ;\n             wdt:P527 ?metabolite ;\n             wdt:P2888 ?source_pathway .\n    ?metabolite wdt:P1117 ?pKa .\n\n    SERVICE <http://sparql.wikipathways.org/sparql> {\n      ?wp_mb1 wp:bdbWikidata ?metabolite .\n      ?wp_mb1 dcterms:isPartOf ?interaction .\n      ?interaction rdf:type wp:Interaction .\n      ?wp_mb2 dcterms:isPartOf ?interaction .\n      ?wp_mb2 wp:bdbWikidata ?metabolite2 .\n      FILTER (?wp_mb1 != ?wp_mb2)\n    }\n  }\n} AS %result\nWHERE {\n  INCLUDE %result\n  ?metabolite2 wdt:P1117 ?pKa2 .\n  ?pathway2 wdt:P2410 ?wpid2 ;\n             wdt:P527 ?metabolite2 ;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Metabolite-metabolite interactions (mostly conversions) and their pKa change (federated query)",
      "description": "==\nFederated query using the WikiPathways SPARQL endpoint to retrieve interaction information.\nThe dimensions plot show the pKa changes during metabolite-metabolite interaction. It must\nbe noted here that many very basic or very acidic are reported in pathways as the uncharged\nstructure, whereas in normal biological pathways these compounds are charged and then have\nquite different pKa charges."
    },
    {
      "query_id": "wikidata-examples.Taxon",
      "namespace": "wikidata-examples",
      "name": "Taxon",
      "sparql": "\n#defaultView:Graph\nPREFIX gas: <http://www.bigdata.com/rdf/gas#>\n\nSELECT ?item ?itemLabel ?pic ?linkTo\nWHERE\n{\n  SERVICE gas:service {\n    gas:program gas:gasClass \"com.bigdata.rdf.graph.analytics.SSSP\" ;\n                gas:in wd:Q1968598;\n                gas:traversalDirection \"Reverse\" ;\n                gas:out ?item ;\n                gas:out1 ?depth ;\n                gas:maxIterations 3 ;\n                gas:linkType wdt:P171 .\n  }\n  OPTIONAL { ?item wdt:P171 ?linkTo }\n  OPTIONAL { ?item wdt:P18 ?pic }\n  SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Taxon",
      "description": "=====  Asterophryinae parent taxon reverse graph ====="
    },
    {
      "query_id": "wikidata-examples.Asterophryinae parent taxon reverse graph",
      "namespace": "wikidata-examples",
      "name": "Asterophryinae parent taxon reverse graph",
      "sparql": "\n#defaultView:Graph\nPREFIX gas: <http://www.bigdata.com/rdf/gas#>\n\nSELECT ?item ?itemLabel ?pic ?linkTo\nWHERE\n{\n  SERVICE gas:service {\n    gas:program gas:gasClass \"com.bigdata.rdf.graph.analytics.SSSP\" ;\n                gas:in wd:Q1968598;\n                gas:traversalDirection \"Reverse\" ;\n                gas:out ?item ;\n                gas:out1 ?depth ;\n                gas:maxIterations 3 ;\n                gas:linkType wdt:P171 .\n  }\n  OPTIONAL { ?item wdt:P171 ?linkTo }\n  OPTIONAL { ?item wdt:P18 ?pic }\n  SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Asterophryinae parent taxon reverse graph",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.All human pathways from Wikipathways",
      "namespace": "wikidata-examples",
      "name": "All human pathways from Wikipathways",
      "sparql": "\nSELECT ?pathway ?pathwayLabel ?wpid WHERE {\n   ?pathway wdt:P2410 ?wpid ;\n            wdt:P703 wd:Q15978631 .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All human pathways from Wikipathways",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Biomarkers in Wikidata which interact with proteins in human pathways from Wikipathways",
      "namespace": "wikidata-examples",
      "name": "Biomarkers in Wikidata which interact with proteins in human pathways from Wikipathways",
      "sparql": "\nprefix void:  <http://rdfs.org/ns/void#>\nprefix pav:   <http://purl.org/pav/>\nprefix xsd:   <http://www.w3.org/2001/XMLSchema#>\nprefix freq:  <http://purl.org/cld/freq/>\nprefix biopax: <http://www.biopax.org/release/biopax-level3.owl#>\nprefix skos:  <http://www.w3.org/2004/02/skos/core#>\nprefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#>\nprefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nprefix gpml:  <http://vocabularies.wikipathways.org/gpml#>\nprefix wp:    <http://vocabularies.wikipathways.org/wp#>\nprefix dcterms: <http://purl.org/dc/terms/>\nprefix wprdf: <http://rdf.wikipathways.org/>\nprefix prov:  <http://www.w3.org/ns/prov#>\nprefix foaf:  <http://xmlns.com/foaf/0.1/>\nprefix dc:    <http://purl.org/dc/elements/1.1/>\n\nSELECT DISTINCT ?biomarkerLabel ?proteinLabel ?geneID ?WP_gene ?PathwayID ?PathwayName #results that are displayed.\nWHERE {\n  VALUES ?biomarker {wd:Q420633 wd:Q27125809 wd:Q422462} #you can add more biomarkers here if needed, separated by a space.\n  ?biomarker wdt:P31 wd:Q11173. #Stating that all biomarkers have to be \"instance of\" \"chemical compound\" (you could ommit this, but query will probably take longer).\n  ?biomarker wdt:P638 ?pdbID . #Checking if a biomarker has a Protein Databank ID (PDB) -> meaning the metabolite can interact with a protein.\n  ?protein wdt:P31 wd:Q8054 . #Stating that all proteins are \"instance of\" \"protein\"\n  ?protein wdt:P638 ?pdbID . #Checking which proteins have a PDB ID, which we queried previously in relationship to the biomarkers.\n  ?protein wdt:P702 ?gene . #Connecting the protein to a gene (\"encoded by\" relationship) -> to get an identifier we can use later in federated WikiPathways query.\n  ?gene wdt:P703 wd:Q15978631 . #Now removing all genes that are not found in species \"Homo sapiens\". -> This info is not always available for proteins in WikiData.\n  ?gene wdt:P2888 ?geneID . #Getting the \"exact match\" identifier for the gene, related to the protein, related to the biomarker.\n\n  ##The IRI from Wikidata starts with http:// , where the one from WikiPathways starts with https:// , so we need to rewrite the IRI\n    BIND(                      # Bind the created IRI into a new variable (called ?newIRI)\n        IRI(                   # Convert the string back to an IRI\n          CONCAT(              # Concatenate item 1 and 2 together as one string\n               \"https\",        # First item to concat (more items can be added with a comma\n              #Second item to concat:\n               SUBSTR(         # Obtain a substring\n                 STR(?geneID), # Convert the geneID IRI from Wikidata to a string,\n                 5)            # removing the first 5 characters (<http)\n        )) AS ?newIRI          # Name for the new variable\n    )\n\n  SERVICE <http://sparql.wikipathways.org/sparql> { #Connecting to the WikiPathways SPARQL endpoint.\n     ?WP_pathway a wp:Pathway . #Stating a ?WP_pathway is indeed a pathway in the WikiPathways RDF .\n     ?WP_pathway wp:organismName \"Homo sapiens\" . #Removing all PWs not for species Homo sapiens.\n     ?WP_pathway dc:identifier ?PathwayID . #Query the identifier of the pathway in WPs.\n     ?WP_pathway dc:title ?PathwayName . #Obtaining the name of the pathway.\n\n     ?WP_gene a wp:Protein . #Stating that a ?WP_gene is a Protein DataNode (you could ommit this, to also get all DataNodes modeled as GeneProducts out, but query will take longer).\n     ?WP_gene wp:bdbEntrezGene ?newIRI . #Connecting the previously queried \"exact match\" from WikiData to the NCBI/Entrez Gene ID in WPs.\n     ?WP_gene dcterms:isPartOf ?WP_pathway . #Connecting the WP_gene to the WP_pathway.\n\n   }\n OPTIONAL {?biomarker rdfs:label ?biomarkerLabel. #Create a label (aka name) for the biomarkers in WikiData, without using the service query.\nFILTER(LANG(?biomarkerLabel) = \"en\").\n}\n   OPTIONAL {?protein rdfs:label ?proteinLabel. #Create a label(aka name) for the proteins in WikiData, without using the service query.\nFILTER(LANG(?proteinLabel) = \"en\").\n}\n\n}\nORDER BY DESC (?biomarkerLabel) #Order results for biomarkers\n\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Biomarkers in Wikidata which interact with proteins in human pathways from Wikipathways",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Ranking of most cited work in WikiPathways",
      "namespace": "wikidata-examples",
      "name": "Ranking of most cited work in WikiPathways",
      "sparql": "\nSELECT ?citation ?citationLabel (count(?pathway) as ?times_cited) WHERE {\n  ?pathway wdt:P2410 ?WikiPathwaysID ;\n           wdt:P2860 ?citation .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n  }\nGROUP BY ?pathway ?citation ?citationLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Ranking of most cited work in WikiPathways",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Gene and metabolite counts per pathway",
      "namespace": "wikidata-examples",
      "name": "Gene and metabolite counts per pathway",
      "sparql": "\n#Gene and metabolite counts per path\n#defaultView:ScatterChart\nSELECT ?path ?genes ?metabolites ?pathway WHERE {\n  {SELECT DISTINCT ?path (COUNT(?pwPart) AS ?genes) WHERE {\n      ?path wdt:P2410 ?WikipathsID.\n      ?path wdt:P527 ?pwPart.\n      ?pwPart wdt:P31 wd:Q7187.\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n    }\n    GROUP BY ?path ?genes\n  }\n  {SELECT DISTINCT ?path (COUNT(?pwPart) AS ?metabolites) WHERE {\n      ?path wdt:P2410 ?WikipathsID.\n      ?path wdt:P527 ?pwPart.\n      ?pwPart wdt:P31 wd:Q11173.\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n    }\n    GROUP BY ?path ?metabolites\n  }\n  OPTIONAL { ?path rdfs:label ?pathway. }\n}\nORDER BY DESC(?genes)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Gene and metabolite counts per pathway",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Biological pathways with protein structures in the PDB database",
      "namespace": "wikidata-examples",
      "name": "Biological pathways with protein structures in the PDB database",
      "sparql": "\nSELECT ?pathway ?pathwayLabel ?WikiPathways ?Reactome (COUNT(DISTINCT ?protein) as ?count) WHERE {\n  VALUES ?pathwayType { wd:Q4915012 wd:Q2996394 }\n  ?pathway wdt:P31 ?pathwayType .\n  { ?pathway wdt:P527/wdt:P688 ?protein . } UNION { ?pathway wdt:P527 ?protein . }\n  ?protein wdt:P638 ?PDBID .\n  OPTIONAL { ?pathway wdt:P2410 ?WikiPathways }\n  OPTIONAL { ?pathway wdt:P3937 ?Reactome }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} GROUP BY ?pathway ?pathwayLabel ?WikiPathways ?Reactome\n  ORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Biological pathways with protein structures in the PDB database",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.<translate><!--T:445--> Get known variants reported in <tvar name=q1>{{Q|Q27612411}}</tvar> of genes reported in a Wikipathways pathway: <tvar name=q2>{{Q|Q30230812}}</tvar></translate>",
      "namespace": "wikidata-examples",
      "name": "<translate><!--T:445--> Get known variants reported in <tvar name=q1>{{Q|Q27612411}}</tvar> of genes reported in a Wikipathways pathway: <tvar name=q2>{{Q|Q30230812}}</tvar></translate>",
      "sparql": "SELECT DISTINCT ?pathway ?pathwayLabel ?pwpart ?pwpartLabel ?variant ?variantLabel ?disease?diseaseLabel WHERE {\n\n   VALUES ?predictor {p:P3354 p:P3355 p:P3356 p:P3357 p:P3358 p:P3359}\n   VALUES ?predictorQualifier {pq:P2175}\n   VALUES ?wpID {\"WP2828\"}\n\n   ?pathway wdt:P2410 ?wpID ; # Pathways has a Wikipathways identifier\n          wdt:P527 ?pwpart . # which contains pathways parts\n\n   ?disease wdt:P279+ wd:Q504775 . # The disease is a subclass of urinary bladder cancer\n                                   # based on annotations in the Disease ontology\n   ?variant wdt:P3329 ?civicID ; # a variant known in CIViC\n             ?predictor ?node ; # has a predicting relation with diseases\n                                   # labeled as being a subclass of urinary bladder cancer\n             wdt:P3433 ?pwpart . # variant is biological variant of\n\n   {?node ?predictorStatement ?drug_label ;\n              ?predictorQualifier ?disease .}\n   UNION\n   {\n      ?node ?predictorStatement ?disease .\n   }\n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "<translate><!--T:445--> Get known variants reported in <tvar name=q1>{{Q|Q27612411}}</tvar> of genes reported in a Wikipathways pathway: <tvar name=q2>{{Q|Q30230812}}</tvar></translate>",
      "description": "=====  Get known variants reported in <tvar name=q1></tvar> of genes reported in a Wikipathways pathway: <tvar name=q2></tvar> ====="
    },
    {
      "query_id": "wikidata-examples.Known interaction types in Wikipathways for a pathway with Identifier WP716 (federated query)",
      "namespace": "wikidata-examples",
      "name": "Known interaction types in Wikipathways for a pathway with Identifier WP716 (federated query)",
      "sparql": "PREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX wp: <http://vocabularies.wikipathways.org/wp#>\nSELECT DISTINCT ?interaction_type WHERE {\n  VALUES ?wpid {\"WP716\"}\n  ?item wdt:P2410 ?wpid ;\n        wdt:P2888 ?source_pathway .\n\n  SERVICE <http://sparql.wikipathways.org/sparql> {\n     ?wp_pathway dc:identifier ?source_pathway .\n     ?s dcterms:isPartOf ?wp_pathway, ?interaction .\n     ?interaction rdf:type wp:Interaction .\n     ?interaction rdf:type ?interaction_type .\n     ?interaction wp:participants ?participants .\n  }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Known interaction types in Wikipathways for a pathway with Identifier WP716 (federated query)",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Local annotations from Wikipathways using Federated query on a Pathway with identifier WP716 (federated query)",
      "namespace": "wikidata-examples",
      "name": "Local annotations from Wikipathways using Federated query on a Pathway with identifier WP716 (federated query)",
      "sparql": "PREFIX dcterms: <http://purl.org/dc/terms/>\nPREFIX wp: <http://vocabularies.wikipathways.org/wp#>\nSELECT DISTINCT ?item ?pw_annotation WHERE {\n  VALUES ?wpid {\"WP716\"}\n  ?item wdt:P2410 ?wpid ;\n        wdt:P2888 ?source_pathway .\n\n  SERVICE <http://sparql.wikipathways.org/sparql> {\n     ?wp_pathway dc:identifier ?source_pathway .\n     ?wp_pathway wp:ontologyTag ?pw_annotation .\n     # ?pw_annotation rdfs:label ?annotation_label .\n   }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Local annotations from Wikipathways using Federated query on a Pathway with identifier WP716 (federated query)",
      "description": "=="
    },
    {
      "query_id": "wikidata-examples.Find drugs for cancers that target genes related to cell proliferation",
      "namespace": "wikidata-examples",
      "name": "Find drugs for cancers that target genes related to cell proliferation",
      "sparql": "\n#cases where a drug physically interacts with the product of gene known to be genetically associated a disease\n#these cases may show opportunities to repurpose a drug for a new disease\n#See http://database.oxfordjournals.org/content/2016/baw083.long and\n#http://drug-repurposing.nationwidechildrens.org/search\n#an example that was recently validated involved a new link between Metformin wd:Q19484 and cancer survival\n#https://jamia.oxfordjournals.org/content/22/1/179\n#currently set up to find drugs for cancers that target genes related to cell proliferation\n#adapt by changing constraints (e.g. to 'heart disease' Q190805) or removing them\nSELECT ?drugLabel ?geneLabel ?biological_processLabel ?diseaseLabel\nWHERE {\n  ?drug wdt:P129 ?gene_product . # drug interacts with a gene_product\n  ?gene wdt:P688 ?gene_product . # gene_product (usually a protein) is a product of a gene (a region of DNA)\n  ?disease wdt:P2293 ?gene .     # genetic association between disease and gene\n  ?disease wdt:P279* wd:Q12078 . # limit to cancers wd:Q12078 (the * operator runs up a transitive relation..)\n  ?gene_product wdt:P682 ?biological_process . #add information about the GO biological processes that the gene is related to\n\n   ?biological_process (wdt:P361",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Find drugs for cancers that target genes related to cell proliferation",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Taxons and what they are named after",
      "namespace": "wikidata-examples",
      "name": "Taxons and what they are named after",
      "sparql": "\n\nSELECT ?taxon ?eponym ?taxonName ?eponymLabel\nWHERE\n{\n  ?taxon wdt:P31 wd:Q16521;\n         wdt:P225 ?taxonName;\n         wdt:P138 ?eponym.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nORDER BY ?eponym\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Taxons and what they are named after",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Biologists with Twitter accounts",
      "namespace": "wikidata-examples",
      "name": "Biologists with Twitter accounts",
      "sparql": "SELECT DISTINCT ?personLabel (CONCAT(\"https://twitter.com/\",?twitterName) AS ?twitterlink) ?pic\nWHERE {\n  ?person wdt:P2002 ?twitterName ;\n    wdt:P106 ?occupation .\n  OPTIONAL { ?person wdt:P18 ?pic . }\n  ?occupation wdt:P279* wd:Q864503 . # all subclasses of biologists\n   SERVICE wikibase:label {\n     bd:serviceParam wikibase:language \"en\"\n   }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Biologists with Twitter accounts",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Cell lines with names that could also be URLs (Internet of Cell Lines).",
      "namespace": "wikidata-examples",
      "name": "Cell lines with names that could also be URLs (Internet of Cell Lines).",
      "sparql": "SELECT * WHERE {\n  {\n    SELECT ?cell_line ?cell_line_name WHERE {\n      ?cell_line wdt:P31 wd:Q21014462;\n                 rdfs:label ?cell_line_name.\n          FILTER(LANG(?cell_line_name) = \"en\").\n          Filter REGEX(STR(?cell_line_name), \"^[\\\\w\\\\-\\\\.]+\\\\.[A-z]+$\")\n    }\n  }\n  ?tld wdt:P31/wdt:P279* wd:Q14296;\n       rdfs:label ?tld_name.\n  FILTER(LANG(?tld_name) = \"en\").\n  FILTER REGEX(STR(?cell_line_name), CONCAT(REPLACE(?tld_name, \"\\\\.\", \"\\\\\\\\.\"), \"$\"), \"i\")\n  BIND(URI(CONCAT(\"http://\", ?cell_line_name)) as ?url)\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Cell lines with names that could also be URLs (Internet of Cell Lines).",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.List of pharmaceutical drugs with picture",
      "namespace": "wikidata-examples",
      "name": "List of pharmaceutical drugs with picture",
      "sparql": "\n\nSELECT ?moleculeLabel ?formule ?picture ?molecule\nWHERE\n{\n  ?molecule wdt:P31 wd:Q12140 ;\n            wdt:P274 ?formule ;\n            wdt:P117 ?picture\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en, de\" . }\n}\nORDER BY ?moleculeLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of pharmaceutical drugs with picture",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Organisms that are located in the female urogential tract and that have a gene with product indole",
      "namespace": "wikidata-examples",
      "name": "Organisms that are located in the female urogential tract and that have a gene with product indole",
      "sparql": "\n\nSELECT ?organism_name\nWHERE\n{\n  ?organism_item wdt:P2974 wd:Q5880 ;\n                 rdfs:label ?organism_name .\n  ?gene wdt:P703 ?organism_item ;\n        wdt:P1056 wd:Q319541 .\n  FILTER (LANG(?organism_name) = \"en\") .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Organisms that are located in the female urogential tract and that have a gene with product indole",
      "description": "* Items used:  \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Threatened Species of Animals as per IUCN Classification",
      "namespace": "wikidata-examples",
      "name": "Threatened Species of Animals as per IUCN Classification",
      "sparql": "#title: Animals which are Threatened as per IUCN Red List\n# https://en.wikipedia.org/wiki/Conservation_status\n# Common names are in English only\n\nSELECT ?animal ?scientific_names ?common_names ?statusLabel where\n{\n  # hint:Prior hint:runLast true\n   {\n      SELECT DISTINCT ?animal (GROUP_CONCAT(DISTINCT ?scientific_name; separator=\", \") as ?scientific_names) (GROUP_CONCAT(DISTINCT ?common_name; separator=\", \") as ?common_names) WHERE\n      {\n\n        ?animal wdt:P141 ?status;\n                wdt:P225 ?scientific_name;\n                wdt:P1843 ?common_name.\n        filter( ?status\n           IN (\n               wd:Q11394,  #Endangered\n               wd:Q219127, #critcally endangered\n               wd:Q278113  #vulnurable\n              )\n          ).\n\n        # Only return common names in English\n        FILTER(LANGMATCHES(LANG(?common_name), \"en\"))\n      }\n      GROUP BY ?animal\n   }.\n   ?animal wdt:P141 ?status.\n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Threatened Species of Animals as per IUCN Classification",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.List of computer files formats",
      "namespace": "wikidata-examples",
      "name": "List of computer files formats",
      "sparql": "\n\nSELECT DISTINCT ?idExtension ?extension ?mediaType ?idExtensionLabel\nWHERE\n{\n  ?idExtension wdt:P31 wd:Q235557 ;\n               wdt:P1195 ?extension .\n  OPTIONAL { ?idExtension wdt:P1163 ?mediaType }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nORDER BY ?extension ?mediaType\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of computer files formats",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.List of W3C standards",
      "namespace": "wikidata-examples",
      "name": "List of W3C standards",
      "sparql": "\n\nSELECT DISTINCT ?standard ?standardLabel ?website\nWHERE\n{\n        ?standard wdt:P1462 wd:Q37033 .\n        OPTIONAL{ ?standard wdt:P856 ?website }\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nORDER BY ?standardLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of W3C standards",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Oldest software",
      "namespace": "wikidata-examples",
      "name": "Oldest software",
      "sparql": "SELECT ?software ?softwareLabel ?date (ROUND((NOW() - ?date)/365.2425) AS ?age)\n{\n  ?software wdt:P31/wdt:P139* wd:Q7397.\n  OPTIONAL { ?software wdt:P571 ?date. }\n  OPTIONAL { ?software p:P348/pq:P577 ?date. }\n  FILTER(BOUND(?date)).\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nORDER BY ?date\nLIMIT 10\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Oldest software",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Software applications ranked in descending order by the number of writable file formats",
      "namespace": "wikidata-examples",
      "name": "Software applications ranked in descending order by the number of writable file formats",
      "sparql": "#defaultView:BubbleChart\n#title:Software applications ranked in descending order by the number of writable file formats\nSELECT ?app ?appLabel (COUNT(?format) AS ?count)\nWHERE {\n  ?app (p:P31/ps:P31/wdt:P279) wd:Q7397 .\n  ?app wdt:P1072 ?format .\n\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en\" .\n\n}\n  }\n\nGROUP BY ?app ?appLabel\nORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Software applications ranked in descending order by the number of writable file formats",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Return a bubble chart of mediatypes by count of file formats",
      "namespace": "wikidata-examples",
      "name": "Return a bubble chart of mediatypes by count of file formats",
      "sparql": "SELECT DISTINCT ?mediaType (COUNT (?ff) as ?count)\nWHERE\n{\n  ?ff wdt:P31/wdt:P279* wd:Q235557.\n  ?ff wdt:P1163 ?mediaType.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n\nGROUP BY ?mediaType\nORDER BY DESC (?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Return a bubble chart of mediatypes by count of file formats",
      "description": "==== Return a bubble chart of mediatypes by count of file formats===="
    },
    {
      "query_id": "wikidata-examples.All pKa data in Wikidata and the source titles",
      "namespace": "wikidata-examples",
      "name": "All pKa data in Wikidata and the source titles",
      "sparql": "\n\nSELECT ?compound ?compoundLabel ?pKa ?source ?sourceLabel ?doi\nWHERE\n{\n  ?compound wdt:P31 wd:Q11173 ; p:P1117 ?statement .\n  ?statement rdf:type wikibase:BestRank ;\n    ps:P1117 ?pKa .\n  OPTIONAL {\n    ?statement prov:wasDerivedFrom/pr:P248 ?source .\n    OPTIONAL { ?source wdt:P356 ?doi . }\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } #English label\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All pKa data in Wikidata and the source titles",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.All CAS registry numbers in Wikidata",
      "namespace": "wikidata-examples",
      "name": "All CAS registry numbers in Wikidata",
      "sparql": "\n\nSELECT DISTINCT ?compound ?compoundLabel ?cas\nWHERE\n{\n  ?compound wdt:P231 ?cas .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All CAS registry numbers in Wikidata",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Chemical compounds in Wikidata sharing the same CAS registry number",
      "namespace": "wikidata-examples",
      "name": "Chemical compounds in Wikidata sharing the same CAS registry number",
      "sparql": "\n\n#two chemical compounds with the same CAS registry number\nSELECT DISTINCT ?cas ?compound1 ?compound1Label ?compound2 ?compound2Label WHERE {\n  ?compound1 wdt:P231 ?cas .\n  ?compound2 wdt:P231 ?cas .\n  FILTER (?compound1 != ?compound2)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Chemical compounds in Wikidata sharing the same CAS registry number",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.The number of Chemical compounds in Wikidata sharing the same CAS registry number",
      "namespace": "wikidata-examples",
      "name": "The number of Chemical compounds in Wikidata sharing the same CAS registry number",
      "sparql": "\n\n#The number of times a cas registry number is shared by distinct Wikidata items\nSELECT ?cas ?items\nWHERE\n{\n  {SELECT DISTINCT ?cas (count(?compound) as ?items) WHERE {\n      ?compound wdt:P231 ?cas .\n  }\n    GROUP BY ?cas }\n    FILTER (?items >1)\n}\nORDER BY desc(?items)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "The number of Chemical compounds in Wikidata sharing the same CAS registry number",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Awarded Chemistry Nobel Prizes",
      "namespace": "wikidata-examples",
      "name": "Awarded Chemistry Nobel Prizes",
      "sparql": "\n\n#defaultView:Timeline\nSELECT DISTINCT ?item ?itemLabel ?when (YEAR(?when) as ?date) ?pic\nWHERE {\n  ?item p:P166 ?awardStat . # \u2026 with an awarded(P166) statement\n  ?awardStat ps:P166 wd:Q44585 . # \u2026 that has the value Nobel Prize in Chemistry (Q44585)\n  ?awardStat pq:P585 ?when . # when did they receive the Nobel prize\n\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . }\nOPTIONAL { ?item wdt:P18 ?pic }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Awarded Chemistry Nobel Prizes",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Images of organic acids",
      "namespace": "wikidata-examples",
      "name": "Images of organic acids",
      "sparql": "\n#defaultView:ImageGrid\nSELECT ?compound ?compoundLabel ?image WHERE {\n  ?compound wdt:P279+",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Images of organic acids",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Boiling points of alkanes",
      "namespace": "wikidata-examples",
      "name": "Boiling points of alkanes",
      "sparql": "\nSELECT DISTINCT ?comp ?compLabel ?formula ?bp ?bpUnit ?bpUnitLabel WHERE {\n  ?comp wdt:P31/wdt:P279* wd:Q41581 ;\n        wdt:P274 ?formula ;\n        p:P2102 [\n          ps:P2102 ?bp ;\n          psv:P2102/wikibase:quantityUnit ?bpUnit\n        ] .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} ORDER BY DESC(?bpUnit) ASC(?bp)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Boiling points of alkanes",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Solubilities of chemicals",
      "namespace": "wikidata-examples",
      "name": "Solubilities of chemicals",
      "sparql": "\n\nSELECT DISTINCT ?chemical ?chemicalLabel ?value ?units ?unitsLabel ?solvent ?solventLabel ?temperature ?temperatureUnit ?temperatureUnitLabel ?source ?sourceLabel ?doi\nWITH {\n  SELECT DISTINCT ?chemical ?value ?units ?source ?doi ?solvent ?temperature ?temperatureUnit WHERE {\n    ?chemical ?propp ?statement .\n    ?statement a wikibase:BestRank ;\n      ?proppsv [\n        wikibase:quantityAmount ?value ;\n        wikibase:quantityUnit ?units\n      ] .\n    OPTIONAL {\n      ?statement prov:wasDerivedFrom/pr:P248 ?source .\n      OPTIONAL { ?source wdt:P356 ?doi . }\n    }\n    ?property wikibase:claim ?propp ;\n            wikibase:statementValue ?proppsv ;\n            wdt:P1629 wd:Q170731 ;\n            wdt:P31 wd:Q21077852 .\n    OPTIONAL {\n      ?statement pqv:P2076 ?temperatureNode .\n      ?temperatureNode wikibase:quantityAmount ?temperature ;\n                       wikibase:quantityUnit ?temperatureUnit .\n    }\n    OPTIONAL {\n      wd:P2178 wikibase:qualifier ?qualifierS .\n      ?qualifierS a owl:ObjectProperty .\n      ?statement ?qualifierS ?solvent .\n    }\n  } GROUP BY ?chemical ?value ?units ?temperature ?temperatureUnit ?solvent ?source ?doi\n} AS %result\nWHERE {\n  INCLUDE %result\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY ASC(?propEntityLabel)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Solubilities of chemicals",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.<translate><!--T:244--> Who discovered the most asteroids?</translate>",
      "namespace": "wikidata-examples",
      "name": "<translate><!--T:244--> Who discovered the most asteroids?</translate>",
      "sparql": "\nSELECT ?discoverer ?discovererLabel ?count\nWITH {\n  SELECT ?discoverer (COUNT(?asteroid) AS ?count)\n  WHERE {\n    ?asteroid wdt:P31 wd:Q3863;\n      wdt:P61 ?discoverer .\n  }\n  GROUP BY ?discoverer\n  ORDER BY DESC(?count)\n  LIMIT 20\n} AS %i\nWHERE {\n  INCLUDE %i\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" . }\n}\nORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "<translate><!--T:244--> Who discovered the most asteroids?</translate>",
      "description": "====  Who discovered the most asteroids? ===="
    },
    {
      "query_id": "wikidata-examples.<translate><!--T:245--> Who discovered the most planets? (with list)</translate>",
      "namespace": "wikidata-examples",
      "name": "<translate><!--T:245--> Who discovered the most planets? (with list)</translate>",
      "sparql": "\nSELECT\n  ?discoverer ?discovererLabel\n  (COUNT(DISTINCT ?planet) as ?count)\n  (GROUP_CONCAT(DISTINCT(?planetLabel); separator=\", \") as ?planets)\nWHERE\n{\n  ?ppart wdt:P279* wd:Q634 .\n  ?planet wdt:P31 ?ppart .\n  ?planet wdt:P61 ?discoverer .\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en\" .\n    ?discoverer rdfs:label ?discovererLabel .\n    ?planet rdfs:label ?planetLabel\n  }\n}\nGROUP BY ?discoverer ?discovererLabel\nORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "<translate><!--T:245--> Who discovered the most planets? (with list)</translate>",
      "description": "====  Who discovered the most planets? (with list) ===="
    },
    {
      "query_id": "wikidata-examples.List of space probes with pictures",
      "namespace": "wikidata-examples",
      "name": "List of space probes with pictures",
      "sparql": "\n\n#defaultView:ImageGrid\nSELECT ?spaceProbeLabel ?date ?picture\nWHERE\n{\n  ?spaceProbe wdt:P31 wd:Q26529;\n        wdt:P18 ?picture;\n        wdt:P619 ?date . #mandatory\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"fr,en\" .\n  }\n}\nORDER BY ?date\nLIMIT 88\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of space probes with pictures",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Number of scientists per gender",
      "namespace": "wikidata-examples",
      "name": "Number of scientists per gender",
      "sparql": "\nSELECT ?gender (count(DISTINCT ?human) as ?number)\nWHERE\n{\n  ?human wdt:P31 wd:Q5 ;\n         wdt:P21 ?gender ;\n         wdt:P106/wdt:P279* wd:Q901 .\n}\nGROUP BY ?gender\nLIMIT 10\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Number of scientists per gender",
      "description": "* Items used: , \n* Properties used: , , ,"
    },
    {
      "query_id": "wikidata-examples.Most eponymous mathematicians",
      "namespace": "wikidata-examples",
      "name": "Most eponymous mathematicians",
      "sparql": "\n\nSELECT ?eponym ?eponymLabel ?count ?sample ?sampleLabel\nWHERE\n{\n  {\n  SELECT ?eponym (COUNT(?item) as ?count) (SAMPLE(?item) AS ?sample)\n  WHERE\n  {\n    ?item wdt:P138 ?eponym.\n    ?eponym wdt:P106 wd:Q170790.\n  }\n  GROUP BY ?eponym\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Most eponymous mathematicians",
      "description": "* Items used: \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Authors of scientific articles by occupation",
      "namespace": "wikidata-examples",
      "name": "Authors of scientific articles by occupation",
      "sparql": "\n\n#defaultView:BubbleChart\nSELECT ?occupationLabel (count(DISTINCT ?author) as ?count)\nWHERE\n{\n        ?object wdt:P31 wd:Q13442814 ;\n                wdt:P50 ?author .\n        ?author wdt:P106 ?occupation .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en,fr\" }\n}\nGROUP BY ?occupationLabel\nORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Authors of scientific articles by occupation",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Authors of scientific articles who received a Nobel prize",
      "namespace": "wikidata-examples",
      "name": "Authors of scientific articles who received a Nobel prize",
      "sparql": "#added in 2016-10\n\n#Authors of scientific articles who received a Nobel prize\nSELECT ?item ?itemLabel ?person ?personLabel ?_image ?award ?awardLabel\nWHERE {\n  ?person wdt:P166 ?award ; #person received an award\n          wdt:P31 wd:Q5 . #person is instance of human\n  ?award wdt:P31/wdt:P279* wd:Q7191 . #award is a Nobel Prize\n  ?item wdt:P50 ?person ; #person is an author of item\n        wdt:P31 wd:Q13442814 . #item is a scientific article\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n\nOPTIONAL { ?person wdt:P18 ?_image. } #Wikimedia Commons has an image of person\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Authors of scientific articles who received a Nobel prize",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Using VALUES for extracting scientific articles of specific authors",
      "namespace": "wikidata-examples",
      "name": "Using VALUES for extracting scientific articles of specific authors",
      "sparql": "SELECT ?entity ?entityLabel ?authorLabel WHERE {\n  VALUES ?author {wd:Q18016466} #initialize \"?author with the Wikidata item \"Lydia Pintscher\"\n  ?entity wdt:P31 wd:Q13442814. #filter by scientific articles\n  ?entity wdt:P50 ?author.\n SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Using VALUES for extracting scientific articles of specific authors",
      "description": "* Items used:  \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Female scientists with most number of sitelinks (but not English Wikipedia)",
      "namespace": "wikidata-examples",
      "name": "Female scientists with most number of sitelinks (but not English Wikipedia)",
      "sparql": "\n#Female scientists with most number of sitelinks (but not English Wikipedia)\n#PREFIX schema: <http://schema.org/>\n\nSELECT ?item ?itemLabel ?linkcount WHERE {\n    ?item wdt:P31 wd:Q5 .\n    ?item wdt:P21 wd:Q6581072 .\n    ?item wdt:P106 wd:Q901 .\n    ?item wikibase:sitelinks ?linkcount .\n  FILTER (?linkcount >= 1) . # only include items with 1 or more sitelinks\n  FILTER NOT EXISTS {\n    ?article schema:about ?item .\n    ?article schema:inLanguage \"en\" .\n    ?article schema:isPartOf <https://en.wikipedia.org/>\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en,de,es,ar,fr\" }\n}\nGROUP BY ?item ?itemLabel ?linkcount\nORDER BY DESC(?linkcount)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Female scientists with most number of sitelinks (but not English Wikipedia)",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Inventors killed by their own invention",
      "namespace": "wikidata-examples",
      "name": "Inventors killed by their own invention",
      "sparql": "\nSELECT ?inventor ?inventorLabel ?gadget ?gadgetLabel WHERE {\n  ?inventor wdt:P157 ?gadget.\n  ?gadget wdt:P61 ?inventor.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Inventors killed by their own invention",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Most cited female authors",
      "namespace": "wikidata-examples",
      "name": "Most cited female authors",
      "sparql": "#added 2016-12\n##defaultView:BubbleChart\nSELECT ?author ?authorLabel (COUNT(?publication) AS ?count)\nWHERE\n{\n    ?item wdt:P2860 ?publication . #citations\n    ?publication wdt:P50 ?author . #authors\n    ?author wdt:P21 wd:Q6581072. #females\n    SERVICE wikibase:label {\n        bd:serviceParam wikibase:language \"en\" .\n    }\n}\nGROUP BY ?author ?authorLabel\nORDER BY DESC(?count)",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Most cited female authors",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.<translate><!--T:268--> Scientists who have worked together but whose Erdos numbers don\u2019t reflect that</translate>",
      "namespace": "wikidata-examples",
      "name": "<translate><!--T:268--> Scientists who have worked together but whose Erdos numbers don\u2019t reflect that</translate>",
      "sparql": "\n\n# Finds authors who have published scientific articles together,\n# but whose Erdos numbers are more than one apart.\n# These would appear to violate the definition of the Erdos number.\n\nSELECT\n  # Q#s\n  ?paper\n  ?author1\n  ?author2\n  # title (either from title statement or label)\n  (IF(BOUND(?title), ?title, ?paperLabel) AS ?title)\n  # author labels (should be names) and their Erdos numbers\n  ?author1Label\n  ?erdos1\n  ?author2Label\n  ?erdos2\n  # distance between Erdos numbers\n  ?distance\nWHERE\n{\n  # paper, instance of or subclass of scientific article; also has two authors\n  ?paper wdt:P31/wdt:P279* wd:Q13442814;\n           wdt:P50 ?author1, ?author2.\n  # if it has a title, we\u2019ll grab that as well, but it\u2019s also okay if there\u2019s no title\n  OPTIONAL { ?paper wdt:P1476 ?title. }\n  # grab Erdos numbers of the two authors\n  ?author1 wdt:P2021 ?erdos1.\n  ?author2 wdt:P2021 ?erdos2.\n  # introduce a new variable for the difference of the Erdos numbers\n  BIND(?erdos2 - ?erdos1 AS ?distance).\n  # select those cases where the distance is > 1\n  # (note: by *not* taking the absolute value of the distance, we avoid getting duplicated cases because the author variables might be swapped)\n  FILTER(?distance > 1).\n  # get *Label variables automagically\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n# sort by distance first (descending), then by first author, then by second author\nORDER BY DESC(?distance) ?author1Label ?author2Label\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "<translate><!--T:268--> Scientists who have worked together but whose Erdos numbers don\u2019t reflect that</translate>",
      "description": "====  Scientists who have worked together but whose Erdos numbers don\u2019t reflect that ===="
    },
    {
      "query_id": "wikidata-examples.Map of institutions where Canadian citizens got their PhD",
      "namespace": "wikidata-examples",
      "name": "Map of institutions where Canadian citizens got their PhD",
      "sparql": "\n#defaultView:Map\nSELECT DISTINCT ?institution ?institutionLabel ?academics ?academicsLabel ?degree ?degreeLabel ?geoloc ?image WHERE {\n  ?academics wdt:P31 wd:Q5 ; # instances (P31) of humans (Q5)\n             wdt:P27 wd:Q16 ; # country of citizenship\n             p:P69 ?statement . # check for an \"educated at\" (P69) statement\n  OPTIONAL { ?academics wdt:P18 ?image }. #image\n\n  ?statement ps:P69 ?institution . # get value of the \"educated at\" statement, i.e. the institution\n  ?institution wdt:P625 ?geoloc . # get the geolocation of the institution\n\n  ?statement pq:P512 ?degree . # get qualifier \"academic degree\" (P512)\n  ?degree wdt:P31/wdt:P279* wd:Q849697 . # filter for doctoral degrees\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Map of institutions where Canadian citizens got their PhD",
      "description": "thumb| Map of institutions where Canadian citizens got their PhD - screenshot of the query results as of 2018-08-01."
    },
    {
      "query_id": "wikidata-examples.The number of statements by DOI",
      "namespace": "wikidata-examples",
      "name": "The number of statements by DOI",
      "sparql": "SELECT ?doi (COUNT (?entry) as ?entries)\n{\n  ?entry ?p ?statement .\n  ?statement prov:wasDerivedFrom/pr:P248/wdt:P356 ?doi .\n}\nGROUP BY ?doi\nORDER BY DESC(?entries)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "The number of statements by DOI",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.number of statements backed by a reference with a DOI",
      "namespace": "wikidata-examples",
      "name": "number of statements backed by a reference with a DOI",
      "sparql": "\n\nSELECT (COUNT (?statement) as ?statements)\nWHERE\n{\n  ?entry ?p ?statement .\n  ?statement prov:wasDerivedFrom/\n       <http://www.wikidata.org/prop/reference/P248>/\n       wdt:P356 ?doi .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "number of statements backed by a reference with a DOI",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Statements originating from a specific DOI",
      "namespace": "wikidata-examples",
      "name": "Statements originating from a specific DOI",
      "sparql": "\n\nSELECT ?entryRes ?entry ?statement\nWHERE\n{\n  ?entryRes ?p ?statement ;\n    rdfs:label ?entry .\n  ?statement prov:wasDerivedFrom/\n       <http://www.wikidata.org/prop/reference/P248>/\n       wdt:P356 \"10.1021/JA01577A030\" .\n   FILTER(lang(?entry) = \"en\")\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Statements originating from a specific DOI",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.<translate><!--T:262--> Translations of the Disease Ontology term DOID:399 (Tuberculosis)</translate>",
      "namespace": "wikidata-examples",
      "name": "<translate><!--T:262--> Translations of the Disease Ontology term DOID:399 (Tuberculosis)</translate>",
      "sparql": "SELECT ?English ?language ?label WHERE {\n  ?disease wdt:P699 \"DOID:399\";\n             rdfs:label ?English;\n             rdfs:label ?label .\n  BIND(LANG(?label) as ?languageCode)\n  ?wdLanguage wdt:P424 ?languageCode;\n              rdfs:label ?language .\n    FILTER EXISTS {?wdLanguage wdt:P31?/wdt:P279+ wd:Q17376908}\n  FILTER (LANG(?English)=\"en\")\n  FILTER (LANG(?language)=\"en\")\n} ORDER BY ?language\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "<translate><!--T:262--> Translations of the Disease Ontology term DOID:399 (Tuberculosis)</translate>",
      "description": "====  Translations of the Disease Ontology term DOID:399 (Tuberculosis) ====\n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Library and Information Science journals",
      "namespace": "wikidata-examples",
      "name": "Library and Information Science journals",
      "sparql": "\n\nSELECT DISTINCT ?journal ?name WHERE {\n    ?journal wdt:P31 wd:Q5633421 . # is scientific journal\n    {\n            { ?journal wdt:P921 wd:Q199655 }   # with topic library science\n      UNION { ?journal wdt:P921 wd:Q16387 }    # and/or topic information science\n      UNION { ?journal wdt:P921 wd:Q13420675 } # and/or topic library and information science\n    }\n    SERVICE wikibase:label {\n        bd:serviceParam wikibase:language \"en\" .\n        ?journal rdfs:label ?name .\n    }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Library and Information Science journals",
      "description": "* items used:     \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Most popular subjects of scientific articles",
      "namespace": "wikidata-examples",
      "name": "Most popular subjects of scientific articles",
      "sparql": "\n#title:Most popular subjects of scientific articles\nSELECT (count(?work) as ?count) ?subject ?subjectLabel where {\n  ?work wdt:P31 wd:Q13442814;\n        wdt:P921 ?subject .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nGROUP BY ?subject ?subjectLabel\nORDER BY desc(?count)\nLIMIT 200\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Most popular subjects of scientific articles",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Galaxies ordered by the ones that are most linked from scientific articles",
      "namespace": "wikidata-examples",
      "name": "Galaxies ordered by the ones that are most linked from scientific articles",
      "sparql": "\n#title:Galaxies ordered by the ones that are most linked from scientific articles\n#author: So9q\n#date:2021-10-27\n#note:I deliberately choose a smaller subgraph (galaxies) to prevent a timeout on WDQS\nSELECT ?main_subject ?main_subjectLabel (count(?item) as ?c)\nWHERE\n{\n  ?item wdt:P31 wd:Q13442814;\n        wdt:P921 ?main_subject.\n  ?main_subject wdt:P31/wdt:P279* wd:Q318.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nGROUP BY ?main_subject ?main_subjectLabel\nORDER BY DESC(?c)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Galaxies ordered by the ones that are most linked from scientific articles",
      "description": "====  Galaxies ordered by the ones that are most linked from scientific articles===="
    },
    {
      "query_id": "wikidata-examples.Scientific journals with editors on Twitter",
      "namespace": "wikidata-examples",
      "name": "Scientific journals with editors on Twitter",
      "sparql": "\nSELECT ?journal ?journalLabel ?editor ?editorLabel ?twitter ?ex_publisher ?ex_publisherLabel\nWITH {\n  SELECT ?journal ?editor ?twitter (SAMPLE(?publisher) AS ?ex_publisher) WHERE {\n    ?journal wdt:P31 wd:Q5633421 ; wdt:P98 ?editor .\n    OPTIONAL { ?journal wdt:P123 ?publisher }\n    ?editor wdt:P2002 ?twitter .\n  } GROUP BY ?journal ?editor ?twitter\n} AS %result\nWHERE {\n  INCLUDE %result\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} ORDER BY ?journalLabel",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Scientific journals with editors on Twitter",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Mathematical proofs",
      "namespace": "wikidata-examples",
      "name": "Mathematical proofs",
      "sparql": "\n\nSELECT ?proof ?proofLabel\nWHERE\n{\n  ?proof wdt:P31 wd:Q11538.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Mathematical proofs",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Timeline of death of mathematicans and their theorems",
      "namespace": "wikidata-examples",
      "name": "Timeline of death of mathematicans and their theorems",
      "sparql": "\n#defaultView:Timeline\nSELECT\n  ?genderLabel\n  ?theorem\n  ?theoremLabel\n  ?nameLabel\n  ?death\n  ?formula\nWHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en,de,pl\". }\n  ?theorem wdt:P31 wd:Q65943;\n           wdt:P138 ?name.\n  ?name    wdt:P570 ?death;\n           wdt:P21 ?gender .\n  # OPTIONAL{\n  ?theorem wdt:P2534 ?formula.\n  # }\n}\nORDER BY DESC(?death)\nLIMIT 100\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Timeline of death of mathematicans and their theorems",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Databases listed in Wikidata and if available applicable licenses",
      "namespace": "wikidata-examples",
      "name": "Databases listed in Wikidata and if available applicable licenses",
      "sparql": "\n\nSELECT DISTINCT *\nWHERE\n{\n  ?item wdt:P31 wd:Q8513 ;\n    rdfs:label ?name .\n  OPTIONAL { ?item wdt:P275 ?licenseItem .\n      ?licenseItem rdfs:label ?license .\n      FILTER (LANG(?license) = \"en\")}\n  FILTER (LANG(?name) = \"en\")\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Databases listed in Wikidata and if available applicable licenses",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Fictional universes with most fictional planets",
      "namespace": "wikidata-examples",
      "name": "Fictional universes with most fictional planets",
      "sparql": "\n\nSELECT ?universe (SAMPLE(?label) AS ?label) (COUNT(?planet) AS ?count)\nWHERE\n{\n  ?planet wdt:P31 wd:Q2775969;\n          wdt:P1080 ?universe.\n  ?universe rdfs:label ?label.\n  FILTER(LANG(?label) = \"en\").\n}\nGROUP BY ?universe\nORDER BY DESC(?count)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Fictional universes with most fictional planets",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Objects with most mass",
      "namespace": "wikidata-examples",
      "name": "Objects with most mass",
      "sparql": "\nSELECT ?object ?objectLabel ?mass WHERE {\n  {\n    SELECT ?object (MAX(?mass) AS ?mass) WHERE {\n      ?object p:P2067/psn:P2067/wikibase:quantityAmount ?mass.\n      MINUS { ?object wdt:P31 wd:Q3647172. }\n    }\n    GROUP BY ?object\n    ORDER BY DESC(?mass)\n    LIMIT 100\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nORDER BY DESC(?mass)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Objects with most mass",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Biological databases listed in Wikidata and, if available, applicable licenses",
      "namespace": "wikidata-examples",
      "name": "Biological databases listed in Wikidata and, if available, applicable licenses",
      "sparql": "SELECT ?item ?itemLabel ?url ?licence ?licenceLabel\nWHERE {\n  ?item wdt:P31 wd:Q4117139.\n  OPTIONAL { ?item wdt:P856 ?url }\n  OPTIONAL { ?item wdt:P275 ?licence }\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n} ORDER BY ?itemLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Biological databases listed in Wikidata and, if available, applicable licenses",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.American universities founded before the states they reside in were created",
      "namespace": "wikidata-examples",
      "name": "American universities founded before the states they reside in were created",
      "sparql": "SELECT ?uLabel ?founded ?stateLabel ?stateStart\nWHERE {\n  ?u wdt:P31/wdt:P279* wd:Q3918 ;\n       wdt:P131+ ?state ;\n       wdt:P571 ?founded .\n  ?state wdt:P31 wd:Q35657 ;\n           wdt:P571 ?stateStart .\n  FILTER (?founded < ?stateStart) .\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n  }\n}\nLIMIT 10\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "American universities founded before the states they reside in were created",
      "description": "* Items used: . \n* Properties used: , , , ,"
    },
    {
      "query_id": "wikidata-examples.Universities ranked by PageRank on English Wikipedia (federated query)",
      "namespace": "wikidata-examples",
      "name": "Universities ranked by PageRank on English Wikipedia (federated query)",
      "sparql": "PREFIX vrank:<http://purl.org/voc/vrank#>\n\nSELECT DISTINCT ?uni ?uniLabel ?pr WHERE {\n  ?uni wdt:P31/wdt:P279* wd:Q3918.\n  SERVICE <http://dbpedia.org/sparql> {\n    ?uni vrank:hasRank/vrank:rankValue ?pr\n  }\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n  }\n} ORDER BY DESC(?pr) LIMIT 50\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Universities ranked by PageRank on English Wikipedia (federated query)",
      "description": "* Items used: \n* Properties used: ,"
    },
    {
      "query_id": "wikidata-examples.List of presidents with causes of death",
      "namespace": "wikidata-examples",
      "name": "List of presidents with causes of death",
      "sparql": "SELECT ?h ?hLabel ?cause ?causeLabel (YEAR(?date) AS ?year) WHERE {\n?h wdt:P39 wd:Q11696;\n   wdt:P509 ?cause;\n   wdt:P570 ?date\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} ORDER BY ?year\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of presidents with causes of death",
      "description": "*  Items used: \n*  Properties used: ,"
    },
    {
      "query_id": "wikidata-examples.Presidents and their causes of death ranking",
      "namespace": "wikidata-examples",
      "name": "Presidents and their causes of death ranking",
      "sparql": "\n\n#defaultView:BubbleChart\nSELECT ?cid ?cause (count(*) as ?count)\nWHERE\n{\n  ?pid wdt:P39 wd:Q11696 .\n  ?pid wdt:P509 ?cid .\n  OPTIONAL {\n    ?cid rdfs:label ?cause FILTER (lang(?cause) = \"en\") .\n  }\n}\nGROUP BY ?cid ?cause\nORDER BY DESC(?count) ASC(?cause)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Presidents and their causes of death ranking",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Politicians who died of cancer (of any type)",
      "namespace": "wikidata-examples",
      "name": "Politicians who died of cancer (of any type)",
      "sparql": "\nSELECT ?politician ?cause ?politician_label ?cause_of_death_label\nWHERE\n{\n  ?politician wdt:P106 wd:Q82955 .    # find items that have \"occupation (P106): politician (Q82955)\"\n  ?politician wdt:P509 ?cause .       # with a P509 (cause of death) claim\n  ?cause wdt:P279* wd:Q12078 .        # ... where the cause is a subclass of (P279*) cancer (Q12078)\n  # ?politician wdt:P39 wd:Q11696 .   # Uncomment this line to include only U.S. Presidents\n\n  OPTIONAL {?politician rdfs:label ?politician_label FILTER (lang(?politician_label) = \"en\") .}\n  OPTIONAL {?cause rdfs:label ?cause_of_death_label FILTER (lang(?cause_of_death_label) = \"en\").}\n}\nORDER BY ASC (?politician)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Politicians who died of cancer (of any type)",
      "description": "* Items used: , \n* Properties used: , ,"
    },
    {
      "query_id": "wikidata-examples.List of popes",
      "namespace": "wikidata-examples",
      "name": "List of popes",
      "sparql": "\n\nSELECT ?link ?linkLabel ?picture ?age\nWHERE\n{\n  ?link wdt:P31 wd:Q5 ;\n          p:P39 [ ps:P39 wd:Q19546 ; pq:P580 ?startTime ] .\n  OPTIONAL { ?link wdt:P569 ?dateOfBirth }\n  OPTIONAL { ?link wdt:P18 ?picture }\n  OPTIONAL { ?link wdt:P570 ?dateOfDeath }\n  BIND(YEAR(?dateOfDeath) - YEAR(?dateOfBirth) as ?age)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],fr,en\" }\n}\nORDER BY DESC(?startTime)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of popes",
      "description": "*  Items used:  \n*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.List of countries in 1754",
      "namespace": "wikidata-examples",
      "name": "List of countries in 1754",
      "sparql": "#updated 2020-12-06\nSELECT DISTINCT ?h ?hLabel ?inception ?dissolved ?coor\nWHERE\n{\n  VALUES ?countryclass { wd:Q3024240 wd:Q6256 wd:Q3624078 }\n  ?h p:P31/ps:P31 ?countryclass .\n  ?h wdt:P571 ?inception .\n  OPTIONAL { ?h wdt:P576 ?dissolved } .\n  FILTER (?inception < \"1755-01-01T00:00:00Z\"^^xsd:dateTime)\n  FILTER (?dissolved >= \"1755-01-01T00:00:00Z\"^^xsd:dateTime {{!}}{{!}} !Bound(?dissolved) )\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n  OPTIONAL { ?h wdt:P625 ?coor } .\n}\nORDER BY ?inception\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of countries in 1754",
      "description": "*  Items used:  ( country),  ( former country),  ( sovereign state)\n*  Properties used: , ,"
    },
    {
      "query_id": "wikidata-examples.Population in Europe after 1960",
      "namespace": "wikidata-examples",
      "name": "Population in Europe after 1960",
      "sparql": "\n\nSELECT ?objectLabel (YEAR(?date) as ?year)\n       ?population (?objectLabel as ?Location)\nWHERE\n{\n        wd:Q458 wdt:P150 ?object . # European Union contains administrative territorial entity\n        ?object p:P1082 ?populationStatement .\n        ?populationStatement ps:P1082 ?population ;\n                             pq:P585 ?date .\n        SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n  FILTER (YEAR(?date) >= 1960)\n}\nORDER BY ?objectLabel ?year\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Population in Europe after 1960",
      "description": "*  Items used: \n*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.List of suicide attacks",
      "namespace": "wikidata-examples",
      "name": "List of suicide attacks",
      "sparql": "\n\nSELECT ?h ?hLabel ?location (CONCAT(\"injured: \",str(?injured)) as ?injuredl) (concat(\"dead: \",str(?dead)) as ?deadl) ?date ?image\nWHERE\n{\n        ?h wdt:P31 ?attack.\n    values (?attack) {\n      (wd:Q18493502)\n      (wd:Q217327)\n\n\n    }\n    OPTIONAL { ?h wdt:P1339 ?injured . }\n    OPTIONAL { ?h wdt:P1120 ?dead. }\n    OPTIONAL { ?h wdt:P276?/wdt:P625 ?location }\n    OPTIONAL { ?h wdt:P585 ?date }\n    OPTIONAL { ?h wdt:P18 ?image }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of suicide attacks",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.<translate><!--T:353--> People elevated in the public domain in 2020 \"life+50 years\"</translate>",
      "namespace": "wikidata-examples",
      "name": "<translate><!--T:353--> People elevated in the public domain in 2020 \"life+50 years\"</translate>",
      "sparql": "#added before 2019-02\n\n#Shows people raised in the public domain \"life + 50 years\".\nSELECT ?item ?itemLabel ?genderLabel (GROUP_CONCAT(DISTINCT ?occupationLabel; SEPARATOR=\", \") AS ?occupations) (GROUP_CONCAT(DISTINCT ?countryLabel; SEPARATOR=\", \") AS ?countries) ?death ?articles {\n  VALUES ?target_country { wd:Q16 wd:Q142 wd:Q39 wd:Q31 wd:Q30 } . #countries: Canada, France, Switzerland, Belgium, USA. Removing this line to get worldwide may cause a query timeout.\n  VALUES ?occ { wd:Q2500638 wd:Q20826540 wd:Q215627 } . #occupation: creator, erudite, person. These 3 occupations will also look for subclasses. Example: Alan Turing is a cryptographer, a subclass of cryptologist, a subclass of mathematician, a subclass of scientist, a subclass of erudite.\n   ?item wdt:P31 wd:Q5;\n               wdt:P21 ?gender;\n               wdt:P27 ?target_country;\n               wdt:P27 ?country;\n               wdt:P106/wdt:P279* ?occ ;\n               wdt:P106 ?occupation;\n               wikibase:sitelinks ?articles . #Service to count the number of articles in Wikipedia language versions. The higher the number, the greater the chances that the person is very notorious.\n   ?item wdt:P570 ?death . hint:Prior hint:rangeSafe true .\n   FILTER( ?death >= \"1969-01-01T00:00:00\"^^xsd:dateTime && ?death < \"1970-01-01T00:00:00\"^^xsd:dateTime ) #death: public domain \"life+50 years\". Change both years to get a list in different legislation. Example for USA: life+70 years\n   SERVICE wikibase:label {\n       bd:serviceParam wikibase:language \"fr,en\" . #Service to retrieve the labels of items, in order of language. Example: if the label does not exist in French, the service will take the English label\n       ?item rdfs:label ?itemLabel .\n       ?gender rdfs:label ?genderLabel .\n       ?occupation rdfs:label ?occupationLabel .\n       ?country rdfs:label ?countryLabel .\n   } .\n} GROUP BY ?item ?itemLabel ?genderLabel ?death ?articles ORDER BY DESC (?articles) #Order by the number of articles in Wikipedia language versions. The most notorious people will be at the top of the list.\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "<translate><!--T:353--> People elevated in the public domain in 2020 \"life+50 years\"</translate>",
      "description": "===  People elevated in the public domain in 2020 \"life+50 years\" ==="
    },
    {
      "query_id": "wikidata-examples.People who were stateless for some time",
      "namespace": "wikidata-examples",
      "name": "People who were stateless for some time",
      "sparql": "\n# persons who were stateless (country of citizenship: no value) for some time (start time and end time qualifiers)\nSELECT ?person ?personLabel ?start ?end WHERE {\n  ?person wdt:P31 wd:Q5;\n          p:P27 [\n            rdf:type wdno:P27;\n            pq:P580 ?start;\n            pq:P582 ?end\n          ].\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY DESC(?end - ?start)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "People who were stateless for some time",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Poets who were through An Lushan Rebellion",
      "namespace": "wikidata-examples",
      "name": "Poets who were through An Lushan Rebellion",
      "sparql": "\n# Poets who were through An Lushan Rebellion\nSELECT ?poet ?poetLabel WHERE {\n SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],zh-hant,zh\". }\n wd:Q253774 wdt:P580 ?battleStartTime.\n wd:Q253774 wdt:P582 ?battleEndTime.\n ?poet wdt:P106 wd:Q49757.\n ?poet wdt:P497 ?cbdbId.\n ?poet wdt:P569 ?birthDate.\n  FILTER(?birthDate < ?battleStartTime).\n  ?poet wdt:P570 ?deathDate.\n  FILTER(?deathDate > ?battleEndTime).\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Poets who were through An Lushan Rebellion",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Periods of Japanese history and what they were named after",
      "namespace": "wikidata-examples",
      "name": "Periods of Japanese history and what they were named after",
      "sparql": "SELECT ?era ?eraLabel (YEAR(?start_time) AS ?start) (YEAR(?end_time) AS ?end) ?namedLabel ?namedDescription WHERE {\n?era wdt:P31 wd:Q11514315; wdt:P361 wd:Q130436; # eras of the history of Japan\n  wdt:P580 ?start_time.\nMINUS { ?era wdt:P2348/wdt:P361 wd:Q130436 } # exclude sub-eras\nOPTIONAL { ?era wdt:P582 ?end_time } # optional end-time to make sure we include the current era\nOPTIONAL { ?era wdt:P138 ?named }\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n} ORDER BY ?start DESC(?end)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Periods of Japanese history and what they were named after",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Ancestors of Willem-Alexander of the Netherlands",
      "namespace": "wikidata-examples",
      "name": "Ancestors of Willem-Alexander of the Netherlands",
      "sparql": "SELECT DISTINCT ?item ?itemLabel ?dateofbirth WHERE {\n  wd:Q154952 (wdt:P22",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Ancestors of Willem-Alexander of the Netherlands",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.All events that occured on 2001/09/11",
      "namespace": "wikidata-examples",
      "name": "All events that occured on 2001/09/11",
      "sparql": "SELECT ?item ?itemLabel\nWHERE\n{\n  ?item p:P585/ps:P585 \"2001-09-11T00:00:00Z\"^^xsd:dateTime\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All events that occured on 2001/09/11",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Everything with a time property on a given date",
      "namespace": "wikidata-examples",
      "name": "Everything with a time property on a given date",
      "sparql": "SELECT (GROUP_CONCAT(?classLabel; SEPARATOR = \"; \") AS ?classes) ?propLabel ?i ?iLabel ?iDescription WHERE {\n  {\n    SELECT ?i ?prop ?class WHERE {\n      {\n        SELECT ?prop ?p WHERE {\n          ?prop wikibase:directClaim ?p;\n            (wdt:P31/(wdt:P279*)) wd:Q18636219.\n        }\n      }\n      ?i ?p \"2001-5-11\"^^xsd:dateTime.\n      OPTIONAL { ?i wdt:P31 ?class }\n    }\n    LIMIT 1000\n  }\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n    ?class rdfs:label ?classLabel.\n    ?prop rdfs:label ?propLabel.\n    ?i rdfs:label ?iLabel;\n      schema:description ?iDescription.\n  }\n}\nGROUP BY ?propLabel ?i ?iLabel ?iDescription\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Everything with a time property on a given date",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Cathedrals in Paris",
      "namespace": "wikidata-examples",
      "name": "Cathedrals in Paris",
      "sparql": "\n\nSELECT ?item ?itemLabel ?placeLabel ?coords ?image\nWHERE\n{\n  ?item wdt:P31 wd:Q2977 .\n  ?item wdt:P131 ?place .\n  ?place wdt:P131 wd:Q90 .\n  OPTIONAL { ?item wdt:P625 ?coords . }\n  OPTIONAL { ?item wdt:P18 ?image . }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\" . }\n} ORDER BY ?placeLabel ?itemLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Cathedrals in Paris",
      "description": "* Items used:  \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Churches in church district Wittenberg",
      "namespace": "wikidata-examples",
      "name": "Churches in church district Wittenberg",
      "sparql": "\n#defaultView:Map{\"layer\": \"?pbLabel\"}\nSELECT ?item ?itemLabel ?pbLabel (SAMPLE(?cat) AS ?cat) (SAMPLE(?coord) AS ?coord) (SAMPLE(?img) AS ?img)\nWHERE {\n  wd:Q75849591 wdt:P527 [ wdt:P527 ?item; wdt:P361 ?pb ].\n  ?pb wdt:P31 wd:Q76598130.\n  ?item wdt:P625 ?coord.\n  OPTIONAL { ?item wdt:P373 ?cat. }\n  OPTIONAL { ?item wdt:P18 ?img. }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\n} GROUP BY ?item ?itemLabel ?pbLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Churches in church district Wittenberg",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Special church type \"Spitalkirche\" in Germany",
      "namespace": "wikidata-examples",
      "name": "Special church type \"Spitalkirche\" in Germany",
      "sparql": "\n#defaultView:Map\nSELECT ?pid ?name ?coord ?ort ?ortLabel\nWHERE\n{\n  ?pid wdt:P31 wd:Q16970.\n  ?pid rdfs:label ?name\n  FILTER((LANG(?name)) = \"de\")\n  FILTER(REGEX(STR(?name), \"[Ss]pitalkirche\")).\n  ?pid wdt:P131 ?ort.\n  ?pid wdt:P17 wd:Q183.\n  ?pid wdt:P625 ?coord.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de,en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Special church type \"Spitalkirche\" in Germany",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Museums in Brittany",
      "namespace": "wikidata-examples",
      "name": "Museums in Brittany",
      "sparql": "\nSELECT DISTINCT ?museumLabel ?museumDescription ?villeId ?villeIdLabel (?villeIdLabel AS ?ville) ?coord ?lat ?lon\nWHERE\n{\n  ?museum wdt:P539 ?museofile. # french museofile Id\n  ?museum wdt:P131* wd:Q12130. # in Brittany\n  ?museum wdt:P131 ?villeId. #city of the museum\n  # ?object wdt:P166 wd:Q2275045 # that have french label \"mus\u00e9es de France\"\n  OPTIONAL {?museum wdt:P856 ?link.} # official website\n  OPTIONAL {?museum wdt:P625 ?coord .} # geographic coord\n  OPTIONAL {\n    ?museum p:P625 ?statement.\n    ?statement psv:P625 ?node.\n    ?node wikibase:geoLatitude ?lat.\n    ?node wikibase:geoLongitude ?lon.\n   }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"fr\". } #french label\n}\nORDER BY ?villeIdLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Museums in Brittany",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.All museums in Barcelona with coordinates",
      "namespace": "wikidata-examples",
      "name": "All museums in Barcelona with coordinates",
      "sparql": "\n\n#All museums (including subclass of museum) in Barcelona with coordinates\nSELECT DISTINCT ?item ?name ?coord ?lat ?lon\nWHERE\n{\n hint:Query hint:optimizer \"None\" .\n ?item wdt:P131* wd:Q1492 .\n ?item wdt:P31/wdt:P279* wd:Q33506 .\n ?item wdt:P625 ?coord .\n ?item p:P625 ?coordinate .\n ?coordinate psv:P625 ?coordinate_node .\n ?coordinate_node wikibase:geoLatitude ?lat .\n ?coordinate_node wikibase:geoLongitude ?lon .\n SERVICE wikibase:label {\n bd:serviceParam wikibase:language \"ca\" .\n ?item rdfs:label ?name\n }\n}\nORDER BY ASC (?name)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All museums in Barcelona with coordinates",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.List of actors with pictures with year of birth and/or death",
      "namespace": "wikidata-examples",
      "name": "List of actors with pictures with year of birth and/or death",
      "sparql": "\n\n#defaultView:ImageGrid\nSELECT ?human ?humanLabel ?yob ?yod ?picture\nWHERE\n{\n  ?human wdt:P31 wd:Q5 ;\n         wdt:P106 wd:Q33999 .\n  ?human wdt:P18 ?picture .\n  OPTIONAL { ?human wdt:P569 ?dob . ?human wdt:P570 ?dod }.\n  BIND(YEAR(?dob) as ?yob) . #if available: year\n  BIND(YEAR(?dod) as ?yod) .\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en\" .\n  }\n}\nLIMIT 88\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of actors with pictures with year of birth and/or death",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Actors who played the same role more than 40 years apart",
      "namespace": "wikidata-examples",
      "name": "Actors who played the same role more than 40 years apart",
      "sparql": "SELECT DISTINCT ?actor ?actorLabel ?characterLabel ?movie1Label ?movie2Label WHERE {\n  ?movie1 p:P161 [\n            ps:P161 ?actor;\n            pq:P453 ?character\n          ];\n          wdt:P577 ?movie1Publication.\n  ?movie2 p:P161 [\n            ps:P161 ?actor;\n            pq:P453 ?character\n          ];\n          wdt:P577 ?movie2Publication.\n  MINUS{?movie1 wdt:P31/wdt:P279? wd:Q24856} # Not a series\n  MINUS{?movie2 wdt:P31/wdt:P279? wd:Q24856} # Not a series\n  FILTER(?character != wd:Q18086706). # Not as \"themselves\"\n  FILTER(?movie1Publication + \"P40Y\"^^xsd:duration < ?movie2Publication) # 40 years between them\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Actors who played the same role more than 40 years apart",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Films of directors by their English Wikipedia name",
      "namespace": "wikidata-examples",
      "name": "Films of directors by their English Wikipedia name",
      "sparql": "\nSELECT ?film ?filmLabel ?genere ?d WHERE {\n  {\n    SELECT ?film (GROUP_CONCAT(DISTINCT ?gL; SEPARATOR = \", \") AS ?genere) (MIN(YEAR(?date)) AS ?d) WHERE {\n      ?sitelink schema:about ?director;\n        schema:isPartOf <https://en.wikipedia.org/>;\n        schema:name \"Steven Spielberg\"@en. # Edit this with different director's name to see their films. Use the English Wikipedia title only.\n      ?film wdt:P31 wd:Q11424;\n        wdt:P136 ?g, ?g.\n      ?g rdfs:label ?gL.\n      ?film wdt:P57 ?director;\n        wdt:P577 ?date.\n      FILTER((LANG(?gL)) = \"en\")\n      SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n    }\n    GROUP BY ?film\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nORDER BY DESC (?d)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Films of directors by their English Wikipedia name",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Winner of the Academy Awards by Award and Time",
      "namespace": "wikidata-examples",
      "name": "Winner of the Academy Awards by Award and Time",
      "sparql": "SELECT DISTINCT ?item ?itemLabel ?awardLabel ?time\n{\n    ?item wdt:P106/wdt:P279* wd:Q3455803 ; # Items with the Occupation(P106) of Director(Q3455803) or a subclass(P279)\n          p:P166 ?awardStat .              # ... with an awarded(P166) statement\n    ?awardStat pq:P805 ?award ;            # Get the award (which is \"subject of\" XXth Academy Awards)\n               ps:P166 wd:Q103360 .        # ... that has the value Academy Award for Best Director(Q103360)\n    ?award wdt:P585 ?time .                # the \"point of time\" of the Academy Award\n    SERVICE wikibase:label {               # ... include the labels\n        bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\"\n    }\n}\nORDER BY DESC(?time)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Winner of the Academy Awards by Award and Time",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Academy award data",
      "namespace": "wikidata-examples",
      "name": "Academy award data",
      "sparql": "\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Academy award data",
      "description": "* items used:  \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.People that received both Academy Award and Nobel Prize",
      "namespace": "wikidata-examples",
      "name": "People that received both Academy Award and Nobel Prize",
      "sparql": "SELECT DISTINCT ?Person ?PersonLabel ?NobelPrizeLabel ?AcademyAwardLabel WHERE {\n  ?NobelPrize wdt:P279?/wdt:P31? wd:Q7191 .    # <- subtypes of nobel prize\n  ?AcademyAward wdt:P279?/wdt:P31? wd:Q19020 . # <- subtypes of academy award\n  ?Person wdt:P166? ?NobelPrize .              # <- people awarded a nobel prize\n  ?Person wdt:P166? ?AcademyAward .            # <- people awarded an academy award\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" .\n  }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "People that received both Academy Award and Nobel Prize",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Number of handed out Academy Awards per award type",
      "namespace": "wikidata-examples",
      "name": "Number of handed out Academy Awards per award type",
      "sparql": "\n\nSELECT ?awardCount ?award ?awardLabel WHERE {\n  {\n    SELECT (COUNT(?award) AS ?awardCount) ?award\n    WHERE\n    {\n      {\n        SELECT (SAMPLE(?human) AS ?human) ?award ?awardWork (SAMPLE(?director) AS ?director) (SAMPLE(?awardEdition) AS ?awardEdition) (SAMPLE(?time) AS ?time) WHERE {\n          ?award wdt:P31 wd:Q19020 .      # All items that are instance of(P31) of Academy awards (Q19020)\n          {\n            ?human p:P166 ?awardStat .              # Humans with an awarded(P166) statement\n            ?awardStat ps:P166 ?award .        # ... that has any of the values of ?award\n            ?awardStat pq:P805 ?awardEdition . # Get the award edition (which is \"subject of\" XXth Academy Awards)\n            ?awardStat pq:P1686 ?awardWork . # The work they have been awarded for\n            ?human wdt:P31 wd:Q5 .        # Humans\n          } UNION {\n            ?awardWork wdt:P31 wd:Q11424 . # Films\n            ?awardWork p:P166 ?awardStat . # ... with an awarded(P166) statement\n            ?awardStat ps:P166 ?award .        # ... that has any of the values of ?award\n            ?awardStat pq:P805 ?awardEdition . # Get the award edition (which is \"subject of\" XXth Academy Awards)\n          }\n          OPTIONAL {\n            ?awardEdition wdt:P585 ?time . # the \"point of time\" of the Academy Award\n            ?awardWork wdt:P57 ?director .\n          }\n        }\n        GROUP BY ?awardWork ?award # We only want every movie once for a category (a 'random' person is selected)\n      }\n    } GROUP BY ?award\n    ORDER BY ASC(?awardCount)\n  }\n  SERVICE wikibase:label { # ... include the labels\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" .\n  }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Number of handed out Academy Awards per award type",
      "description": "* Items used: , \n* Properties used: , , , ,"
    },
    {
      "query_id": "wikidata-examples.Film directors ranked by number of sitelinks multiplied by their number of films",
      "namespace": "wikidata-examples",
      "name": "Film directors ranked by number of sitelinks multiplied by their number of films",
      "sparql": "SELECT ?director ?director_label ?films ?sitelinks ((?films * ?sitelinks) as ?rank)\nWHERE {\n  {SELECT ?director (count(DISTINCT ?film) as ?films) (count(DISTINCT ?sitelink) as ?sitelinks)\n     WHERE {\n       ?director wdt:P106 wd:Q2526255 .         # has \"film director\" as occupation\n     ?film wdt:P57 ?director .            # get all films directed by the director\n       ?sitelink schema:about ?director .       # get all the sitelinks about the director\n       } GROUP BY ?director }\nSERVICE wikibase:label {\n  bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". # Get label if it exists\n?director rdfs:label ?director_label }\n} ORDER BY DESC(?rank)\nLIMIT 100\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Film directors ranked by number of sitelinks multiplied by their number of films",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.The Simpsons television series episodes list by season",
      "namespace": "wikidata-examples",
      "name": "The Simpsons television series episodes list by season",
      "sparql": "SELECT ?show ?showLabel ?seasonNumber ?episode ?episodeLabel\nWHERE {\n  BIND(wd:Q886 as ?show) .\n  ?season wdt:P179 ?show;\n          wdt:P527 ?episode;\n          p:P179 [pq:P1545 ?seasonNumber] .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\nORDER BY xsd:integer(?seasonNumber)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "The Simpsons television series episodes list by season",
      "description": "* Items used: \n* Properties used: ,"
    },
    {
      "query_id": "wikidata-examples.Law & Order episodes",
      "namespace": "wikidata-examples",
      "name": "Law & Order episodes",
      "sparql": "# All Law & Order episodes on Wikidata.\n# According to enwp, \u201c[a] total of 456 original episodes\u2026 aired before cancellation\u201d (https://en.wikipedia.org/wiki/List_of_Law_%26_Order_episodes).\n# As of this writing, the query returns 451 results, so some episodes are missing (either without item or lacking the necessary statements to match this query).\n\nSELECT (SAMPLE(?seasonNumber) AS ?seasonNumber) (SAMPLE(?episodeNumber) AS ?episodeNumber) (SAMPLE(?title) AS ?title) (MIN(?pubDate) AS ?pubDate) ?episode\n{\n  # All episodes should be instance of episode with series Law & Order.\n  ?episode wdt:P31 wd:Q21191270;\n           wdt:P179 wd:Q321423.\n  # Many of them also have the season as series, so we can get episode and season number from qualifiers there.\n  OPTIONAL {\n    ?episode p:P179 [\n      # the season also has series Law & Order\n      ps:P179/p:P179 [\n        ps:P179 wd:Q321423;\n                pq:P1545 ?seasonNumber\n      ] ;\n      pq:P1545 ?episodeNumber\n    ]\n  }\n  OPTIONAL { ?episode wdt:P1476 ?title. }\n  OPTIONAL { ?episode wdt:P577 ?pubDate. }\n}\nGROUP BY ?episode # make sure we return each episode only once \u2013 a few have multiple publication dates, for example\nORDER BY IF(BOUND(?seasonNumber), xsd:integer(?seasonNumber), 1000) xsd:integer(?episodeNumber) ?title\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Law & Order episodes",
      "description": "* Items used:  \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Main subjects of West Wing episodes",
      "namespace": "wikidata-examples",
      "name": "Main subjects of West Wing episodes",
      "sparql": "SELECT DISTINCT ?episode ?ordinal ?episodeLabel ?subject ?subjectLabel\nWHERE {\n  ?episode wdt:P31/wdt:P279* wd:Q1983062;\n           p:P179 ?statement.\n  OPTIONAL{ ?episode wdt:P921 ?subject }\n  ?statement ps:P179 wd:Q3577037;\n             pq:P1545 ?ordinal\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n} ORDER BY xsd:integer(?ordinal)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Main subjects of West Wing episodes",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Movies with Bud Spencer",
      "namespace": "wikidata-examples",
      "name": "Movies with Bud Spencer",
      "sparql": "SELECT ?item ?itemLabel (MIN(?date) AS ?firstReleased) ?_image\nWHERE {\n  ?item wdt:P161 wd:Q221074;\n        wdt:P577 ?date\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n  OPTIONAL { ?item wdt:P18 ?_image. }\n} GROUP BY ?item ?itemLabel ?_image\nORDER BY (?date)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Movies with Bud Spencer",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Contemporary Indian actresses",
      "namespace": "wikidata-examples",
      "name": "Contemporary Indian actresses",
      "sparql": "SELECT ?item ?itemLabel ?itemDescription (SAMPLE(?img) AS ?image) (SAMPLE(?dob) AS ?dob) ?sl\nWHERE {\n  ?item wdt:P106 wd:Q33999 ;\n          wdt:P27 wd:Q668 ;\n          wdt:P21 wd:Q6581072 .\n  MINUS { ?item wdt:P570 [] }\n  OPTIONAL { ?item wdt:P18 ?img }\n  OPTIONAL { ?item wdt:P569 ?dob }\n  OPTIONAL { ?item wikibase:sitelinks ?sl }\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\"}\n} GROUP BY ?item ?itemLabel ?itemDescription ?sl\nORDER BY DESC(?sl)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Contemporary Indian actresses",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Articles on Punjabi (Gurmukhi) Wikipedia about Pakistani actresses",
      "namespace": "wikidata-examples",
      "name": "Articles on Punjabi (Gurmukhi) Wikipedia about Pakistani actresses",
      "sparql": "#added 2017-03-25 (46 results)\nSELECT ?sitelink\nWHERE\n{\n  # gender = female\n    ?item wdt:P21 wd:Q6581072 .\n\n    # country = Pakistan (Q25)\n    { ?item wdt:P27 wd:Q843 }\n\n        # occupation = actress (Q33999)\n    { ?item wdt:P106 wd:Q33999 }\n\n  # look for articles (sitelinks) in Punjabi (\"pa\")\n    { ?sitelink schema:about ?item . ?sitelink schema:inLanguage \"pa\" }\n\n  # humans only\n    ?item wdt:P31 wd:Q5 .\n}\n#Listeria can only handle up to 5000\nLIMIT 5000\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Articles on Punjabi (Gurmukhi) Wikipedia about Pakistani actresses",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.All Dr. Who performers",
      "namespace": "wikidata-examples",
      "name": "All Dr. Who performers",
      "sparql": "#added 2017-07-16, updated 2020-07-08\nSELECT ?doctor ?doctorLabel ?ordinal ?performer ?performerLabel\nWHERE {\n  ?doctor wdt:P31 wd:Q47543030 .\n  OPTIONAL { ?doctor wdt:P1545 ?ordinal }\n  OPTIONAL { ?doctor p:P175 / ps:P175 ?performer }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\nORDER BY ASC(xsd:integer(?ordinal) )\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All Dr. Who performers",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Movies and their narrative location on a map",
      "namespace": "wikidata-examples",
      "name": "Movies and their narrative location on a map",
      "sparql": "#defaultView:Map\nSELECT ?movie ?movieLabel ?narrative_location ?narrative_locationLabel ?coordinates WHERE {\n   ?movie wdt:P840 ?narrative_location ;\n          wdt:P31 wd:Q11424 .\n   ?narrative_location wdt:P625 ?coordinates .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Movies and their narrative location on a map",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Movies released in 2017",
      "namespace": "wikidata-examples",
      "name": "Movies released in 2017",
      "sparql": "\nSELECT DISTINCT ?item ?itemLabel WHERE {\n  ?item wdt:P31 wd:Q11424.\n  ?item wdt:P577 ?pubdate.\n  FILTER((?pubdate >= \"2017-01-01T00:00:00Z\"^^xsd:dateTime) && (?pubdate <= \"2017-12-31T00:00:00Z\"^^xsd:dateTime))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Movies released in 2017",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Authors, writers and poets ranked by sitelink and also includes \"country of citizenship\"",
      "namespace": "wikidata-examples",
      "name": "Authors, writers and poets ranked by sitelink and also includes \"country of citizenship\"",
      "sparql": "\nSELECT DISTINCT ?writer ?place ?linkcount\nWHERE\n{\n  {?s wdt:P106 wd:Q36180 .} UNION { ?s wdt:P106 wd:Q482980 . } UNION { ?s wdt:P106 wd:Q49757 . }\n  ?s wdt:P27 ?pl .\n  ?s wikibase:sitelinks ?linkcount .\n  OPTIONAL {\n     ?s rdfs:label ?writer FILTER (lang(?writer) = \"en\").\n   }\n    OPTIONAL {\n     ?pl rdfs:label ?place FILTER (lang(?place) = \"en\").\n   }\n} GROUP BY ?place ?writer ?linkcount HAVING (?linkcount > 10) ORDER BY DESC(?linkcount)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Authors, writers and poets ranked by sitelink and also includes \"country of citizenship\"",
      "description": "* Items used:   \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Birth places of German poets",
      "namespace": "wikidata-examples",
      "name": "Birth places of German poets",
      "sparql": "#defaultView:Map{\"hide\": [\"?coord\"]}\nSELECT ?subj ?subjLabel ?place ?placeLabel ?coord ?birthyear\nWHERE {\n   ?subj wdt:P106 wd:Q49757 .\n   ?subj wdt:P19 ?place .\n   ?place wdt:P17 wd:Q183 .\n   ?place wdt:P625 ?coord .\n   OPTIONAL { ?subj wdt:P569 ?dob }\n   BIND(YEAR(?dob) as ?birthyear)\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Birth places of German poets",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Books or literary works published before 1830 with place of publication or narrative location coordinates",
      "namespace": "wikidata-examples",
      "name": "Books or literary works published before 1830 with place of publication or narrative location coordinates",
      "sparql": "\nSELECT ?item ?label ?coord ?place\nWHERE\n{\n  VALUES ?type {wd:Q571 wd:Q7725634} # book or literary work\n  ?item wdt:P31 ?type .\n  ?item wdt:P577 ?date FILTER (?date < \"1830-01-01T00:00:00Z\"^^xsd:dateTime) .\n  ?item rdfs:label ?label FILTER (lang(?label) = \"en\")\n\n  OPTIONAL {\n    ?item (wdt:P291",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Books or literary works published before 1830 with place of publication or narrative location coordinates",
      "description": "*  Items used:  \n*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.Books by a given Author including genres and date of first publication",
      "namespace": "wikidata-examples",
      "name": "Books by a given Author including genres and date of first publication",
      "sparql": "\n SELECT DISTINCT ?book ?bookLabel ?authorLabel (GROUP_CONCAT(?genre_label) as ?genres) (MIN(?publicationDate) as ?firstPublication)\nWHERE\n{\n  ?author rdfs:label \"Ernest Hemingway\"@en .\n  ?book wdt:P50 ?author .\n  OPTIONAL {\n    ?book wdt:P136 ?genre .\n    ?genre rdfs:label ?genre_label FILTER (lang(?genre_label) = \"en\").\n  }\n\n  OPTIONAL {\n    ?book wdt:P577 ?publicationDate .\n  }\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en\" .\n  }\n} GROUP BY ?book ?bookLabel ?authorLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Books by a given Author including genres and date of first publication",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Text by author containing case-insensitive title with optional cover image",
      "namespace": "wikidata-examples",
      "name": "Text by author containing case-insensitive title with optional cover image",
      "sparql": "SELECT DISTINCT ?item ?authorLabel ?itemLabel ?image where {\n  ?item wdt:P31/wdt:P279* wd:Q234460.\n\n  ?author ?label 'Bram Stoker'.\n  ?item wdt:P50 ?author.\n\n  ?item rdfs:label ?itemLabel.\n  FILTER contains(lcase(?itemLabel), 'dracula').\n\n  OPTIONAL {?item wdt:P18 ?image.}\n\n  SERVICE wikibase:label {bd:serviceParam wikibase:language \"[AUTO_LANGUAGE]\".}\n} LIMIT 50\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Text by author containing case-insensitive title with optional cover image",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Literary works by label count",
      "namespace": "wikidata-examples",
      "name": "Literary works by label count",
      "sparql": "\nSELECT ?s ?desc (COUNT(DISTINCT ?label) as ?labelcount)\nWHERE\n{\n  ?s wdt:P31 wd:Q7725634 .\n  ?s rdfs:label ?label .\n  OPTIONAL {\n     ?s rdfs:label ?desc FILTER (lang(?desc) = \"en\").\n   }\n } GROUP BY ?s ?desc ORDER BY DESC(?labelcount)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Literary works by label count",
      "description": "*  Items used: \n*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.All subclasses of \"Literary Work\"",
      "namespace": "wikidata-examples",
      "name": "All subclasses of \"Literary Work\"",
      "sparql": "\nSELECT ?s ?desc\nWHERE\n{\n  ?s wdt:P279 wd:Q7725634 .\n  OPTIONAL {\n     ?s rdfs:label ?desc FILTER (lang(?desc) = \"en\").\n   }\n }\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All subclasses of \"Literary Work\"",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Epic poems by label count",
      "namespace": "wikidata-examples",
      "name": "Epic poems by label count",
      "sparql": "\nSELECT ?s ?desc (COUNT(DISTINCT ?label) as ?labelcount)\nWHERE\n{\n  ?s wdt:P31 wd:Q37484 .\n  ?s rdfs:label ?label .\n  OPTIONAL {\n     ?s rdfs:label ?desc FILTER (lang(?desc) = \"en\").\n   }\n } GROUP BY ?s ?desc ORDER BY DESC(?labelcount)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Epic poems by label count",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Epic poems by sitelink count",
      "namespace": "wikidata-examples",
      "name": "Epic poems by sitelink count",
      "sparql": "\n#old method for sitelink count\nSELECT ?s ?desc ?linkcount\nWHERE\n{\n  ?s wdt:P31 wd:Q37484 .\n  ?s wikibase:sitelinks ?linkcount .\n  OPTIONAL {\n     ?s rdfs:label ?desc FILTER (lang(?desc) = \"en\").\n   }\n } GROUP BY ?s ?desc ?linkcount ORDER BY DESC(?linkcount)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Epic poems by sitelink count",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Instance of Book by sitelink count",
      "namespace": "wikidata-examples",
      "name": "Instance of Book by sitelink count",
      "sparql": "\n#old method for sitelink count\nSELECT ?s ?desc ?linkcount\nWHERE\n{\n  ?s wdt:P31 wd:Q571 .\n  ?s wikibase:sitelinks ?linkcount .\n  OPTIONAL {\n     ?s rdfs:label ?desc FILTER (lang(?desc) = \"en\").\n   }\n } GROUP BY ?s ?desc ?linkcount ORDER BY DESC(?linkcount)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Instance of Book by sitelink count",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Poets and monarchs",
      "namespace": "wikidata-examples",
      "name": "Poets and monarchs",
      "sparql": "\n\nSELECT ?poetLabel ?image ?yob ?yod ?start ?end ?monarchLabel\nWHERE\n{\n  ?poet p:P39 ?positionStat.\n  ?positionStat ps:P39 wd:Q877838;\n                pq:P580 ?start;\n                pq:P748 ?monarch.\n  OPTIONAL {\n    ?positionStat pq:P582 ?end.\n  }\n  OPTIONAL {\n    ?poet wdt:P18 ?image;\n          wdt:P569 ?dob;\n          wdt:P570 ?dod.\n  }\n  BIND(YEAR(?dob) AS ?yob).\n  BIND(YEAR(?dod) AS ?yod).\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nORDER BY ?start DESC(?monarchLabel)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Poets and monarchs",
      "description": "*  Items used: \n*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.List of digital libraries in the world",
      "namespace": "wikidata-examples",
      "name": "List of digital libraries in the world",
      "sparql": "SELECT DISTINCT ?item ?itemLabel ?website\nWHERE {\n?item wdt:P31/wdt:P279* wd:Q212805 # digital libraries or subtypes\nOPTIONAL { ?item wdt:P856 ?website } # Official URL if known\nMINUS { ?item wdt:P576 [] } # Exclude those that have shut down\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"en, es, ca, fr, de, pl, uk, ru, he\" }\n}\nORDER BY ?itemLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of digital libraries in the world",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Map of Libraries in Canada",
      "namespace": "wikidata-examples",
      "name": "Map of Libraries in Canada",
      "sparql": "\n# Canadian libraries on a map (must have coordinates!)\n#defaultView:Map\nSELECT ?library ?libraryLabel ?coords WHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en,fr\". }\n  ?library (wdt:P31/wdt:P279*) wd:Q7075.\n  ?library wdt:P17 wd:Q16.\n  ?library wdt:P625 ?coords.\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Map of Libraries in Canada",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.List of authors unsuccessfully nominated for Nobel prize in literature",
      "namespace": "wikidata-examples",
      "name": "List of authors unsuccessfully nominated for Nobel prize in literature",
      "sparql": "\nSELECT ?nominee ?nomineeLabel (SAMPLE(?citizenshipLabel) AS ?country) (COUNT(DISTINCT ?year) as ?timesNominated)\nWHERE\n{\n    BIND( wd:Q37922 as ?prize )\n    ?nominee p:P1411 [ ps:P1411 ?prize; pq:P585 ?time ]\n    BIND( year(?time) as ?year )\n    OPTIONAL {\n      ?nominee wdt:P27 [ rdfs:label ?citizenshipLabel ] FILTER (lang(?citizenshipLabel) = \"en\") .\n    }\n    FILTER NOT EXISTS { ?nominee wdt:P166 ?prize . }\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nGROUP BY ?nominee ?nomineeLabel\nORDER BY DESC(?timesNominated) ?nomineeLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of authors unsuccessfully nominated for Nobel prize in literature",
      "description": "*  Items used: \n*  Properties used: ,"
    },
    {
      "query_id": "wikidata-examples.Authors whose works enter the public domain in 2017 (died in 1946)",
      "namespace": "wikidata-examples",
      "name": "Authors whose works enter the public domain in 2017 (died in 1946)",
      "sparql": "SELECT DISTINCT ?item WHERE\n{\n  ?item wdt:P31 wd:Q5 ;\n  wdt:P106/wdt:P279* wd:Q482980 .\n  ?item wdt:P570 ?time0 .\n  FILTER((?time0 >= \"1945-01-01T00:00:00Z\"^^xsd:dateTime) && (?time0 <= \"1946-01-01T00:00:00Z\"^^xsd:dateTime))\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Authors whose works enter the public domain in 2017 (died in 1946)",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Authors with United States citizenship without a Goodreads identifier",
      "namespace": "wikidata-examples",
      "name": "Authors with United States citizenship without a Goodreads identifier",
      "sparql": "#authors with country of citizenship United States who do not have a Goodreads identifier\nSELECT ?item ?itemLabel\nWHERE\n{\n  ?item wdt:P31 wd:Q5. #instance of (P31) human (Q5)\n  ?item wdt:P27 wd:Q30. #country of citizenship (P27) is United States (Q30)\n  ?item wdt:P106 wd:Q36180. #occupation (P106) is writer (Q36180)\n  MINUS { ?item wdt:P2963 [] } .\n\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Authors with United States citizenship without a Goodreads identifier",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Works by women that were born between 1800 and 1900, are in the WomenWriters database and are translated",
      "namespace": "wikidata-examples",
      "name": "Works by women that were born between 1800 and 1900, are in the WomenWriters database and are translated",
      "sparql": "SELECT ?translator ?translatorLabel ?work ?workLabel ?author ?authorLabel {\n    ?work wdt:P655 ?translator;\n          wdt:P50 ?author.\n\n    ?author wdt:P2533 ?wid;\n            wdt:P21 wd:Q6581072;\n            wdt:P569 ?birth;\n\n    FILTER (?birth > \"1800-01-01\"^^xsd:dateTime && ?birth < \"1900-01-01\"^^xsd:dateTime)\n\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en,nl,fr\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Works by women that were born between 1800 and 1900, are in the WomenWriters database and are translated",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Fictional subjects of the Marvel Universe",
      "namespace": "wikidata-examples",
      "name": "Fictional subjects of the Marvel Universe",
      "sparql": "SELECT ?char ?charName (GROUP_CONCAT(DISTINCT ?typeLabel;separator=\", \") AS ?types) (GROUP_CONCAT(DISTINCT ?universeLabel;separator=\", \") AS ?universes)\nWHERE {\n  ?char wdt:P1080 wd:Q931597;\n          wdt:P31 ?type ;\n          wdt:P1080 ?universe .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\".\n                         ?char rdfs:label ?charName .\n                         ?universe rdfs:label ?universeLabel .\n                         ?type rdfs:label ?typeLabel .}\n} GROUP BY ?char ?charName\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Fictional subjects of the Marvel Universe",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Fictional characters whose birth/death date is in the current decade",
      "namespace": "wikidata-examples",
      "name": "Fictional characters whose birth/death date is in the current decade",
      "sparql": "SELECT DISTINCT ?character ?characterLabel ?birth ?death WITH {\n  # Fictional character subclasses as a named subquery\n  SELECT ?fictiontype WHERE {\n    ?fictiontype wdt:P279* wd:Q95074. hint:Prior hint:gearing \"forward\".\n  }\n} AS %i\nWHERE\n{\n  INCLUDE %i\n  ?character wdt:P31 ?fictiontype.\n  # Date of birth\n  { ?character wdt:P569 ?birth . }\n  # Date of death\n  UNION { ?character wdt:P570 ?death . }\n  # Get actual decade to compare with dates\n  BIND(xsd:integer(YEAR(NOW())/10) as ?actual_decade).\n  # Only show characters born or deceased in the current decade\n  FILTER(xsd:integer(YEAR(?birth)/10) = ?actual_decade {{!}}{{!}} xsd:integer(YEAR(?death)/10) = ?actual_decade)\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" .\n  }\n} ORDER BY ?birth ?death\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Fictional characters whose birth/death date is in the current decade",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Timeline of albums by Manu Chao and Mano Negra",
      "namespace": "wikidata-examples",
      "name": "Timeline of albums by Manu Chao and Mano Negra",
      "sparql": "\n#defaultView:Timeline\nSELECT ?album ?performerLabel ?albumLabel ?publication_date WHERE {\n  VALUES ?performer {\n      wd:Q936474\n      wd:Q207898\n    }\n   ?album wdt:P175 ?performer ;\n      wdt:P577 ?publication_date .\n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Timeline of albums by Manu Chao and Mano Negra",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Music composers by birth place",
      "namespace": "wikidata-examples",
      "name": "Music composers by birth place",
      "sparql": "#defaultView:Map\nSELECT ?item ?itemLabel ?_coordinates ?_image WHERE {\n  ?item wdt:P106 wd:Q36834; # occupation: composer\n        wdt:P18 ?_image; # with an image depicting them\n        wdt:P19/wdt:P625 ?_coordinates # their birthplace, specifically the coordinates of their birthplace\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" } # labels in English\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Music composers by birth place",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Composers and their most-used tonality",
      "namespace": "wikidata-examples",
      "name": "Composers and their most-used tonality",
      "sparql": "\n\n# Each composer\u2019s most used tonality, with number of works in that tonality.\n# (If this is ambiguous \u2013 multiple tonalities with the same number \u2013 there are multiple results for one composer.)\n#\n# The SPARQL for this is an evil perversion of three subqueries (one of them nested in another).\n# To understand it, you have to go inside out\u2026 follow the numbers.\n\nSELECT ?composerLabel ?tonalityLabel ?count\nWHERE\n{\n  {\n    # 4. Group again, this time just by the composer.\n    #    We also select the highest count of a tonality.\n    #    Notice that we don\u2019t know what tonality this count is associated with \u2013 we\u2019ll get to that.\n    #    So now we have each composer, along with how often they used whatever tonality they used most.\n    SELECT ?composer (MAX(?count) AS ?count_)\n    WHERE\n    {\n      {\n        # 2. Group by composer and tonality, so that for each composer and tonality, we get a count of how often the composer used this tonality.\n        SELECT ?composer ?tonality (COUNT(?composition) AS ?count)\n        WHERE\n        {\n          # 1. Extremely straightforward: the ?composition has the composer ?composer and the tonality ?tonality.\n          #    (I\u2019m not bothering with any \u201cinstance of\u201d because the presence of these two properties is a sufficient indicator of ?composition being a composition.)\n          ?composition wdt:P86 ?composer;\n                       wdt:P826 ?tonality.\n        }\n        GROUP BY ?composer ?tonality\n        HAVING(?count > 1) # 3. Limit that to counts > 1, because using a tonality once is hardly \u201cmost used\u201d.\n      }\n    }\n    GROUP BY ?composer\n  }\n  {\n    # 6. Identical to 2.\n    SELECT ?composer ?tonality (COUNT(?composition) AS ?count)\n    WHERE\n    {\n      # 5. Identical to 1.\n      ?composition wdt:P86 ?composer;\n                   wdt:P826 ?tonality.\n    }\n    GROUP BY ?composer ?tonality\n    HAVING(?count > 1) # 7. Identical to 3.\n  }\n  # 8. That\u2019s it. Wait, what?\n  #    From 4, we now have ?composer, any composer, and ?count, the count of how often they used whatever tonality they used most.\n  #    From 6, we also have a ?composer, as well as a ?tonality, and the count of how often they used that particular tonality.\n  #    The trick is that ?composer and ?count are the same variable in each subquery, and so now, when the two subqueries are joined,\n  #    we select only that ?tonality from 6 where the ?composer and the ?count are identical to those from 4 \u2013\n  #    that is, where this tonality was used as often as the composer\u2019s most-used tonality.\n  #    In other words, this must *be* the composer\u2019s most-used tonality (except when there are multiple tonalities with the same count).\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\nORDER BY DESC(?count) # 9. Order by count (highest first), because the result isn\u2019t very meaningful for low counts (many compositions aren\u2019t on Wikidata or don\u2019t have a tonality statement).\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Composers and their most-used tonality",
      "description": "*  Properties used:"
    },
    {
      "query_id": "wikidata-examples.Rock bands that start with \"M\"",
      "namespace": "wikidata-examples",
      "name": "Rock bands that start with \"M\"",
      "sparql": "\nSELECT ?band ?bandLabel\nWHERE\n{\n  ?band wdt:P31 wd:Q5741069 .\n        ?band rdfs:label ?bandLabel .\n  FILTER(LANG(?bandLabel) = \"en\") .\n  FILTER(STRSTARTS(?bandLabel, 'M')) .\n} ORDER BY LCASE(?bandLabel)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Rock bands that start with \"M\"",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Musicians or singers that have a genre containing 'rock'",
      "namespace": "wikidata-examples",
      "name": "Musicians or singers that have a genre containing 'rock'",
      "sparql": "\nSELECT DISTINCT ?human ?humanLabel\nWHERE\n{\n    VALUES ?professions {wd:Q177220 wd:Q639669}\n    ?human wdt:P31 wd:Q5 .\n    ?human wdt:P106 ?professions .\n    ?human wdt:P136 ?genre .\n    ?human wikibase:statements ?statementcount .\n    ?genre rdfs:label ?genreLabel .\n    FILTER CONTAINS(?genreLabel, \"rock\") .\n    FILTER (?statementcount > 50 ) .\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nORDER BY ?humanLabel\nLIMIT 50\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Musicians or singers that have a genre containing 'rock'",
      "description": "* items used:   \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.'27 club' - musicians who died at age 27",
      "namespace": "wikidata-examples",
      "name": "'27 club' - musicians who died at age 27",
      "sparql": "SELECT ?person ?personLabel ?dob ?dod (xsd:integer(?age_) as ?age)\nwhere {\n  # We do a subquery here, because otherwise we'll get a timeout because of the labels\n  {\n    SELECT DISTINCT ?person ?dob ?dod ?age_\n    where {\n      ?person wdt:P31 wd:Q5; # Get all humans\n        wdt:P106/wdt:P279* wd:Q639669; # That have a musician or a subclass thereof as their occupation\n        p:P569 ?dob_st; # death of birth\n        p:P570 ?dod_st. # death of death\n\n      ?dob_st psv:P569 [ wikibase:timeValue ?dob; wikibase:timePrecision ?dob_prec ];\n        a wikibase:BestRank.\n      ?dod_st psv:P570 [ wikibase:timeValue ?dod; wikibase:timePrecision ?dod_prec ];\n        a wikibase:BestRank.\n\n      # Only accept date precisions of a day or better, so it doesn't cause problems when we calculate age\n      FILTER(?dob_prec >= 11 && ?dod_prec >= 11)\n\n      # Time differences in Blazegraph are counted as days and is xsd:double\n      # We then calculate the age by dividing this by the orbital period of Earth\n      # This is a shortcut, but it is accurate enough for our purposes\n      bind((?dod - ?dob) / 365.2564 as ?age_)\n\n      # And filter by age\n      filter(?age_ >= 27.0 && ?age_ < 28.0)\n    }\n    #LIMIT 1000\n  }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY desc(?dod) # Order by most recent\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "'27 club' - musicians who died at age 27",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Locations of Pablo Picasso works",
      "namespace": "wikidata-examples",
      "name": "Locations of Pablo Picasso works",
      "sparql": "\n\n#defaultView:Map\nSELECT ?label ?coord ?subj\nWHERE\n{\n   ?subj wdt:P170 wd:Q5593 .\n  OPTIONAL {?subj wdt:P276 ?loc .\n    ?loc wdt:P625 ?coord } .\n   ?subj rdfs:label ?label FILTER (lang(?label) = \"en\")\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Locations of Pablo Picasso works",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Eiffel Tower in art",
      "namespace": "wikidata-examples",
      "name": "Eiffel Tower in art",
      "sparql": "\nSELECT DISTINCT ?item ?itemLabel ?instanceLabel ?creatorLabel (YEAR(?date) as ?year) ?image\nWHERE\n{\n  ?item wdt:P180 wd:Q243 .\n  ?item wdt:P31 ?instance .\n  OPTIONAL { ?item wdt:P170 ?creator }\n  OPTIONAL { ?item wdt:P571 ?date }\n  OPTIONAL { ?item wdt:P18 ?image }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],fr,en\" . }\n}\nORDER BY ?itemLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Eiffel Tower in art",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Paintings by Gustav Klimt",
      "namespace": "wikidata-examples",
      "name": "Paintings by Gustav Klimt",
      "sparql": "\n#defaultView:ImageGrid\nSELECT *\nWHERE\n{\n  ?item wdt:P31 wd:Q3305213 .\n  ?item wdt:P170 wd:Q34661 .\n  ?item wdt:P18 ?pic .\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Paintings by Gustav Klimt",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Map of all the paintings for which we know a location with the count per location",
      "namespace": "wikidata-examples",
      "name": "Map of all the paintings for which we know a location with the count per location",
      "sparql": "\n\n#Map of all the paintings for which we know a location with the count per location\n#defaultView:Map\nSELECT ?locationLabel ?coord (count(*) as ?count)\nWHERE\n{\n    ?painting wdt:P31 wd:Q3305213 .\n    ?painting wdt:P276 ?location .\n  ?location wdt:P625 ?coord\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\nGROUP BY ?locationLabel ?coord\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Map of all the paintings for which we know a location with the count per location",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Versions of The Scream",
      "namespace": "wikidata-examples",
      "name": "Versions of The Scream",
      "sparql": "\n\nSELECT\n  ?item\n  (SAMPLE (?itemL) AS ?title)\n  (SAMPLE (?y) AS ?year)\n  (SAMPLE (?typeL) AS ?type)\n  (group_concat(DISTINCT ?materialL ; separator = \", \") as ?materials)\n  (SAMPLE (?collectionL) AS ?collection)\n  (SAMPLE (?img) AS ?image)\n{\n  SELECT ?item ?itemL (YEAR(?date) AS ?y) ?typeL ?collectionL ?img ?materialL\n  WHERE {\n    ?item wdt:P179 wd:Q471379 .\n    ?item wdt:P18 ?img .\n    ?item wdt:P571 ?date .\n    ?item wdt:P31 ?instance .\n    ?item rdfs:label ?itemL FILTER (lang(?itemL) = \"en\").\n    ?instance rdfs:label ?typeL FILTER (lang(?typeL) = \"en\").\n    OPTIONAL {\n      ?item wdt:P195 ?collection .\n      ?collection rdfs:label ?collectionL FILTER (lang(?collectionL) = \"en\").\n    }\n    OPTIONAL {\n      ?item wdt:P186 ?material .\n      ?material rdfs:label ?materialL FILTER (lang(?materialL) = \"en\").\n    }\n  }\n}\nGROUP BY ?item\nORDER BY ?year ?item ?itemLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Versions of The Scream",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Depicted objects in art work",
      "namespace": "wikidata-examples",
      "name": "Depicted objects in art work",
      "sparql": "\n\nSELECT DISTINCT ?depicts (SAMPLE(?dL) AS ?depictsLabel) (COUNT(DISTINCT ?item) AS ?count)\nWHERE\n{\n  ?item wdt:P180 ?depicts .\n  OPTIONAL { ?depicts rdfs:label ?dL FILTER (lang(?dL) = \"en\") }\n}\nGROUP BY ?depicts\nORDER BY DESC(?count) ?depictsLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Depicted objects in art work",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Sculptures by Max Bill",
      "namespace": "wikidata-examples",
      "name": "Sculptures by Max Bill",
      "sparql": "\n\nSELECT DISTINCT ?item ?itemLabel ?countryLabel ?placeLabel (YEAR(?date) as ?year) ?coords ?image\nWHERE\n{\n  ?item wdt:P31/wdt:P279* wd:Q860861 .\n  ?item wdt:P170 wd:Q123454 .\n  OPTIONAL { ?item wdt:P17 ?country . }\n  OPTIONAL { ?item wdt:P131 ?place . }\n  OPTIONAL { ?item wdt:P571 ?date . }\n  OPTIONAL { ?item wdt:P625 ?coords . }\n  OPTIONAL { ?item wdt:P18 ?image . }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\" . }\n}\nORDER BY ?itemLabel ?placeLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Sculptures by Max Bill",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Paintings by Rembrandt in the Louvre or the Rijkmuseum",
      "namespace": "wikidata-examples",
      "name": "Paintings by Rembrandt in the Louvre or the Rijkmuseum",
      "sparql": "#defaultView:ImageGrid\n\nSELECT DISTINCT ?item ?itemLabel ?itemDescription ?image ?collection WHERE {\n    ?item wdt:P31 wd:Q3305213 ; # Get items that are instances of painting\n          wdt:P170 wd:Q5598 ; # By creator Rembrandt\n          wdt:P195/wdt:P361* ?collection . # That are in some collection\n\n    # Only return results where 'collection' is either Rijkmuseum or Louvre\n    FILTER ( ?collection = wd:Q190804 {{!}}{{!}} ?collection = wd:Q19675 )\n\n    OPTIONAL { ?item wdt:P18 ?image } # Optionally with an image\n\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE]\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Paintings by Rembrandt in the Louvre or the Rijkmuseum",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Authority control properties usage for paintings",
      "namespace": "wikidata-examples",
      "name": "Authority control properties usage for paintings",
      "sparql": "\n# Make a list of the most used authority control properties for works for paintings\nSELECT ?propertyLabel ?propertyDescription (COUNT(?propertyclaim) AS ?count) WHERE {\n  ?item wdt:P31 wd:Q3305213 .\n\n  ?property wikibase:propertyType wikibase:ExternalId .\n  ?property wdt:P31 wd:Q44847669 .\n  ?property wikibase:claim ?propertyclaim .\n\n  ?item ?propertyclaim [] .\n  SERVICE wikibase:label { # ... include the labels\n    bd:serviceParam wikibase:language \"en\" .\n  }\n} GROUP BY ?propertyLabel ?propertyDescription ORDER BY DESC (?count)\nLIMIT 100\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Authority control properties usage for paintings",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Authority control properties usage for painters",
      "namespace": "wikidata-examples",
      "name": "Authority control properties usage for painters",
      "sparql": "\n# Make a list of the most used authority control properties for people for painters\nSELECT ?propertyLabel ?propertyDescription ?count WHERE {\n  {\n    SELECT ?propertyclaim (COUNT(*) AS ?count) where {\n      ?item wdt:P106 wd:Q1028181 .\n      ?item wdt:P31 wd:Q5 .\n      ?item ?propertyclaim [] .\n    } GROUP BY ?propertyclaim\n  }\n  ?property wikibase:propertyType wikibase:ExternalId .\n  ?property wdt:P31 wd:Q19595382 .\n  ?property wikibase:claim ?propertyclaim .\n  SERVICE wikibase:label { # ... include the labels\n    bd:serviceParam wikibase:language \"en\" .\n  }\n} ORDER BY DESC (?count)\nLIMIT 100\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Authority control properties usage for painters",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Ten random painting images",
      "namespace": "wikidata-examples",
      "name": "Ten random painting images",
      "sparql": "\n# This returns 10 random painting images\n# RAND() returns one random number (cached like every query).\n# The string representation of the item and the random number are hashed.\n# This will give a complete different ordering every time you have a different random number.\n# You can change the LIMIT if you want to trigger a new random number\n#defaultView:ImageGrid\nSELECT ?item ?itemLabel ?image (MD5(CONCAT(str(?item),str(RAND()))) as ?random) WHERE {\n  ?item wdt:P31 wd:Q3305213.\n  ?item wdt:P18 ?image.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\"}\n} ORDER BY ?random\nLIMIT 10\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Ten random painting images",
      "description": "In cases where you want to re-run the query without getting a cached result, see the following blog post:\n\n* https://byabbe.se/2018/01/26/cache-busting-wikidata-sparql-queries"
    },
    {
      "query_id": "wikidata-examples.Painters related to anonymous works",
      "namespace": "wikidata-examples",
      "name": "Painters related to anonymous works",
      "sparql": "\n#Paintings by anonymous painters, but are related to some other painter\n#defaultView:BubbleChart\nSELECT ?creatorqualifierLabel (COUNT(?creatorqualifier) AS ?count) WHERE {\n  ?item wdt:P31 wd:Q3305213 .\n  ?item wdt:P170 wd:Q4233718 .\n  OPTIONAL { ?item p:P170 ?creatorstatement .\n             ?creatorstatement rdf:type wikibase:BestRank .\n             ?creatorstatement ?qualifier ?creatorqualifier .\n             ?qualifierproperty wikibase:qualifier ?qualifier }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n  } GROUP BY ?creatorqualifierLabel\nHAVING (?count > 2)\nLIMIT 20000\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Painters related to anonymous works",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Painters type of relations with anonymous works",
      "namespace": "wikidata-examples",
      "name": "Painters type of relations with anonymous works",
      "sparql": "\n#Paintings by anonymous painters, types of relationships with other painters\n#defaultView:BubbleChart\nSELECT ?qualifierpropertyLabel (COUNT(?creatorqualifier) AS ?count) WHERE {\n  ?item wdt:P31 wd:Q3305213 .\n  ?item wdt:P170 wd:Q4233718 .\n  OPTIONAL { ?item p:P170 ?creatorstatement .\n             ?creatorstatement rdf:type wikibase:BestRank .\n             ?creatorstatement ?qualifier ?creatorqualifier .\n             ?qualifierproperty wikibase:qualifier ?qualifier }\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n  } GROUP BY ?qualifierpropertyLabel\nHAVING (?count > 2)\nLIMIT 2000\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Painters type of relations with anonymous works",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Using formatter url to construct links in SPARQL",
      "namespace": "wikidata-examples",
      "name": "Using formatter url to construct links in SPARQL",
      "sparql": "\n# Get 10 paintings that have a link to RKDimages (P350)\n# Use the formatter URL (P1630) to construct the links to RKDimages\n#defaultView:ImageGrid\nSELECT ?item ?image ?rkdurl WHERE {\n  wd:P350 wdt:P1630 ?formatterurl .\n  ?item wdt:P31 wd:Q3305213 .\n  ?item wdt:P18 ?image .\n  ?item wdt:P350 ?rkdid .\n  BIND(IRI(REPLACE(?rkdid, '^(.+)$', ?formatterurl)) AS ?rkdurl).\n  } LIMIT 10\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Using formatter url to construct links in SPARQL",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Map of the locations of all paintings by Johannes Vermeer with an image",
      "namespace": "wikidata-examples",
      "name": "Map of the locations of all paintings by Johannes Vermeer with an image",
      "sparql": "\n#defaultView:Map\nSELECT ?painting ?paintingLabel ?location ?image where {\n  ?painting wdt:P276 ?collection;\n            wdt:P170 wd:Q41264;\n            wdt:P18 ?image.\n  ?collection wdt:P625 ?location.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Map of the locations of all paintings by Johannes Vermeer with an image",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.All impressionist painters that have been in an exhibition, together with the amount of exhibitions they have been in",
      "namespace": "wikidata-examples",
      "name": "All impressionist painters that have been in an exhibition, together with the amount of exhibitions they have been in",
      "sparql": "#title:Impressionist painters by number of exhibitions\nSELECT DISTINCT ?painter ?painterLabel (count (DISTINCT ?exhibition) as ?exhibition_count)\n(group_concat(DISTINCT ?exhibitionLabel; separator=\", \") as ?exhibitions)\nWHERE {\n  ?painter wdt:P106 wd:Q1028181 . #give me all people with occupation (P106) painter (Q1028181)\n  ?painter wdt:P135 wd:Q40415 . #who belonged to the impressionist (Q40415) movement (P135)\n  ?painting wdt:P170 ?painter . #the paintings created by (P170) the painter\n  ?painting wdt:P608 ?exhibition . #have an exhibition history (P608) at an exhibition\n  ?exhibition rdfs:label ?exhibitionLabel . #give me the english Labels of these exhibitions, if possible\n  FILTER (lang(?exhibitionLabel) = \"en\")\n\n  SERVICE wikibase:label {bd:serviceParam wikibase:language \"en\".}\n} GROUP BY ?painter ?painterLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "All impressionist painters that have been in an exhibition, together with the amount of exhibitions they have been in",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.List of theatre plays",
      "namespace": "wikidata-examples",
      "name": "List of theatre plays",
      "sparql": "\n\nSELECT ?play ?playLabel\nWHERE\n{\n  ?play wdt:P31 wd:Q25379 .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en,es,pt,de,fr,ja,zh\" . }\n}\nLIMIT 1000\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "List of theatre plays",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Public art in Paris",
      "namespace": "wikidata-examples",
      "name": "Public art in Paris",
      "sparql": "\nSELECT\n  ?item\n  (SAMPLE (?titleL) AS ?title)\n  (group_concat(DISTINCT ?creatorL ; separator = \", \") as ?creator)\n  (group_concat(DISTINCT ?genreL ; separator = \", \") as ?genre)\n  (group_concat(DISTINCT ?placeL ; separator = \", \") as ?place)\n  (group_concat(DISTINCT ?arr ; separator = \", \") as ?arrondissement)\n  (SAMPLE (?img) AS ?image)\n  (SAMPLE (?coord) AS ?coordinates) {\n\n    {\n      SELECT DISTINCT ?item { {\n        ?item wdt:P136 wd:Q557141 ;     # genre: public art\n              wdt:P131 wd:Q90           # located in: Paris\n      } UNION { # or\n        ?item wdt:P136 wd:Q557141 ;     # genre: public art\n              wdt:P131/wdt:P131* wd:Q90 # located in an arrondissement of Paris\n      } }\n    }\n\n    # title\n    OPTIONAL { ?item rdfs:label ?titleL FILTER (lang(?titleL) = \"fr\") }\n\n    # creators\n    OPTIONAL { ?item wdt:P170 [rdfs:label ?creatorL] FILTER (lang(?creatorL) = \"fr\") }\n\n    #genre\n    OPTIONAL {\n      {\n        ?item wdt:P136 ?g FILTER (STR(?g) != 'http://www.wikidata.org/entity/Q557141')\n      } UNION {\n        ?item wdt:P31 ?g .\n      }\n      ?g rdfs:label ?genreL FILTER (lang(?genreL) = \"fr\") .\n    }\n\n    # place\n    OPTIONAL {\n      ?item wdt:P276 [rdfs:label ?placeL] FILTER (lang(?placeL) = \"fr\") .\n    }\n\n    # arrondissement\n    OPTIONAL {\n      ?item wdt:P131 [wdt:P131 wd:Q90 ; rdfs:label ?arrL] FILTER (lang(?arrL) = \"fr\").\n      BIND(REPLACE(?arrL, '^([0-9]+).*$', \"$1\", \"si\") AS ?arr)\n    }\n\n    # image\n    OPTIONAL { ?item wdt:P18 ?img }\n\n    # coordinates\n    OPTIONAL { ?item wdt:P625 ?coord }\n\n} GROUP BY ?item\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Public art in Paris",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Works of art where the name might be a rhyme",
      "namespace": "wikidata-examples",
      "name": "Works of art where the name might be a rhyme",
      "sparql": "\nSELECT ?work ?title\nWHERE\n{\n  ?work wdt:P31/wdt:P279* wd:Q838948;\n        wdt:P1476 ?title.\n  FILTER(REGEX(?title, \"^\\\\w*(\\\\w{3})(\\\\W+\\\\w*\\\\1)+$\", \"i\") && !REGEX(?title, \"^(\\\\w+)(\\\\W+\\\\1)+$\", \"i\")).\n}\nORDER BY STR(?title)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Works of art where the name might be a rhyme",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Works of art where the title is an alliteration",
      "namespace": "wikidata-examples",
      "name": "Works of art where the title is an alliteration",
      "sparql": "\nSELECT ?work ?title\nWHERE\n{\n  ?work wdt:P31/wdt:P279* wd:Q838948;\n        wdt:P1476 ?title.\n  FILTER(REGEX(STR(?title), \"^(\\\\p{L})\\\\w+(?:\\\\W+\\\\1\\\\w+){2,}$\", \"i\")).\n}\nORDER BY STR(?title)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Works of art where the title is an alliteration",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Distribution of public art by place",
      "namespace": "wikidata-examples",
      "name": "Distribution of public art by place",
      "sparql": "\n\nSELECT ?place ?placeLabel (COUNT(*) AS ?count) WHERE {\n  ?item wdt:P136 wd:Q557141 .\n  ?item wdt:P131 ?place .\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" . }\n}\nGROUP BY ?place ?placeLabel\nORDER BY DESC(?count) ?placeLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Distribution of public art by place",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Birthplaces of Europeana280 artists",
      "namespace": "wikidata-examples",
      "name": "Birthplaces of Europeana280 artists",
      "sparql": "\n\n#defaultView:Map\nSELECT ?creator ?creatorLabel ?placebirthLabel ?geoloc where {\n  ?item wdt:P31/wdt:P279* wd:Q838948 . # \u0153uvre d\u2019art et ss-classe\n  ?item wdt:P608 wd:Q20980830 . # du projet Europeana 280\n  ?item wdt:P170 ?creator . # cr\u00e9ateur\n  ?creator wdt:P19 ?placebirth . # lieu de naissance\n  ?placebirth wdt:P625 ?geoloc . #coordonn\u00e9es g\u00e9o\n  SERVICE wikibase:label {\n       bd:serviceParam wikibase:language \"fr,es,en\" .\n    }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Birthplaces of Europeana280 artists",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Female artists",
      "namespace": "wikidata-examples",
      "name": "Female artists",
      "sparql": "\n\nSELECT DISTINCT ?women ?women_label ?women_description\nWHERE\n{\n       ?women wdt:P31 wd:Q5 .\n       ?women wdt:P21 wd:Q6581072 .\n       ?women wdt:P106/wdt:P279* wd:Q483501 . # artists\n       OPTIONAL {?women rdfs:label ?women_label FILTER (LANG(?women_label) = \"en\")}.\n\t   OPTIONAL {?women schema:description ?women_description FILTER (LANG(?women_description) = \"en\")}.\n}\nLIMIT 500\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Female artists",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Common phrases",
      "namespace": "wikidata-examples",
      "name": "Common phrases",
      "sparql": "\n\nSELECT ?q ?qLabel\nWHERE\n{\n  ?q wdt:P31 wd:Q15841920.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Common phrases",
      "description": "* Items used: \n* Properties used:"
    },
    {
      "query_id": "wikidata-examples.Padua University Rectors by dates",
      "namespace": "wikidata-examples",
      "name": "Padua University Rectors by dates",
      "sparql": "\nSELECT ?rettore ?rettoreLabel ?starttime ?endtime WHERE {\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n  ?rettore p:P106 [\n    ps:P106 wd:Q212071; # is a Rector\n    pq:P642 wd:Q193510; # of Padua Univerity\n    pq:P580 ?starttime;\n    pq:P582 ?endtime\n  ].\n}\nORDER BY ?starttime\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Padua University Rectors by dates",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Top 100 podcasts by number of statements",
      "namespace": "wikidata-examples",
      "name": "Top 100 podcasts by number of statements",
      "sparql": "\n# Top 100 podcasts by number of statements\nSELECT ?item ?itemLabel ?statements WHERE\n{\n  ?item wdt:P31 wd:Q24634210. # Instance of: podcast\n  ?item wikibase:statements ?statements. # Number of statements\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\nORDER BY desc(?statements) # Sort by number of statements\nLIMIT 100 # Only the top 100 items\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Top 100 podcasts by number of statements",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Food & Drink",
      "namespace": "wikidata-examples",
      "name": "Food & Drink",
      "sparql": "\n#Locations of breweries in Germany\n#defaultView:Map\nSELECT ?breweryLabel ?breweryDescription ?coord\nWHERE\n{\n  ?brewery wdt:P31/wdt:P279* wd:Q131734 ;\n    wdt:P17 wd:Q183 ;\n    wdt:P625 ?coord .\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en, de\" .\n  }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Food & Drink",
      "description": "===  German breweries ===\n\n\n===  Sandwiches ===\n\n\n===  Sandwich ingredients ==="
    },
    {
      "query_id": "wikidata-examples.German breweries",
      "namespace": "wikidata-examples",
      "name": "German breweries",
      "sparql": "\n#Locations of breweries in Germany\n#defaultView:Map\nSELECT ?breweryLabel ?breweryDescription ?coord\nWHERE\n{\n  ?brewery wdt:P31/wdt:P279* wd:Q131734 ;\n    wdt:P17 wd:Q183 ;\n    wdt:P625 ?coord .\n  SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"en, de\" .\n  }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "German breweries",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Sports",
      "namespace": "wikidata-examples",
      "name": "Sports",
      "sparql": "\nSELECT ?l\nWHERE {\n  wd:Q5571382 ?p wd:Q223243 .\n  ?property ?ref ?p .\n  ?property rdf:type wikibase:Property .\n  ?property rdfs:label ?l FILTER (lang(?l) = \"en\")\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Sports",
      "description": "===  Mushers with neither a ranking in a race nor a reason for not finishing it ===\n* Items used: \n* Properties used: , , , , , \n\n\n===  What is the relation between Terrell Buckley and Miami Dolphins? ===\n*  Items used: , \n\n\n===  The awards received by Cristiano Ronaldo by year ===\nShows only the year instead of the default format (i.e. show all of the date information)."
    },
    {
      "query_id": "wikidata-examples.<translate><!--T:360--> What is the relation between Terrell Buckley and Miami Dolphins?</translate>",
      "namespace": "wikidata-examples",
      "name": "<translate><!--T:360--> What is the relation between Terrell Buckley and Miami Dolphins?</translate>",
      "sparql": "\nSELECT ?l\nWHERE {\n  wd:Q5571382 ?p wd:Q223243 .\n  ?property ?ref ?p .\n  ?property rdf:type wikibase:Property .\n  ?property rdfs:label ?l FILTER (lang(?l) = \"en\")\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "<translate><!--T:360--> What is the relation between Terrell Buckley and Miami Dolphins?</translate>",
      "description": "===  What is the relation between Terrell Buckley and Miami Dolphins? ===\n*  Items used: ,"
    },
    {
      "query_id": "wikidata-examples.Wikidata statements with a reference to data in Figshare",
      "namespace": "wikidata-examples",
      "name": "Wikidata statements with a reference to data in Figshare",
      "sparql": "\nSELECT ?doi (count(?doi) as ?counts) WHERE {\n   ?statement prov:wasDerivedFrom ?ref .\n   ?ref pr:P356 ?doi .\n   FILTER (CONTAINS(lcase(?doi), \"figshare\"))\n}\nGROUP BY ?doi\nORDER BY DESC(?counts)\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Wikidata statements with a reference to data in Figshare",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Wikidata statement with a reference to data in Figshare of which a Wikicite item exists",
      "namespace": "wikidata-examples",
      "name": "Wikidata statement with a reference to data in Figshare of which a Wikicite item exists",
      "sparql": "\nSELECT DISTINCT ?wikiciteLabel ?doi WHERE {\n   ?wikicite p:P356/ps:P356 ?doi .\n   ?statement prov:wasDerivedFrom ?ref .\n   ?ref pr:P356 ?doi .\n   FILTER (CONTAINS(lcase(?doi), \"figshare\"))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Wikidata statement with a reference to data in Figshare of which a Wikicite item exists",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.<translate><!--T:561--> Wikidata statements with a reference to a Figshare DOI (<tvar name=1>[[Q28061352]]</tvar>)</translate>",
      "namespace": "wikidata-examples",
      "name": "<translate><!--T:561--> Wikidata statements with a reference to a Figshare DOI (<tvar name=1>[[Q28061352]]</tvar>)</translate>",
      "sparql": "\nSELECT DISTiNCT ?item ?itemLabel WHERE {\n   ?item ?p ?statement.\n   ?statement prov:wasDerivedFrom ?ref .\n   ?ref ?prop wd:Q28061352 .\n   SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "<translate><!--T:561--> Wikidata statements with a reference to a Figshare DOI (<tvar name=1>[[Q28061352]]</tvar>)</translate>",
      "description": "====  Wikidata statements with a reference to a Figshare DOI (<tvar name=1>Q28061352</tvar>) ===="
    },
    {
      "query_id": "wikidata-examples.Scholarly articles with \"Zika\" in the item label",
      "namespace": "wikidata-examples",
      "name": "Scholarly articles with \"Zika\" in the item label",
      "sparql": "\nSELECT ?item ?itemLabel ?DOI ?PMID\nWITH {\n  SELECT * WHERE {\n    BIND (\"zika\" AS ?searchfor)\n  }\n} AS %p\nWITH {\n  SELECT ?item\n  WHERE {\n    INCLUDE %p\n    BIND (CONCAT(\"haswbstatement:P31=Q13442814 \", ?searchfor) AS ?searchstr)\n    SERVICE wikibase:mwapi {\n      bd:serviceParam wikibase:endpoint \"www.wikidata.org\" .\n      bd:serviceParam wikibase:api \"Generator\" .\n      bd:serviceParam mwapi:generator \"search\" .\n      bd:serviceParam mwapi:gsrsearch ?searchstr .\n      bd:serviceParam mwapi:gsrlimit \"max\" .\n      bd:serviceParam mwapi:gsrnamespace \"0\" .\n      bd:serviceParam mwapi:gsrprop \"\" .\n      ?item wikibase:apiOutputItem mwapi:title .\n    }\n  }\n} AS %i\nWHERE {\n  INCLUDE %i\n  INCLUDE %p\n  ?item rdfs:label ?itemLabel .\n  FILTER (LANG(?itemLabel)=\"en\")\n  FILTER(CONTAINS(LCASE(?itemLabel), ?searchfor))\n  OPTIONAL { ?item wdt:P698 ?PMID. }\n  OPTIONAL { ?item wdt:P356 ?DOI. }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Scholarly articles with \"Zika\" in the item label",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Scientific articles that have subject Zika virus or fever and that are used as a reference in another item",
      "namespace": "wikidata-examples",
      "name": "Scientific articles that have subject Zika virus or fever and that are used as a reference in another item",
      "sparql": "\nSELECT ?item ?itemLabel ?reference ?referenceType\nWHERE\n{\n  ?item wdt:P31 wd:Q13442814 #Scientific article\n  { ?item wdt:P921 wd:Q202864 } #Zika virus\n  UNION\n  { ?item wdt:P921 wd:Q8071861 } #Zika fever\n  ?reference ?referenceType ?item #find references to item having any property and store reference type\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Scientific articles that have subject Zika virus or fever and that are used as a reference in another item",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.CIViC Corpus",
      "namespace": "wikidata-examples",
      "name": "CIViC Corpus",
      "sparql": "\nSELECT DISTINCT ?pmid ?citation ?citationLabel\nWHERE\n{\n  VALUES ?predictor {p:P3354 p:P3355 p:P3356 p:P3357 p:P3358 p:P3359 }\n    ?item p:P3329 ?civicId ;\n          ?predictor ?predictor_value .\n    ?civicId ps:P3329 ?id .\n    ?predictor_value prov:wasDerivedFrom ?reference .\n    ?reference pr:P248 ?citation .\n    ?citation wdt:P698 ?pmid ;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "CIViC Corpus",
      "description": "====  Get the CIViC citation corpus ===="
    },
    {
      "query_id": "wikidata-examples.Get the CIViC citation corpus",
      "namespace": "wikidata-examples",
      "name": "Get the CIViC citation corpus",
      "sparql": "\nSELECT DISTINCT ?pmid ?citation ?citationLabel\nWHERE\n{\n  VALUES ?predictor {p:P3354 p:P3355 p:P3356 p:P3357 p:P3358 p:P3359 }\n    ?item p:P3329 ?civicId ;\n          ?predictor ?predictor_value .\n    ?civicId ps:P3329 ?id .\n    ?predictor_value prov:wasDerivedFrom ?reference .\n    ?reference pr:P248 ?citation .\n    ?citation wdt:P698 ?pmid ;\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Get the CIViC citation corpus",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Get the Pathways citation corpus",
      "namespace": "wikidata-examples",
      "name": "Get the Pathways citation corpus",
      "sparql": "\nSELECT ?id ?item ?itemLabel ?referenceLabel\nWHERE\n{\n  {?item wdt:P3937 ?id } UNION\n        {?item wdt:P2410 ?id }\n        ?item wdt:P2860 ?reference .\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Get the Pathways citation corpus",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Get the Wikipathways citation corpus",
      "namespace": "wikidata-examples",
      "name": "Get the Wikipathways citation corpus",
      "sparql": "\nSELECT ?wpid ?item ?itemLabel ?referenceLabel\nWHERE\n{\n  ?item wdt:P2410 ?wpid ;\n          wdt:P2860 ?reference ;\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Get the Wikipathways citation corpus",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Get the Reactome citation corups",
      "namespace": "wikidata-examples",
      "name": "Get the Reactome citation corups",
      "sparql": "\nSELECT ?reactome_id ?item ?itemLabel ?referenceLabel\nWHERE\n{\n  ?item wdt:P3937 ?reactome_id ;\n        wdt:P2860 ?reference ;\n\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Get the Reactome citation corups",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.Suriname citation corpora",
      "namespace": "wikidata-examples",
      "name": "Suriname citation corpora",
      "sparql": "\nSELECT ?item ?itemLabel ?_PubMed_ID\nWHERE\n{\n  ?item wdt:P31 wd:Q13442814 ;\n        rdfs:label ?itemLabel .\n\n  FILTER(CONTAINS(LCASE(?itemLabel), \"suriname\"))\n  OPTIONAL { ?item wdt:P698 ?_PubMed_ID. }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Suriname citation corpora",
      "description": ""
    },
    {
      "query_id": "wikidata-examples.English common names and information for animals given their scientific names",
      "namespace": "wikidata-examples",
      "name": "English common names and information for animals given their scientific names",
      "sparql": "\n# Given the scientific name for a list of animals, it will return all the\n# English common names, their length, life expectency, height, wing span and mass\n# Note: There is more information on these specific animals. Unfortunately, a lot of animals on WikiData have missing information (e.g. no life expectancy or mass)\nSELECT DISTINCT ?item ?scientific_name ?common_name ?length ?life_expectency ?height ?wing_span ?mass WHERE {\n  ?item wdt:P225 ?scientific_name;\n    wdt:P1843 ?common_name.\n  OPTIONAL { ?item wdt:P2043 ?length. }\n  OPTIONAL { ?item wdt:P2250 ?life_expectency. }\n  OPTIONAL { ?item wdt:P2048 ?height. }\n  OPTIONAL { ?item wdt:P2050 ?wing_span. }\n\n  # Adult mass only. Excludes birth mass\n  OPTIONAL {\n    ?item p:P2067 ?mass_statement_node.\n    ?mass_statement_node pq:P642 wd:Q78101716;\n      ps:P2067 ?mass.\n  }\n\n  # Only return common names in English\n  FILTER(LANGMATCHES(LANG(?common_name), \"en\"))\n\n  # List of animals. All lowercase to avoid capitalisation issues\n  FILTER(lcase(str(?scientific_name)) IN (\n   \"mustela erminea\",\n   \"aquila adalberti\",\n   \"vespula germanica\",\n   \"accipiter nisus\",\n   \"buteo buteo\"\n  ))\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "English common names and information for animals given their scientific names",
      "description": "=== English common names and information for animals given their scientific names==="
    },
    {
      "query_id": "wikidata-examples.External identifiers",
      "namespace": "wikidata-examples",
      "name": "External identifiers",
      "sparql": "\n#title:Swedish municipalities which changed their municipality identifier at some point\n#author:Salgo60 2021-09-11\nSELECT DISTINCT ?item ?itemLabel ?kkod1 ?kkod2 ?svwp_artikel WHERE\n{\n  ?item wdt:P525 ?kkod1 .\n  ?item wdt:P525 ?kkod2 .\n  FILTER ( ?kkod1<?kkod2 )\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"sv\". }\n  OPTIONAL { ?svwp_artikel schema:about ?item; schema:isPartOf <https://sv.wikipedia.org/> }\n}\nORDER BY ?itemLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "External identifiers",
      "description": "===  Swedish municipalities which changed their municipality identifier at some point ===\n This is an example of an identifier which is unstable over time and thus unsuitable to be used as an identifier in e.g. an IT-system."
    },
    {
      "query_id": "wikidata-examples.Swedish municipalities which changed their municipality identifier at some point",
      "namespace": "wikidata-examples",
      "name": "Swedish municipalities which changed their municipality identifier at some point",
      "sparql": "\n#title:Swedish municipalities which changed their municipality identifier at some point\n#author:Salgo60 2021-09-11\nSELECT DISTINCT ?item ?itemLabel ?kkod1 ?kkod2 ?svwp_artikel WHERE\n{\n  ?item wdt:P525 ?kkod1 .\n  ?item wdt:P525 ?kkod2 .\n  FILTER ( ?kkod1<?kkod2 )\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"sv\". }\n  OPTIONAL { ?svwp_artikel schema:about ?item; schema:isPartOf <https://sv.wikipedia.org/> }\n}\nORDER BY ?itemLabel\n",
      "url": "https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/queries/examples",
      "title": "Swedish municipalities which changed their municipality identifier at some point",
      "description": "This is an example of an identifier which is unstable over time and thus unsuitable to be used as an identifier in e.g. an IT-system."
    }
  ]
}